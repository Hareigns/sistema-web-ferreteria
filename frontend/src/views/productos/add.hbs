  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/styles/productos.css">

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-6">
      <div class="card p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Producto</h3>
            <form id="form-producto">
              <div class="mb-3">
                <label for="codigo_producto" class="form-label">Código Producto</label>
                <input type="text" id="codigo_producto" name="codigo_producto" class="form-control" required>
              </div>
              <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" id="nombre" name="nombre" class="form-control" required>
              </div>
              <div class="mb-3">
                <label for="sector" class="form-label">Sector</label>
                <select id="sector" name="sector" class="form-select" required>
                  <option value="" disabled selected>Seleccione un sector</option>
                  {{#each sectores}}
                    <option value="{{this}}">{{this}}</option>
                  {{/each}}
                </select>
              </div>
              <div class="mb-3">
                <label for="codigo_proveedor" class="form-label">Proveedor</label>
                <select id="codigo_proveedor" name="codigo_proveedor" class="form-select" required disabled>
                  <option value="" disabled selected>Seleccione un proveedor</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="precio_compra" class="form-label">Precio Compra</label>
                <input type="number" id="precio_compra" name="precio_compra" class="form-control" step="0.01" min="0" required>
              </div>
              <div class="mb-3">
                <label for="cantidad" class="form-label">Cantidad</label>
                <input type="number" id="cantidad" name="cantidad" class="form-control" min="1" required>
              </div>
              <div class="mb-3">
                <label for="marca" class="form-label">Marca</label>
                <input type="text" id="marca" name="marca" class="form-control" required>
              </div>
              <div class="mb-3">
                <label for="fecha_entrada" class="form-label">Fecha Entrada</label>
                <input type="date" id="fecha_entrada" name="fecha_entrada" class="form-control" readonly>
              </div>
              <div class="mb-3">
                <label for="fecha_vencimiento" class="form-label">Fecha Vencimiento</label>
                <input type="date" id="fecha_vencimiento" name="fecha_vencimiento" class="form-control">
              </div>
              <div class="d-flex justify-content-between gap-2">
                <button class="btn btn-primary flex-grow-1" type="submit">Ingresar</button>
                <button class="btn btn-secondary flex-grow-1" type="reset">Limpiar</button>
              </div>
            </form>
          </div>
      </div>
    </div>
  </div>
</div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Configurar fecha actual
      const fechaActual = new Date().toISOString().split('T')[0];
      document.getElementById('fecha_entrada').value = fechaActual;
      
      // Cargar proveedores al cambiar sector
      document.getElementById('sector').addEventListener('change', cargarProveedores);
      
      // Manejar envío del formulario
      document.getElementById('form-producto').addEventListener('submit', guardarProducto);
    });

    async function cargarProveedores() {
      const sector = this.value;
      const selectProveedor = document.getElementById('codigo_proveedor');
      
      if (!sector) {
        selectProveedor.disabled = true;
        selectProveedor.innerHTML = '<option value="" disabled selected>Seleccione un sector primero</option>';
        return;
      }
      
      try {
        selectProveedor.disabled = true;
        selectProveedor.innerHTML = '<option value="" disabled selected>Cargando proveedores...</option>';
        
        const response = await fetch(`/productos/api/proveedores?sector=${encodeURIComponent(sector)}`);
        const data = await response.json();
        
        if (data.success && data.data.length > 0) {
          selectProveedor.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';
          data.data.forEach(proveedor => {
            const option = document.createElement('option');
            option.value = proveedor.Cod_Proveedor;
            option.textContent = `${proveedor.Nombre} ${proveedor.Apellido || ''}`;
            selectProveedor.appendChild(option);
          });
          selectProveedor.disabled = false;
        } else {
          selectProveedor.innerHTML = '<option value="" disabled>No hay proveedores para este sector</option>';
        }
      } catch (error) {
        console.error('Error al cargar proveedores:', error);
        selectProveedor.innerHTML = '<option value="" disabled>Error al cargar proveedores</option>';
      }
    }

    async function guardarProducto(e) {
      e.preventDefault();
      
      const form = e.target;
      const submitBtn = form.querySelector('button[type="submit"]');
      const originalBtnText = submitBtn.textContent;
      
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Guardando...';
        
        const formData = {
          codigo_producto: form.codigo_producto.value,
          nombre: form.nombre.value,
          marca: form.marca.value,
          fecha_vencimiento: form.fecha_vencimiento.value,
          sector: form.sector.value,
          codigo_proveedor: form.codigo_proveedor.value,
          precio_compra: parseFloat(form.precio_compra.value),
          cantidad: parseInt(form.cantidad.value),
          fecha_entrada: form.fecha_entrada.value
        };
        
        console.log('Datos a enviar:', formData); // Para depuración
        
        const response = await fetch('/productos/api/productos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Producto registrado correctamente');
          form.reset();
          // Restablecer la fecha actual después del reset
          document.getElementById('fecha_entrada').value = new Date().toISOString().split('T')[0];
        } else {
          throw new Error(data.message || 'Error al guardar el producto');
        }
      } catch (error) {
        console.error('Error:', error);
        alert(`Error: ${error.message}`);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalBtnText;
      }
    }
    
  </script>
