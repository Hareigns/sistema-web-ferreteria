<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/styles/productos.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-5 py-5">
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="card p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Productos</h3>
          <form id="form-producto">
            <div class="row g-3">
              <div class="col-md-6">
                <label for="codigo_producto" class="form-label">C√≥digo Producto</label>
                <input type="text" id="codigo_producto" name="codigo_producto" class="form-control" required>
              </div>
              <div class="col-md-6">
                <label for="nombre" class="form-label">Nombre del Producto</label>
                <input type="text" id="nombre" name="nombre" class="form-control" required>
              </div>
            </div>

            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <label for="sector" class="form-label">Sector</label>
                <select id="sector" name="sector" class="form-select" required>
                  <option value="" disabled selected>Seleccione un sector</option>
                  {{#each sectores}}
                  <option value="{{this}}">{{this}}</option>
                  {{/each}}
                </select>
              </div>
              <div class="col-md-6">
                <label for="codigo_proveedor" class="form-label">Proveedor</label>
                <select id="codigo_proveedor" name="codigo_proveedor" class="form-select" required disabled>
                  <option value="" disabled selected>Seleccione un proveedor</option>
                </select>
              </div>
            </div>

            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <label for="precio_compra" class="form-label">Precio Compra</label>
                <input type="number" id="precio_compra" name="precio_compra" class="form-control" step="0.01" min="0"
                  required>
              </div>
              <div class="col-md-6">
                <label for="cantidad" class="form-label">Cantidad</label>
                <input type="number" id="cantidad" name="cantidad" class="form-control" min="1" required>
              </div>
            </div>

            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <label for="marca" class="form-label">Marca</label>
                <input type="text" id="marca" name="marca" class="form-control" required>
              </div>
              <div class="col-md-6">
                <label for="fecha_entrada" class="form-label">Fecha Entrada</label>
                <input type="date" id="fecha_entrada" name="fecha_entrada" class="form-control" disabled>
              </div>
              <div class="mb-3">
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="check_vencimiento">
                      <label class="form-check-label" for="check_vencimiento">Ingresar Fecha de Vencimiento</label>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <label for="fecha_vencimiento" class="form-label">Fecha Vencimiento</label>
                    <input type="date" id="fecha_vencimiento" name="fecha_vencimiento" class="form-control" disabled>
                  </div>
                </div>
              </div>
            </div>

            <div class="text-center mt-3">
              <button id="agregarProducto" type="button" class="btn-agregar">‚ûï Agregar a Lista</button>

              <div class="mt-4">
                <h5 class="text-center"
                  style="background-color: #80c7e0; color: #fff; padding: 8px; border-radius: 5px;">
                  Lista de Productos a Registrar</h5>
                <table class="table table-light table-striped text-center">
                  <thead class="table-secondary">
                    <tr>
                      <th>C√≥digo</th>
                      <th>Nombre</th>
                      <th>Sector</th>
                      <th>Marca</th>
                      <th>Cantidad</th>
                      <th>Precio</th>
                      <th>Vencimiento</th>
                      <th>Acciones</th>
                    </tr>
                  </thead>
                  <tbody id="tablaProductosTemp">
                    <!-- Aqu√≠ se agregar√°n din√°micamente los productos antes de guardar -->
                  </tbody>
                </table>
              </div>
              <div class="d-flex justify-content-between mt-3">
                <button id="guardarProductos" type="button" class="btn-guardar">üíæ Guardar Productos</button>
                <button type="reset" class="btn-limpiar">Limpiar</button>
              </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="container mt-5">
  <div class="card mb-4" style="border: 1px solid #ddd;">
    <div class="card-body text-center">
      <h3 class="mb-0" style="font-weight: bold; color: #333;">Inventario de Productos</h3>
      <div class="card p-4 table-responsive">
        <div class="card-body">
          <table class="table align-middle mb-0 bg-white" id="productosTable">
            <thead class="bg-light">
              <tr>
                <th>C√≥digo</th>
                <th>Nombre</th>
                <th>Sector</th>
                <th>Marca</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Fecha de Vencimiento</th>
              </tr>
            </thead>
            <tbody id="productos-table-body">
              <!-- Aqu√≠ se insertar√°n los productos registrados din√°micamente -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Variables globales
  let productosTemp = [];
  const fechaActual = new Date().toISOString().split('T')[0];

  // Inicializaci√≥n al cargar la p√°gina
  document.addEventListener("DOMContentLoaded", function () {
    document.getElementById('fecha_entrada').value = fechaActual;
    document.getElementById('sector').addEventListener('change', async function () {
      // Primero cargar proveedores y luego bloquear el sector
      await cargarProveedores.call(this); // Usamos call para mantener el contexto
      this.disabled = true;
    });
    document.getElementById('check_vencimiento').addEventListener('change', toggleFechaVencimiento);
    document.getElementById('agregarProducto').addEventListener('click', agregarProductoTemporal);
    document.getElementById('guardarProductos').addEventListener('click', guardarProductos);
    cargarProductos();
  });

  // Funci√≥n para alternar el campo de fecha de vencimiento
  function toggleFechaVencimiento() {
    const fechaVencimientoInput = document.getElementById("fecha_vencimiento");
    fechaVencimientoInput.disabled = !this.checked;
    if (!this.checked) fechaVencimientoInput.value = "";
  }

  // Funci√≥n para cargar proveedores seg√∫n el sector seleccionado
  async function cargarProveedores() {
    const sector = this.value; // Ahora usamos 'this' en lugar de obtener el elemento nuevamente
    const selectProveedor = document.getElementById('codigo_proveedor');

    if (!sector) {
      selectProveedor.disabled = true;
      selectProveedor.innerHTML = '<option value="" disabled selected>Seleccione un sector primero</option>';
      return;
    }

    try {
      selectProveedor.disabled = true;
      selectProveedor.innerHTML = '<option value="" disabled selected>Cargando proveedores...</option>';

      const response = await fetch(`http://localhost:4000/productos/api/proveedores?sector=${encodeURIComponent(sector)}`);
      const data = await response.json();

      if (data.success && data.data.length > 0) {
        selectProveedor.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';
        data.data.forEach(proveedor => {
          const option = document.createElement('option');
          option.value = proveedor.Cod_Proveedor;
          option.textContent = `${proveedor.Nombre} ${proveedor.Apellido || ''}`;
          selectProveedor.appendChild(option);
        });
        selectProveedor.disabled = false;
      } else {
        selectProveedor.innerHTML = '<option value="" disabled>No hay proveedores para este sector</option>';
      }
    } catch (error) {
      console.error('Error al cargar proveedores:', error);
      selectProveedor.innerHTML = '<option value="" disabled>Error al cargar proveedores</option>';
      // Si hay error, no bloqueamos el sector para permitir reintento
      this.disabled = false;
    }
  }


  // Funci√≥n para agregar producto a la lista temporal
  function agregarProductoTemporal() {
    const form = document.getElementById('form-producto');
    const codigoProducto = form.codigo_producto.value;
    const nombre = form.nombre.value;
    const marca = form.marca.value;
    const fechaVencimiento = document.getElementById('check_vencimiento').checked ? form.fecha_vencimiento.value : null;
    const sector = form.sector.value;
    const codigoProveedor = form.codigo_proveedor.value;
    const precioCompra = parseFloat(form.precio_compra.value);
    const cantidad = parseInt(form.cantidad.value);
    const fechaEntrada = form.fecha_entrada.value;

    // Validaci√≥n de campos obligatorios
    if (!codigoProducto || !nombre || !marca || !sector || !codigoProveedor || isNaN(precioCompra) || isNaN(cantidad)) {
      Swal.fire({
        icon: 'warning',
        title: 'Campos incompletos',
        text: 'Por favor, complete todos los campos obligatorios antes de agregar.'
      });
      return;
    }

    // Crear objeto producto
    const producto = {
      codigo_producto: codigoProducto,
      nombre: nombre,
      marca: marca,
      fecha_vencimiento: fechaVencimiento,
      sector: sector,
      codigo_proveedor: codigoProveedor,
      precio_compra: precioCompra,
      cantidad: cantidad,
      fecha_entrada: fechaEntrada
    };

    // Agregar a la lista temporal
    productosTemp.push(producto);

    // Actualizar tabla temporal
    actualizarTablaTemporal();

    // Limpiar formulario (excepto sector y proveedor)
    form.codigo_producto.value = '';
    form.nombre.value = '';
    form.marca.value = '';
    form.precio_compra.value = '';
    form.cantidad.value = '';
    document.getElementById('check_vencimiento').checked = false;
    document.getElementById('fecha_vencimiento').value = '';
    document.getElementById('fecha_vencimiento').disabled = true;
  }

  // Funci√≥n para actualizar la tabla temporal
  function actualizarTablaTemporal() {
    const tbody = document.getElementById('tablaProductosTemp');
    tbody.innerHTML = '';

    productosTemp.forEach((producto, index) => {
      const tr = document.createElement('tr');

      // Formatear fecha de vencimiento para mostrar
      let fechaVencimiento = "N/A";
      if (producto.fecha_vencimiento) {
        const fecha = new Date(producto.fecha_vencimiento);
        fechaVencimiento = `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear().toString().slice(-2)}`;
      }

      tr.innerHTML = `
        <td>${producto.codigo_producto}</td>
        <td>${producto.nombre}</td>
        <td>${producto.sector}</td>
        <td>${producto.marca}</td>
        <td>${producto.cantidad}</td>
        <td>${producto.precio_compra.toFixed(2)}</td>
        <td>${fechaVencimiento}</td>
        <td><button class="btn btn-danger btn-sm eliminar-producto" data-index="${index}">‚ùå Eliminar</button></td>
      `;

      tbody.appendChild(tr);
    });

    // Agregar eventos a los botones de eliminar
    document.querySelectorAll('.eliminar-producto').forEach(button => {
      button.addEventListener('click', function () {
        const index = parseInt(this.getAttribute('data-index'));
        eliminarProductoTemporal(index);
      });
    });
  }

  // Funci√≥n para eliminar producto de la lista temporal
  function eliminarProductoTemporal(index) {
    Swal.fire({
      title: '¬øEst√° seguro?',
      text: "Este producto ser√° eliminado de la lista temporal.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'S√≠, eliminar'
    }).then((result) => {
      if (result.isConfirmed) {
        productosTemp.splice(index, 1);
        actualizarTablaTemporal();
        Swal.fire({
          icon: 'success',
          title: 'Eliminado',
          text: 'El producto ha sido eliminado de la lista temporal.'
        });
      }
    });
  }

  // MODIFICAR LA FUNCI√ìN DE LIMPIEZA PARA REACTIVAR EL SELECTOR DE SECTOR
  async function guardarProductos() {
    if (productosTemp.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'Lista vac√≠a',
        text: 'No hay productos para guardar.'
      });
      return;
    }

    Swal.fire({
      title: "¬øConfirmar registro?",
      text: `¬øEst√° seguro que desea registrar ${productosTemp.length} producto(s)?`,
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "S√≠, registrar",
      cancelButtonText: "Cancelar"
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch('http://localhost:4000/productos/api/productos', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              productos: productosTemp
            })
          });

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Productos registrados",
              text: `Se han registrado ${productosTemp.length} producto(s) exitosamente.`,
              showConfirmButton: true
            }).then(() => {
              // Limpiar todo despu√©s de guardar
              productosTemp = [];
              document.getElementById('tablaProductosTemp').innerHTML = '';
              document.getElementById('form-producto').reset();
              document.getElementById('fecha_entrada').value = new Date().toISOString().split('T')[0];

              // REACTIVAR EL SELECTOR DE SECTOR
              document.getElementById('sector').disabled = false;

              // Recargar la tabla de productos registrados
              cargarProductos();
            });
          } else {
            Swal.fire("Error", data.message || "No se pudieron registrar los productos.", "error");
          }
        } catch (error) {
          console.error("Error al guardar productos:", error);
          Swal.fire("Error", "Hubo un problema al registrar los productos.", "error");
        }
      }
    });
  }

  // MODIFICAR LA FUNCI√ìN DE LIMPIEZA DEL FORMULARIO PARA REACTIVAR EL SECTOR
  document.getElementById('form-producto').addEventListener('reset', function () {
    // Reactivar el selector de sector al limpiar el formulario
    document.getElementById('sector').disabled = false;
    // Limpiar la lista temporal
    productosTemp = [];
    document.getElementById('tablaProductosTemp').innerHTML = '';
  });


  // Funci√≥n para cargar los productos registrados
  async function cargarProductos() {
    try {
      const response = await fetch("/productos/api/productos");
      const data = await response.json();

      if (data.success && Array.isArray(data.data) && data.data.length > 0) {
        const tbody = document.getElementById("productos-table-body");
        tbody.innerHTML = "";

        data.data.forEach(producto => {
          const precioCompra = producto.Precio_Compra ? producto.Precio_Compra.toFixed(2) : "0.00";

          let fechaVencimiento = producto.FechaVencimiento ? new Date(producto.FechaVencimiento) : null;
          if (fechaVencimiento) {
            fechaVencimiento = `${fechaVencimiento.getDate().toString().padStart(2, '0')}/${(fechaVencimiento.getMonth() + 1).toString().padStart(2, '0')}/${fechaVencimiento.getFullYear().toString().slice(-2)}`;
          } else {
            fechaVencimiento = "N/A";
          }

          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${producto.Cod_Producto || "Sin c√≥digo"}</td>
            <td>${producto.Nombre || "Desconocido"}</td>
            <td>${producto.Sector || "No asignado"}</td>
            <td>${producto.Marca || "No especificada"}</td>
            <td>${producto.Cantidad || 0}</td>
            <td>${precioCompra}</td>
            <td>${fechaVencimiento}</td>
          `;
          tbody.appendChild(row);
        });
      } else {
        document.getElementById("productos-table-body").innerHTML = `
          <tr><td colspan="7" class="text-center">No hay productos registrados</td></tr>
        `;
      }
    } catch (error) {
      console.error("Error al cargar productos:", error);
      document.getElementById("productos-table-body").innerHTML = `
        <tr><td colspan="7" class="text-center text-danger">Error al cargar datos</td></tr>
      `;
    }
  }
</script>