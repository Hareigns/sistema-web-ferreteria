<title>Gestión de Productos</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>


<nav class="navbar navbar-expand-lg navbar-dark">
  <div class="container">
    <a class="navbar-brand" href="#">
      <i class="fas fa-boxes me-2"></i>Gestión de Productos
    </a>
  </div>
</nav>

<div class="container mt-4">
  <!-- Pestañas -->
  <ul class="nav nav-tabs" id="productTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="register-tab" data-bs-toggle="tab" data-bs-target="#register" type="button"
        role="tab" aria-controls="register" aria-selected="true">
        <i class="fas fa-plus-circle me-2"></i>Registrar Productos
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="modify-tab" data-bs-toggle="tab" data-bs-target="#modify" type="button" role="tab"
        aria-controls="modify" aria-selected="false">
        <i class="fas fa-edit me-2"></i>Modificar Productos
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="outlet-tab" data-bs-toggle="tab" data-bs-target="#outlet" type="button" role="tab"
        aria-controls="outlet" aria-selected="false">
        <i class="fas fa-minus-circle me-2"></i>Registrar Bajas
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="inventory-tab" data-bs-toggle="tab" data-bs-target="#inventory" type="button"
        role="tab" aria-controls="inventory" aria-selected="false">
        <i class="fas fa-clipboard-list me-2"></i>Inventario
      </button>
    </li>
  </ul>

  <!-- Contenido de las pestañas -->
  <div class="tab-content" id="productTabsContent">
    <!-- Pestaña de Registro -->
    <div class="tab-pane fade show active" id="register" role="tabpanel" aria-labelledby="register-tab">
      <div class="card">
        <div class="card-header">
          <h3 class="text-center mb-0"><i class="fas fa-plus-circle me-2"></i>Registro de Productos</h3>
        </div>
        <div class="card-body p-4">
          <form id="form-producto">
            <!-- Fila 1: Código y Nombre -->
            <div class="row g-3">
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="codigo_producto">Código Producto</label>
                  <input type="text" id="codigo_producto" name="codigo_producto" class="form-control" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="nombre">Nombre del Producto</label>
                  <input type="text" id="nombre" name="nombre" class="form-control" required>
                </div>
              </div>
            </div>

            <!-- Fila 2: Sector y Proveedor -->
            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="sector">Sector</label>
                  <select id="sector" name="sector" class="form-select" required>
                    <option value="" disabled selected>Seleccione un sector</option>
                    <option value="Herramientas manuales">Herramientas manuales</option>
                    <option value="Herramientas eléctricas">Herramientas eléctricas</option>
                    <option value="Materiales de construcción">Materiales de construcción</option>
                    <option value="Pinturas o accesorios">Pinturas o accesorios</option>
                    <option value="Tuberías y plomería">Tuberías y plomería</option>
                    <option value="Electricidad e iluminación">Electricidad e iluminación</option>
                    <option value="Seguridad industrial">Seguridad industrial</option>
                    <option value="Productos de ferretería general">Productos de ferretería general</option>
                  </select>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="codigo_proveedor">Proveedor</label>
                  <select id="codigo_proveedor" name="codigo_proveedor" class="form-select" required disabled>
                    <option value="" disabled selected>Cargando proveedores...</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Fila 3: Precio y Cantidad -->
            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="precio_compra">Precio Compra</label>
                  <input type="number" id="precio_compra" name="precio_compra" class="form-control" step="0.01" min="0"
                    required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="cantidad">Cantidad</label>
                  <input type="number" id="cantidad" name="cantidad" class="form-control" min="1" required>
                </div>
              </div>
            </div>

            <!-- Fila 4: Marca y Ubicación -->
            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="marca">Marca</label>
                  <input type="text" id="marca" name="marca" class="form-control" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="ubicacion">Ubicación en Almacén</label>
                  <select id="ubicacion" name="ubicacion" class="form-select" required>
                    <option value="" disabled selected>Seleccione una ubicación</option>
                  </select>
                </div>
              </div>
            </div>

            <!-- Fila 5: Fechas -->
            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="fecha_entrada">Fecha Entrada</label>
                  <input type="date" id="fecha_entrada" name="fecha_entrada" class="form-control" disabled>
                </div>
              </div>
              <div class="col-md-6">
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="check_vencimiento">
                      <label class="form-check-label" for="check_vencimiento">Ingresar Fecha de Vencimiento</label>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="floating-label">
                      <label for="fecha_vencimiento">Fecha Vencimiento</label>
                      <input type="date" id="fecha_vencimiento" name="fecha_vencimiento" class="form-control" disabled>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Botón Agregar -->
            <div class="text-center mt-3">
              <button id="agregarProducto" type="button" class="btn btn-agregar">
                <i class="fas fa-plus-circle me-2"></i>Agregar a Lista
              </button>
            </div>

            <!-- Lista Temporal -->
            <div class="mt-4">
              <h5 class="text-center" style="background-color: #80c7e0; color: #fff; padding: 8px; border-radius: 5px;">
                Lista de Productos a Registrar
              </h5>
              <table class="table table-light table-striped text-center">
                <thead class="table-secondary">
                  <tr>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Sector</th>
                    <th>Marca</th>
                    <th>Cantidad</th>
                    <th>Precio</th>
                    <th>Vencimiento</th>
                    <th>Ubicación</th>
                    <th>Acciones</th>
                  </tr>
                </thead>
                <tbody id="tablaProductosTemp">
                  <!-- Aquí se agregarán dinámicamente los productos antes de guardar -->
                </tbody>
              </table>
            </div>

            <!-- Botones Guardar y Limpiar -->
            <div class="d-flex justify-content-between mt-3">
              <button id="guardarProductos" type="button" class="btn btn-guardar">
                <i class="fas fa-save me-2"></i>Guardar Productos
              </button>
              <button type="reset" class="btn btn-limpiar">
                <i class="fas fa-broom me-2"></i>Limpiar
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Pestaña de Modificación -->
    <div class="tab-pane fade" id="modify" role="tabpanel" aria-labelledby="modify-tab">
      <div class="card">
        <div class="card-header">
          <h3 class="text-center mb-0"><i class="fas fa-edit me-2"></i>Modificar Productos</h3>
        </div>
        <div class="card-body p-4">
          <!-- Selector de producto con búsqueda -->
          <div class="row mb-4">
            <div class="col-md-8">
              <div class="floating-label">
                <label for="select_producto_modificar">Buscar producto a modificar</label>
                <select id="select_producto_modificar" class="form-select select2-search"
                  onchange="cargarDatosProducto(this.value)">
                  <option value="" disabled selected>Escriba para buscar productos...</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Formulario de modificación -->
          <div id="formulario-modificacion" style="display: none;">
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i> Solo los campos marcados con <span class="text-primary">*</span>
              son editables.
            </div>

            <div class="row g-3">
              <!-- Fila 1: Código y Nombre -->
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_codigo_producto">Código Producto</label>
                  <input type="text" id="mod_codigo_producto" class="form-control" readonly
                    style="background-color: #f8f9fa;">
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_nombre">Nombre del Producto</label>
                  <input type="text" id="mod_nombre" class="form-control" readonly style="background-color: #f8f9fa;">
                </div>
              </div>

              <!-- Fila 2: Sector y Proveedor -->
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_sector">Sector</label>
                  <input type="text" id="mod_sector" class="form-control" readonly style="background-color: #f8f9fa;">
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_codigo_proveedor">Proveedor</label>
                  <input type="text" id="mod_codigo_proveedor" class="form-control" readonly
                    style="background-color: #f8f9fa;">
                </div>
              </div>

              <!-- Fila 3: Precio y Cantidad -->
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_precio_compra">Precio Compra <span class="text-primary">*</span></label>
                  <input type="number" id="mod_precio_compra" class="form-control" step="0.01" min="0">
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_cantidad">Cantidad <span class="text-primary">*</span></label>
                  <input type="number" id="mod_cantidad" class="form-control" min="1">
                  <small class="text-muted">La fecha de entrada se actualizará si modifica la cantidad</small>
                </div>
              </div>

              <!-- Fila 4: Marca y Ubicación -->
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_marca">Marca</label>
                  <input type="text" id="mod_marca" class="form-control" readonly style="background-color: #f8f9fa;">
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_ubicacion">Ubicación en Almacén <span class="text-primary">*</span></label>
                  <select id="mod_ubicacion" class="form-select">
                    <option value="" disabled selected>Seleccione una ubicación</option>
                    <!-- Las opciones se generarán con JavaScript -->
                  </select>
                </div>
              </div>

              <!-- Fila 5: Fechas -->
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_fecha_entrada">Fecha Entrada</label>
                  <input type="date" id="mod_fecha_entrada" class="form-control" readonly
                    style="background-color: #f8f9fa;">
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="mod_fecha_vencimiento">Fecha Vencimiento</label>
                  <input type="date" id="mod_fecha_vencimiento" class="form-control" readonly
                    style="background-color: #f8f9fa;">
                </div>
              </div>
            </div>

            <!-- Botón de modificación -->
            <div class="d-grid gap-2 mt-4">
              <button class="btn btn-success" type="button" id="modificarProductoButton" onclick="modificarProducto()">
                <i class="fas fa-save me-2"></i>Guardar Cambios
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Pestaña de Bajas -->
    <div class="tab-pane fade" id="outlet" role="tabpanel" aria-labelledby="outlet-tab">
      <div class="card">
        <div class="card-header bg-danger text-white">
          <h3 class="text-center mb-0"><i class="fas fa-minus-circle me-2"></i>Registro de Bajas</h3>
        </div>
        <div class="card-body p-4">
          <form id="bajaForm">
            <div class="row g-3">
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="product_id">Producto</label>
                  <select class="form-select select2-search" id="product_id" name="product_id" required>
                    <option value="" disabled selected>Cargando productos...</option>
                  </select>
                </div>
              </div>

              <div class="col-md-6">
                <div class="floating-label">
                  <label for="quantity">Cantidad</label>
                  <input type="number" class="form-control" id="quantity" name="quantity" min="1" required>
                  <div class="form-text">Inventario disponible: <span id="stock-display">0</span></div>
                </div>
              </div>

              <div class="col-md-6">
                <div class="floating-label">
                  <label for="reason">Motivo</label>
                  <select class="form-select" name="reason" id="reason" required>
                    <option value="" disabled selected>Seleccionar...</option>
                    <option value="Devolución a proveedor">Devolución a proveedor</option>
                    <option value="Producto Dañado">Producto dañado</option>
                    <option value="Producto Vencido">Producto vencido</option>
                    <option value="Producto oxidado o deteriorado">Producto oxidado o deteriorado</option>
                    <option value="Uso interno">Uso interno</option>
                    <option value="Pérdida o robo">Pérdida o robo</option>
                    <option value="Otro">Otro Motivo</option>
                  </select>
                </div>
              </div>

              <div class="col-md-6">
                <div class="floating-label">
                  <label for="notes">Observaciones (opcional)</label>
                  <textarea class="form-control" name="notes" id="notes" rows="2" disabled
                    placeholder="Seleccione 'Otro Motivo' para habilitar"></textarea>
                </div>
              </div>

              <div class="col-12">
                <button type="submit" class="btn btn-danger w-100">
                  <i class="fas fa-save me-2"></i> Registrar Baja
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Pestaña de Inventario -->
    <div class="tab-pane fade" id="inventory" role="tabpanel" aria-labelledby="inventory-tab">
      <div class="card">
        <div class="card-header">
          <h3 class="text-center mb-0"><i class="fas fa-clipboard-list me-2"></i>Inventario de Productos</h3>
        </div>
        <div class="card-body p-4">
          <div class="table-responsive">
            <table class="table align-middle mb-0 bg-white display" id="productosTable" style="width:100%">
              <thead class="bg-light">
                <tr>
                  <th>Código</th>
                  <th>Nombre</th>
                  <th>Sector</th>
                  <th>Marca</th>
                  <th>Ubicación</th>
                  <th>Cantidad</th>
                  <th>Precio</th>
                  <th>Vencimiento</th>
                  <th>Estado</th>
                </tr>
              </thead>
              <tbody>
                <!-- DataTables llenará esto automáticamente -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>
  // Variables globales
  let productosTemp = [];
  let productosTable;
  const now = new Date();
  const fechaActual = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;

  // Agrega esto antes de tu código principal
  $.fn.select2.defaults.set('language', {
    noResults: function () {
      return "No se encontraron resultados";
    },
    searching: function () {
      return "Buscando...";
    },
    errorLoading: function () {
      return "No se pudieron cargar los resultados";
    },
    inputTooShort: function (args) {
      var remainingChars = args.minimum - args.input.length;
      return "Por favor ingrese el codigo o nombre del articulo";
    }
  });

  // Inicialización al cargar la página
  document.addEventListener("DOMContentLoaded", function () {
    // Configurar fecha de entrada
    document.getElementById('fecha_entrada').value = fechaActual;

    // Event listeners
    document.getElementById('sector').addEventListener('change', cargarProveedores);
    document.getElementById('check_vencimiento').addEventListener('change', toggleFechaVencimiento);
    document.getElementById('agregarProducto').addEventListener('click', agregarProductoTemporal);
    document.getElementById('guardarProductos').addEventListener('click', guardarProductos);

    // Configurar Select2 para ambos selects (bajas y modificación) en español
    $('.select2-search').select2({
      language: "es",
      placeholder: "Escriba para buscar productos...",
      allowClear: true,
      width: '100%',
      minimumInputLength: 1, // Mostrar resultados después de 1 carácter
      dropdownParent: $('#modify') // Asegura que el dropdown aparezca correctamente en el modal
    });

    // Manejar cambio en motivo de baja
    document.getElementById('reason').addEventListener('change', function () {
      const notesTextarea = document.getElementById('notes');
      if (this.value === 'Otro') {
        notesTextarea.disabled = false;
        notesTextarea.required = true;
        notesTextarea.placeholder = 'Por favor especifique el motivo de baja';
      } else {
        notesTextarea.disabled = true;
        notesTextarea.required = false;
        notesTextarea.placeholder = 'Seleccione "Otro Motivo" para habilitar';
        notesTextarea.value = '';
      }
    });

    // Manejar cambio en select de productos para bajas
    $('#product_id').on('change', function () {
      const selectedOption = $(this).find('option:selected');
      const stock = selectedOption.data('stock') || 0;
      $('#stock-display').text(stock);
      $('#quantity').attr('max', stock);
    });

    // Manejar envío del formulario de bajas
    document.getElementById('bajaForm').addEventListener('submit', registrarBaja);

    // Cargar datos iniciales
    cargarProductos();
    cargarSelectProductos();
    cargarProductosParaBajas();
    generarOpcionesUbicacion();
  });

  // Función para generar opciones de ubicación (compartida para ambos formularios)
  function generarOpcionesUbicacion() {
    const selects = [
      document.getElementById('ubicacion'),
      document.getElementById('mod_ubicacion')
    ];

    selects.forEach(select => {
      if (!select) return;

      // Guardar el valor seleccionado actual si existe
      const currentValue = select.value;
      select.innerHTML = '<option value="" disabled selected>Seleccione una ubicación</option>';

      // Generar todas las combinaciones de ubicación
      for (let estante = 1; estante <= 8; estante++) {
        for (let repisa = 1; repisa <= 6; repisa++) {
          for (let espacio = 1; espacio <= 4; espacio++) {
            const texto = `Estante ${estante}, Repisa ${repisa}, Espacio ${espacio}`;
            const valor = `E${estante}R${repisa}E${espacio}`;
            const option = new Option(texto, valor);
            select.add(option);
          }
        }
      }

      // Restaurar el valor seleccionado si existe
      if (currentValue && Array.from(select.options).some(opt => opt.value === currentValue)) {
        select.value = currentValue;
      }
    });
  }

  // Función para alternar el campo de fecha de vencimiento
  function toggleFechaVencimiento() {
    const fechaVencimientoInput = document.getElementById("fecha_vencimiento");
    fechaVencimientoInput.disabled = !this.checked;
    if (!this.checked) fechaVencimientoInput.value = "";
  }

  // Función para cargar proveedores por sector
  async function cargarProveedores() {
    const sector = this.value;
    const selectProveedor = document.getElementById('codigo_proveedor');

    try {
      selectProveedor.innerHTML = '<option value="" disabled selected>Cargando proveedores...</option>';

      const response = await fetch(`/productos/api/proveedores?sector=${encodeURIComponent(sector)}`);
      const data = await response.json();

      if (data.success) {
        selectProveedor.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';

        data.data.forEach(proveedor => {
          const option = document.createElement('option');
          option.value = proveedor.codigo_proveedor;
          option.textContent = `${proveedor.codigo_proveedor} - ${proveedor.nombre}`;
          selectProveedor.appendChild(option);
        });

        selectProveedor.disabled = false;
      } else {
        throw new Error(data.message || 'Error al cargar proveedores');
      }
    } catch (error) {
      console.error('Error al cargar proveedores:', error);
      selectProveedor.innerHTML = '<option value="" disabled selected>Error al cargar proveedores</option>';
      Swal.fire('Error', 'No se pudieron cargar los proveedores', 'error');
    }
  }

  // Función para cargar productos en la tabla principal
  async function cargarProductos() {
    try {
      const response = await fetch("/productos/api/productos");
      const data = await response.json();

      if ($.fn.DataTable.isDataTable('#productosTable')) {
        $('#productosTable').DataTable().destroy();
      }

      $('#productosTable tbody').empty();

      if (data.success && Array.isArray(data.data) && data.data.length > 0) {
        productosTable = $('#productosTable').DataTable({
          data: data.data,
          columns: [
            { data: 'Cod_Producto' },
            { data: 'Nombre' },
            { data: 'Sector' },
            { data: 'Marca' },
            {
              data: 'Descripcion',
              render: function (data) {
                return data || 'Sin ubicación';
              }
            },
            { data: 'Cantidad' },
            {
              data: 'Precio_Compra',
              render: function (data) {
                return data ? parseFloat(data).toFixed(2) : '0.00';
              }
            },
            {
              data: 'FechaVencimiento',
              render: function (data) {
                if (!data) return "N/A";
                const fecha = new Date(data);
                return `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear()}`;
              }
            },
            {
              data: 'Estado',
              render: function (data) {
                const estado = data || 'Activo';
                return `<span class="badge ${estado === 'Activo' ? 'bg-success' : 'bg-danger'}">${estado}</span>`;
              }
            }
          ],
          paging: true,
          searching: true,
          ordering: true,
          pageLength: 10,
          lengthMenu: [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
          language: {
            "decimal": "",
            "emptyTable": "No hay productos registrados",
            "info": "Mostrando _START_ a _END_ de _TOTAL_ productos",
            "infoEmpty": "Mostrando 0 a 0 de 0 productos",
            "infoFiltered": "(filtrado de _MAX_ productos totales)",
            "infoPostFix": "",
            "thousands": ",",
            "lengthMenu": "Mostrar _MENU_ productos",
            "loadingRecords": "Cargando...",
            "processing": "Procesando...",
            "search": "Buscar:",
            "zeroRecords": "No se encontraron productos coincidentes",
            "paginate": {
              "first": "Primero",
              "last": "Último",
              "next": "Siguiente",
              "previous": "Anterior"
            }
          }
        });
      } else {
        $('#productosTable').DataTable({
          data: [],
          language: {
            "emptyTable": "No hay productos registrados"
          }
        });
      }
    } catch (error) {
      console.error("Error al cargar productos:", error);
      $('#productosTable').DataTable({
        data: [],
        language: {
          "emptyTable": "Error al cargar los productos"
        }
      });
      Swal.fire('Error', 'No se pudieron cargar los productos', 'error');
    }
  }

  // Modifica la función cargarSelectProductos
  async function cargarSelectProductos() {
    try {
      const response = await fetch('/productos/api/productos');
      const data = await response.json();
      const select = document.getElementById('select_producto_modificar');

      if (!select) return;

      // Limpiar opciones existentes (excepto la primera)
      $(select).empty().append('<option value="" disabled selected>Escriba para buscar productos...</option>');

      if (data.success && data.data && data.data.length > 0) {
        data.data.forEach(producto => {
          const option = new Option(
            `${producto.Cod_Producto} - ${producto.Nombre} (${producto.Marca})`,
            producto.Cod_Producto
          );
          select.add(option);
        });

        // Actualizar Select2 después de agregar las opciones
        $(select).trigger('change.select2');
      } else {
        console.warn('No se recibieron datos de productos');
      }
    } catch (error) {
      console.error('Error al cargar productos:', error);
      Swal.fire('Error', 'No se pudieron cargar los productos para modificación', 'error');
    }
  }

  // Función para cargar productos en el select de bajas (solo disponibles)
  async function cargarProductosParaBajas() {
    try {
      const response = await fetch('/productos/api/productos-activos');
      const data = await response.json();
      const select = document.getElementById('product_id');

      if (!select) return;

      select.innerHTML = '<option value="" disabled selected>Seleccione un producto</option>';

      if (data.success && data.data && data.data.length > 0) {
        // Filtrar solo productos con cantidad > 0
        const productosDisponibles = data.data.filter(producto => producto.Cantidad > 0);

        if (productosDisponibles.length === 0) {
          select.innerHTML = '<option value="" disabled selected>No hay productos disponibles</option>';
          return;
        }

        // Ordenar alfabéticamente por nombre
        productosDisponibles.sort((a, b) => a.Nombre.localeCompare(b.Nombre));

        // Agregar opciones al select
        productosDisponibles.forEach(producto => {
          const option = document.createElement('option');
          option.value = producto.Cod_Producto;
          option.textContent = `${producto.Cod_Producto} - ${producto.Nombre} (Stock: ${producto.Cantidad})`;
          option.dataset.stock = producto.Cantidad;
          select.appendChild(option);
        });

        // Inicializar Select2
        $(select).select2({
          language: "es",
          placeholder: "Buscar producto...",
          allowClear: true,
          width: '100%'
        });
      } else {
        select.innerHTML = '<option value="" disabled selected>No hay productos disponibles</option>';
      }
    } catch (error) {
      console.error('Error al cargar productos para bajas:', error);
      const select = document.getElementById('product_id');
      if (select) {
        select.innerHTML = '<option value="" disabled selected>Error al cargar productos</option>';
      }
      Swal.fire('Error', 'No se pudieron cargar los productos para bajas', 'error');
    }
  }

  // Función para cargar datos del producto seleccionado
  async function cargarDatosProducto(codigoProducto) {
    const formularioMod = document.getElementById('formulario-modificacion');

    if (!codigoProducto) {
      formularioMod.style.display = 'none';
      return;
    }

    try {
      const response = await fetch(`/productos/api/productos/${codigoProducto}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

      const data = await response.json();
      console.log("Datos recibidos del producto:", data);

      if (data.success && data.data) {
        const producto = data.data;

        // Llenar los campos del formulario con los nuevos IDs (prefijo 'mod_')
        document.getElementById('mod_codigo_producto').value = producto.Cod_Producto || '';
        document.getElementById('mod_nombre').value = producto.Nombre || '';
        document.getElementById('mod_marca').value = producto.Marca || '';
        document.getElementById('mod_sector').value = producto.Sector || '';

        // Mostrar proveedor en formato "Código - Nombre Apellido"
        const proveedorText = producto.Cod_Proveedor
          ? `${producto.Cod_Proveedor} - ${producto.ProveedorNombre || ''} ${producto.ProveedorApellido || ''}`.trim()
          : 'Sin proveedor';
        document.getElementById('mod_codigo_proveedor').value = proveedorText;

        document.getElementById('mod_precio_compra').value = producto.Precio_Compra || '';
        document.getElementById('mod_cantidad').value = producto.Cantidad || '';
        document.getElementById('mod_cantidad').dataset.originalValue = producto.Cantidad || '';
        document.getElementById('mod_fecha_entrada').value = formatDateForInput(producto.Fecha_Entrada) || fechaActual;

        // Generar opciones de ubicación
        generarOpcionesUbicacion();

        // Establecer la ubicación actual del producto
        const ubicacionSelect = document.getElementById('mod_ubicacion');
        if (producto.Descripcion) {
          const ubicacionExistente = Array.from(ubicacionSelect.options).find(
            opt => opt.value === producto.Descripcion
          );

          if (ubicacionExistente) {
            ubicacionSelect.value = producto.Descripcion;
          } else {
            const option = new Option(producto.Descripcion, producto.Descripcion);
            ubicacionSelect.add(option);
            ubicacionSelect.value = producto.Descripcion;
          }
        } else {
          ubicacionSelect.value = '';
        }

        // Manejar fecha de vencimiento
        document.getElementById('mod_fecha_vencimiento').value = producto.FechaVencimiento
          ? formatDateForInput(producto.FechaVencimiento)
          : '';

        // Bloquear campos no editables
        const camposNoEditables = [
          'mod_codigo_producto', 'mod_nombre', 'mod_marca',
          'mod_sector', 'mod_codigo_proveedor', 'mod_fecha_entrada',
          'mod_fecha_vencimiento'
        ];

        camposNoEditables.forEach(id => {
          const campo = document.getElementById(id);
          if (campo) {
            campo.readOnly = true;
            campo.disabled = true;
            campo.style.backgroundColor = '#f8f9fa';
          }
        });

        // Habilitar campos editables
        document.getElementById('mod_precio_compra').readOnly = false;
        document.getElementById('mod_cantidad').readOnly = false;
        document.getElementById('mod_ubicacion').disabled = false;

        // Mostrar el formulario y el botón
        formularioMod.style.display = 'block';
        document.getElementById('modificarProductoButton').disabled = false;
        document.getElementById('modificarProductoButton').style.display = 'block';
      }
    } catch (error) {
      console.error('Error al cargar datos del producto:', error);
      Swal.fire('Error', 'No se pudieron cargar los datos del producto', 'error');
      formularioMod.style.display = 'none';
    }
  }


  // Función auxiliar para formatear fechas
  function formatDateForInput(dateString) {
    if (!dateString) return '';
    const [year, month, day] = dateString.split('T')[0].split('-');
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }

  // Función para modificar un producto
  async function modificarProducto() {
    const codigoProducto = document.getElementById('select_producto_modificar').value;
    if (!codigoProducto) {
      Swal.fire('Error', 'Debe seleccionar un producto', 'error');
      return;
    }

    const precio_compra = parseFloat(document.getElementById('mod_precio_compra').value);
    const cantidad = parseInt(document.getElementById('mod_cantidad').value);
    const ubicacionValor = document.getElementById('mod_ubicacion').value;
    let ubicacionTexto = ubicacionValor;

    if (/^E\d+R\d+E\d+$/.test(ubicacionValor)) {
      const partes = ubicacionValor.match(/E(\d+)R(\d+)E(\d+)/);
      ubicacionTexto = `Estante ${partes[1]}, Repisa ${partes[2]}, Espacio ${partes[3]}`;
    }

    const cantidadOriginal = parseInt(document.getElementById('mod_cantidad').dataset.originalValue) || cantidad;
    const cantidadModificada = cantidad !== cantidadOriginal;

    // Validaciones
    if (isNaN(precio_compra)) {
      Swal.fire('Error', 'El precio debe ser un número válido', 'error');
      return;
    }
    if (isNaN(cantidad)) {
      Swal.fire('Error', 'La cantidad debe ser un número válido', 'error');
      return;
    }
    if (!ubicacionValor) {
      Swal.fire('Error', 'Debe seleccionar una ubicación', 'error');
      return;
    }

    Swal.fire({
      title: '¿Confirmar modificación?',
      html: `¿Desea actualizar los siguientes campos?<br><br>
              <strong>Precio:</strong> ${precio_compra.toFixed(2)}<br>
              <strong>Cantidad:</strong> ${cantidad}<br>
              <strong>Ubicación:</strong> ${ubicacionTexto}<br><br>
              ${cantidadModificada ? '<i>La fecha de entrada se actualizará a la fecha actual</i>' : ''}`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sí, guardar cambios',
      cancelButtonText: 'Cancelar'
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const btnModificar = document.getElementById('modificarProductoButton');
          btnModificar.disabled = true;
          btnModificar.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

          const response = await fetch(`/productos/api/productos/${codigoProducto}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              precio_compra: precio_compra,
              cantidad: cantidad,
              descripcion: ubicacionTexto,
              actualizar_fecha: cantidadModificada
            })
          });

          const result = await response.json();

          if (result.success) {
            await Swal.fire({
              icon: 'success',
              title: '¡Cambios guardados!',
              text: 'El producto ha sido actualizado correctamente.',
              timer: 2000,
              timerProgressBar: true
            });

            // Recargar datos
            cargarSelectProductos();
            cargarProductos();
            cargarProductosParaBajas();

            // Ocultar el formulario hasta nueva selección
            document.getElementById('formulario-modificacion').style.display = 'none';
            document.getElementById('select_producto_modificar').value = '';
          } else {
            throw new Error(result.message || 'No se pudo modificar el producto');
          }
        } catch (error) {
          console.error('Error al modificar producto:', error);
          Swal.fire('Error', error.message || 'Error al conectar con el servidor', 'error');
        } finally {
          const btnModificar = document.getElementById('modificarProductoButton');
          if (btnModificar) {
            btnModificar.disabled = false;
            btnModificar.innerHTML = '<i class="fas fa-save me-2"></i>Guardar Cambios';
          }
        }
      }
    });
  }

  // Función para limpiar el formulario de producto
  function limpiarFormularioProducto() {
    const form = document.getElementById('form-producto');
    if (form) form.reset();

    const fechaEntrada = document.getElementById('fecha_entrada');
    if (fechaEntrada) fechaEntrada.value = new Date().toISOString().split('T')[0];

    const campos = ['codigo_producto', 'nombre', 'marca', 'precio_compra', 'cantidad'];
    campos.forEach(id => {
      const campo = document.getElementById(id);
      if (campo) campo.readOnly = false;
    });

    const sector = document.getElementById('sector');
    if (sector) {
      sector.disabled = false;
      sector.value = '';
    }

    const codigoProveedor = document.getElementById('codigo_proveedor');
    if (codigoProveedor) {
      codigoProveedor.disabled = true;
      codigoProveedor.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';
    }

    const checkVencimiento = document.getElementById('check_vencimiento');
    if (checkVencimiento) {
      checkVencimiento.checked = false;
      checkVencimiento.disabled = false;
    }

    const fechaVencimiento = document.getElementById('fecha_vencimiento');
    if (fechaVencimiento) {
      fechaVencimiento.value = '';
      fechaVencimiento.disabled = true;
    }

    const ubicacion = document.getElementById('ubicacion');
    if (ubicacion) {
      ubicacion.disabled = false;
      ubicacion.value = '';
    }

    const selectModificar = document.getElementById('select_producto_modificar');
    if (selectModificar) {
      selectModificar.value = '';
    }

    const modificarBtn = document.getElementById('modificarProductoButton');
    if (modificarBtn) {
      modificarBtn.disabled = true;
      modificarBtn.style.display = 'none';
    }

    const agregarBtn = document.getElementById('agregarProducto');
    if (agregarBtn) {
      agregarBtn.style.display = 'block';
    }

    const guardarBtn = document.getElementById('guardarProductos');
    if (guardarBtn) {
      guardarBtn.style.display = 'block';
    }
  }

  // Función para agregar producto a la lista temporal
  function agregarProductoTemporal() {
    const form = document.getElementById('form-producto');
    const codigoProducto = form.codigo_producto.value;
    const nombre = form.nombre.value;
    const marca = form.marca.value;
    const ubicacionValor = form.ubicacion.value;
    let ubicacionTexto = ubicacionValor;

    if (/^E\d+R\d+E\d+$/.test(ubicacionValor)) {
      const partes = ubicacionValor.match(/E(\d+)R(\d+)E(\d+)/);
      ubicacionTexto = `Estante ${partes[1]}, Repisa ${partes[2]}, Espacio ${partes[3]}`;
    } else {
      const regex = /^Estante\s\d{1,2},\sRepisa\s\d{1,2},\sEspacio\s\d{1,2}$/;
      if (!regex.test(ubicacionTexto)) {
        Swal.fire('Error', 'El formato de ubicación no es válido', 'error');
        return;
      }
    }

    const fechaVencimiento = document.getElementById('check_vencimiento').checked ? form.fecha_vencimiento.value : null;
    const sector = form.sector.value;
    const codigoProveedor = form.codigo_proveedor.value;
    const precioCompra = parseFloat(form.precio_compra.value);
    const cantidad = parseInt(form.cantidad.value);
    const fechaEntrada = form.fecha_entrada.value;

    // Validación de campos obligatorios
    if (!codigoProducto || !nombre || !marca || !ubicacionValor || !sector || !codigoProveedor || isNaN(precioCompra) || isNaN(cantidad)) {
      Swal.fire({
        icon: 'warning',
        title: 'Campos incompletos',
        text: 'Por favor, complete todos los campos obligatorios antes de agregar.'
      });
      return;
    }

    // Crear objeto producto
    const producto = {
      codigo_producto: codigoProducto,
      nombre: nombre,
      marca: marca,
      descripcion: ubicacionTexto,
      ubicacion: ubicacionValor,
      fecha_vencimiento: fechaVencimiento,
      sector: sector,
      codigo_proveedor: codigoProveedor,
      precio_compra: precioCompra,
      cantidad: cantidad,
      fecha_entrada: fechaEntrada
    };

    // Agregar a la lista temporal
    productosTemp.push(producto);

    // Actualizar tabla temporal
    actualizarTablaTemporal();

    // Limpiar formulario (excepto sector y proveedor)
    form.codigo_producto.value = '';
    form.nombre.value = '';
    form.marca.value = '';
    form.precio_compra.value = '';
    form.cantidad.value = '';
    document.getElementById('check_vencimiento').checked = false;
    document.getElementById('fecha_vencimiento').value = '';
    document.getElementById('fecha_vencimiento').disabled = true;
  }

  // Función para actualizar la tabla temporal
  function actualizarTablaTemporal() {
    const tbody = document.getElementById('tablaProductosTemp');
    tbody.innerHTML = '';

    productosTemp.forEach((producto, index) => {
      const tr = document.createElement('tr');

      let fechaVencimiento = "N/A";
      if (producto.fecha_vencimiento) {
        const fecha = new Date(producto.fecha_vencimiento);
        fechaVencimiento = `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear().toString().slice(-2)}`;
      }

      tr.innerHTML = `
                    <td>${producto.codigo_producto}</td>
                    <td>${producto.nombre}</td>
                    <td>${producto.sector}</td>
                    <td>${producto.marca}</td>
                    <td>${producto.cantidad}</td>
                    <td>${producto.precio_compra.toFixed(2)}</td>
                    <td>${fechaVencimiento}</td>
                    <td>${producto.ubicacion || 'N/A'}</td>
                    <td><button class="btn btn-danger btn-sm eliminar-producto" data-index="${index}"><i class="fas fa-trash me-1"></i>Eliminar</button></td>
                `;

      tbody.appendChild(tr);
    });

    // Agregar eventos a los botones de eliminar
    document.querySelectorAll('.eliminar-producto').forEach(button => {
      button.addEventListener('click', function () {
        const index = parseInt(this.getAttribute('data-index'));
        eliminarProductoTemporal(index);
      });
    });
  }

  // Función para eliminar producto de la lista temporal
  function eliminarProductoTemporal(index) {
    Swal.fire({
      title: '¿Está seguro?',
      text: "Este producto será eliminado de la lista temporal.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, eliminar'
    }).then((result) => {
      if (result.isConfirmed) {
        productosTemp.splice(index, 1);
        actualizarTablaTemporal();
        Swal.fire({
          icon: 'success',
          title: 'Eliminado',
          text: 'El producto ha sido eliminado de la lista temporal.'
        });
      }
    });
  }

  // Función para guardar productos temporales
  async function guardarProductos() {
    if (productosTemp.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'Lista vacía',
        text: 'No hay productos para guardar.'
      });
      return;
    }

    Swal.fire({
      title: "¿Confirmar registro?",
      text: `¿Está seguro que desea registrar ${productosTemp.length} producto(s)?`,
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Sí, registrar",
      cancelButtonText: "Cancelar"
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const btnGuardar = document.getElementById('guardarProductos');
          btnGuardar.disabled = true;
          btnGuardar.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Procesando...';

          const response = await fetch('/productos/api/productos', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              productos: productosTemp
            })
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              icon: "success",
              title: "Productos registrados",
              text: `Se han registrado ${productosTemp.length} producto(s) exitosamente.`,
              showConfirmButton: true
            }).then(() => {
              // Limpiar todo después de guardar
              productosTemp = [];
              document.getElementById('tablaProductosTemp').innerHTML = '';
              document.getElementById('form-producto').reset();
              document.getElementById('fecha_entrada').value = new Date().toISOString().split('T')[0];

              // Recargar datos
              cargarProductos();
              cargarSelectProductos();
              cargarProductosParaBajas();
            });
          } else {
            throw new Error(data.message || "No se pudieron registrar los productos.");
          }
        } catch (error) {
          console.error("Error al guardar productos:", error);
          Swal.fire("Error", error.message || "Hubo un problema al registrar los productos.", "error");
        } finally {
          const btnGuardar = document.getElementById('guardarProductos');
          if (btnGuardar) {
            btnGuardar.disabled = false;
            btnGuardar.innerHTML = '<i class="fas fa-save me-2"></i>Guardar Productos';
          }
        }
      }
    });
  }

  // Función para registrar una baja de producto
  async function registrarBaja(e) {
    e.preventDefault();

    const form = e.target;
    const submitBtn = form.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Procesando...';

    try {
      const codigoProducto = $('#product_id').val();
      const quantity = parseInt($('#quantity').val());
      const reason = $('#reason').val();
      const notes = $('#notes').val();

      // Validaciones
      if (!codigoProducto) throw new Error('Debe seleccionar un producto');
      if (isNaN(quantity) || quantity <= 0) throw new Error('La cantidad debe ser un número mayor a cero');
      if (reason === 'Otro' && !notes.trim()) throw new Error('Debe especificar el motivo');

      const response = await fetch('/productos/api/productos/baja', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          codigo_producto: codigoProducto,
          motivo: reason,
          cantidad: quantity,
          observaciones: notes
        })
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.message);
      }

      await Swal.fire({
        icon: 'success',
        title: 'Baja registrada',
        text: result.message,
        timer: 3000,
        timerProgressBar: true
      });

      // Resetear el formulario
      form.reset();
      $('#product_id').val('').trigger('change');
      $('#stock-display').text('0');
      $('#notes').val('').prop('disabled', true);

      // Recargar datos
      cargarProductos();
      cargarSelectProductos();
      cargarProductosParaBajas();

    } catch (error) {
      await Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message
      });
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<i class="fas fa-save me-2"></i> Registrar Baja';
    }
  }
</script>