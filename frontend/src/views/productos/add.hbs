<title>Registro de Productos</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="/styles/productos.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



<div class="container mt-5 py-5">
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="card p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Productos</h3>
          <form id="form-producto">
            <div class="row g-3">
              <div class="col-md-6">
                <label for="codigo_producto" class="form-label">Código Producto</label>
                <input type="text" id="codigo_producto" name="codigo_producto" class="form-control" required>
              </div>
              <div class="col-md-6">
                <label for="nombre" class="form-label">Nombre del Producto</label>
                <input type="text" id="nombre" name="nombre" class="form-control" required>
              </div>
            </div>

            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <label for="sector" class="form-label">Sector</label>
                <select id="sector" name="sector" class="form-select" required>
                  <option value="" disabled selected>Seleccione un sector</option>
                  {{#each sectores}}
                  <option value="{{this}}">{{this}}</option>
                  {{/each}}
                </select>
              </div>
              <div class="col-md-6">
                <label for="codigo_proveedor" class="form-label">Proveedor</label>
                <select id="codigo_proveedor" name="codigo_proveedor" class="form-select" required disabled>
                  <option value="" disabled selected>Cargando proveedores...</option>
                </select>
              </div>
            </div>

            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <label for="precio_compra" class="form-label">Precio Compra</label>
                <input type="number" id="precio_compra" name="precio_compra" class="form-control" step="0.01" min="0"
                  required>
              </div>
              <div class="col-md-6">
                <label for="cantidad" class="form-label">Cantidad</label>
                <input type="number" id="cantidad" name="cantidad" class="form-control" min="1" required>
              </div>
            </div>

            <div class="row g-3 mt-2">
              <div class="col-md-6">
                <label for="marca" class="form-label">Marca</label>
                <input type="text" id="marca" name="marca" class="form-control" required>
              </div>
              <div class="col-md-6">
                <label for="fecha_entrada" class="form-label">Fecha Entrada</label>
                <input type="date" id="fecha_entrada" name="fecha_entrada" class="form-control" disabled>
              </div>
              <div class="mb-3">
                <div class="row">
                  <div class="col-md-6">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="check_vencimiento">
                      <label class="form-check-label" for="check_vencimiento">Ingresar Fecha de Vencimiento</label>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <label for="fecha_vencimiento" class="form-label">Fecha Vencimiento</label>
                    <input type="date" id="fecha_vencimiento" name="fecha_vencimiento" class="form-control" disabled>
                  </div>
                </div>
              </div>
            </div>

            <div class="text-center mt-3">
              <button id="agregarProducto" type="button" class="btn-agregar">➕ Agregar a Lista</button>

              <div class="mt-4">
                <h5 class="text-center"
                  style="background-color: #80c7e0; color: #fff; padding: 8px; border-radius: 5px;">
                  Lista de Productos a Registrar</h5>
                <table class="table table-light table-striped text-center">
                  <thead class="table-secondary">
                    <tr>
                      <th>Código</th>
                      <th>Nombre</th>
                      <th>Sector</th>
                      <th>Marca</th>
                      <th>Cantidad</th>
                      <th>Precio</th>
                      <th>Vencimiento</th>
                      <th>Acciones</th>
                    </tr>
                  </thead>
                  <tbody id="tablaProductosTemp">
                    <!-- Aquí se agregarán dinámicamente los productos antes de guardar -->
                  </tbody>
                </table>
              </div>
              <div class="d-flex justify-content-between mt-3">
                <button id="guardarProductos" type="button" class="btn-guardar">💾 Guardar Productos</button>
                <button type="reset" class="btn-limpiar">Limpiar</button>
              </div>
            </div>
          </form>
        </div>
        <div class="card mb-4">
          <div class="card-body">
            <h5 class="text-center mb-3">Modificar Producto</h5>
            <div class="row">
              <div class="col-md-8">
                <select id="select_producto_modificar" class="form-select" onchange="cargarDatosProducto(this.value)">
                  <option value="" disabled selected>Seleccione un producto</option>
                  <!-- Las opciones se llenarán con JavaScript -->
                </select>
              </div>
              <div class="col-md-4">
                <button class="btn btn-success w-100" type="button" id="modificarProductoButton"
                  onclick="modificarProducto()" disabled>Modificar</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="container mt-5">
  <div class="card mb-4" style="border: 1px solid #ddd;">
    <div class="card-body text-center">
      <h3 class="mb-0" style="font-weight: bold; color: #333;">Inventario de Productos</h3>
      <div class="card p-4 table-responsive">
        <div class="card-body">
          <table class="table align-middle mb-0 bg-white display" id="productosTable" style="width:100%">
            <thead class="bg-light">
              <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Sector</th>
                <th>Marca</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Fecha de Vencimiento</th>
              </tr>
            </thead>
            <tbody>
              <!-- DataTables llenará esto automáticamente -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script>
  // Variables globales
  let productosTemp = [];
  // Obtener fecha actual en formato YYYY-MM-DD sin problemas de zona horaria
  const now = new Date();
  const fechaActual = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;

  // Función para cargar los productos registrados con DataTable
  async function cargarProductos() {
    try {
      const response = await fetch("/productos/api/productos");
      const data = await response.json();

      if (data.success && Array.isArray(data.data) && data.data.length > 0) {
        $('#productosTable').DataTable({
          paging: true,
          searching: true,
          ordering: true,
          pageLength: 10,
          lengthMenu: [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
          language: {
            "decimal": "",
            "emptyTable": "No hay productos registrados",
            "info": "Mostrando _START_ a _END_ de _TOTAL_ productos",
            "infoEmpty": "Mostrando 0 a 0 de 0 productos",
            "infoFiltered": "(filtrado de _MAX_ productos totales)",
            "infoPostFix": "",
            "thousands": ",",
            "lengthMenu": "Mostrar _MENU_ productos",
            "loadingRecords": "Cargando...",
            "processing": "Procesando...",
            "search": "Buscar:",
            "zeroRecords": "No se encontraron productos coincidentes",
            "paginate": {
              "first": "Primero",
              "last": "Último",
              "next": "Siguiente",
              "previous": "Anterior"
            },
            "aria": {
              "sortAscending": ": activar para ordenar columna ascendente",
              "sortDescending": ": activar para ordenar columna descendente"
            }
          },
          data: data.data,
          columns: [
            { data: 'Cod_Producto', defaultContent: "Sin código" },
            { data: 'Nombre', defaultContent: "Desconocido" },
            { data: 'Sector', defaultContent: "No asignado" },
            { data: 'Marca', defaultContent: "No especificada" },
            { data: 'Cantidad', defaultContent: 0 },
            {
              data: 'Precio_Compra',
              render: function (data) {
                return data ? parseFloat(data).toFixed(2) : "0.00";
              }
            },
            {
              data: 'FechaVencimiento',
              render: function (data) {
                if (!data) return "N/A";
                const fecha = new Date(data);
                return `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear().toString().slice(-2)}`;
              }
            }
          ],
          destroy: true
        });
      } else {
        $('#productosTable').DataTable({
          data: [],
          language: {
            "emptyTable": "No hay productos registrados",
            "info": "Mostrando 0 a 0 de 0 productos",
            "infoEmpty": "No hay productos registrados",
            "infoFiltered": "(filtrado de _MAX_ productos totales)",
            "search": "Buscar:",
            "zeroRecords": "No se encontraron productos coincidentes"
          }
        });
      }
    } catch (error) {
      console.error("Error al cargar productos:", error);
      $('#productosTable').DataTable({
        data: [],
        language: {
          "emptyTable": "Error al cargar los productos",
          "info": "Mostrando 0 a 0 de 0 productos",
          "infoEmpty": "Error al cargar los productos",
          "infoFiltered": "(filtrado de _MAX_ productos totales)",
          "search": "Buscar:",
          "zeroRecords": "Error al cargar los productos"
        }
      });
    }
  }

  // Función para cargar proveedores activos por sector
  async function cargarProveedores() {
    const sector = this.value;
    const selectProveedor = document.getElementById('codigo_proveedor');

    try {
      selectProveedor.innerHTML = '<option value="" disabled selected>Cargando proveedores...</option>';

      const response = await fetch(`/productos/api/proveedores?sector=${encodeURIComponent(sector)}`);
      const data = await response.json();

      if (data.success) {
        selectProveedor.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';

        data.data.forEach(proveedor => {
          const option = document.createElement('option');
          option.value = proveedor.codigo_proveedor;
          option.textContent = `${proveedor.codigo_proveedor} - ${proveedor.nombre}`;
          selectProveedor.appendChild(option);
        });

        selectProveedor.disabled = false;
      } else {
        throw new Error(data.message || 'Error al cargar proveedores');
      }
    } catch (error) {
      console.error('Error al cargar proveedores:', error);
      selectProveedor.innerHTML = '<option value="" disabled selected>Error al cargar proveedores</option>';
      Swal.fire('Error', 'No se pudieron cargar los proveedores', 'error');
    }
  }

  // Función para alternar el campo de fecha de vencimiento
  function toggleFechaVencimiento() {
    const fechaVencimientoInput = document.getElementById("fecha_vencimiento");
    fechaVencimientoInput.disabled = !this.checked;
    if (!this.checked) fechaVencimientoInput.value = "";
  }

  // Función para cargar proveedores activos
  async function cargarProveedoresActivos() {
    try {
      const response = await fetch('/proveedores/api/proveedores-activos');
      const data = await response.json();

      if (data.success) {
        const selectProveedor = document.getElementById('codigo_proveedor');
        selectProveedor.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';

        data.data.forEach(proveedor => {
          const option = document.createElement('option');
          option.value = proveedor.codigo_proveedor;
          option.textContent = `${proveedor.codigo_proveedor} - ${proveedor.nombre}`;
          selectProveedor.appendChild(option);
        });

        // Habilitar el select después de cargar los datos
        selectProveedor.disabled = false;
      }
    } catch (error) {
      console.error('Error al cargar proveedores activos:', error);
    }
  }

  // Función para cargar el select de productos a modificar
  async function cargarSelectProductos() {
    try {
      const response = await fetch('/productos/api/productos');
      const data = await response.json();
      const select = document.getElementById('select_producto_modificar');

      if (!select) {
        console.error('Elemento select no encontrado');
        return;
      }

      if (data.success) {
        // Limpiar opciones excepto la primera
        while (select.options.length > 1) {
          select.remove(1);
        }

        // Agregar opciones
        data.data.forEach(producto => {
          const option = document.createElement('option');
          option.value = producto.Cod_Producto;
          option.textContent = `${producto.Cod_Producto} - ${producto.Nombre} (${producto.Marca})`;
          select.appendChild(option);
        });
      }
    } catch (error) {
      console.error('Error al cargar productos:', error);
      Swal.fire('Error', 'No se pudieron cargar los productos para modificación', 'error');
    }
  }

  // Función auxiliar para formatear fechas
  function formatDateForInput(dateString) {
    if (!dateString) return '';

    // Crear fecha sin ajustar zona horaria (asume formato YYYY-MM-DD)
    const [year, month, day] = dateString.split('T')[0].split('-');
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }

  // Función para cargar datos del producto seleccionado
  async function cargarDatosProducto(codigoProducto) {
    // Obtener elementos de forma segura
    const getElement = (id) => document.getElementById(id) || console.error(`Elemento no encontrado: ${id}`);

    const elements = {
      codigo_producto: getElement('codigo_producto'),
      nombre: getElement('nombre'),
      sector: getElement('sector'),
      codigo_proveedor: getElement('codigo_proveedor'),
      precio_compra: getElement('precio_compra'),
      cantidad: getElement('cantidad'),
      marca: getElement('marca'),
      fecha_entrada: getElement('fecha_entrada'),
      check_vencimiento: getElement('check_vencimiento'),
      fecha_vencimiento: getElement('fecha_vencimiento'),
      modificarButton: getElement('modificarProductoButton'),
      agregarButton: getElement('agregarProducto'),
      guardarButton: getElement('guardarProductos')
    };

    // Verificar que los elementos esenciales existan
    if (!elements.codigo_producto || !elements.modificarButton || !elements.agregarButton) {
      console.error('Elementos críticos no encontrados');
      return;
    }

    if (!codigoProducto) {
      elements.modificarButton.disabled = true;
      return;
    }

    try {
      const response = await fetch(`/productos/api/productos/${codigoProducto}`);

      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }

      const data = await response.json();

      if (data.success && data.data) {
        const producto = data.data;

        // Llenar los campos del formulario
        elements.codigo_producto.value = producto.Cod_Producto || '';
        elements.nombre.value = producto.Nombre || '';
        elements.marca.value = producto.Marca || '';
        elements.sector.value = producto.Sector || '';
        elements.codigo_proveedor.value = producto.Cod_Proveedor || '';
        elements.precio_compra.value = producto.Precio_Compra || '';

        // Guardar el valor original de la cantidad para comparación posterior
        elements.cantidad.value = producto.Cantidad || '';
        elements.cantidad.dataset.originalValue = producto.Cantidad || '';

        // Mostrar la fecha de entrada actual
        elements.fecha_entrada.value = formatDateForInput(producto.Fecha_Entrada) || fechaActual;

        // Manejar fecha de vencimiento
        if (producto.FechaVencimiento) {
          elements.check_vencimiento.checked = true;
          elements.fecha_vencimiento.disabled = false;
          elements.fecha_vencimiento.value = formatDateForInput(producto.FechaVencimiento);
        } else {
          elements.check_vencimiento.checked = false;
          elements.fecha_vencimiento.disabled = true;
          elements.fecha_vencimiento.value = '';
        }

        // Bloquear campos (solo permitir editar precio y cantidad)
        elements.codigo_producto.readOnly = true;
        elements.nombre.readOnly = true;
        elements.marca.readOnly = true;
        elements.sector.disabled = true;
        elements.codigo_proveedor.disabled = true;
        elements.fecha_entrada.readOnly = true;
        elements.check_vencimiento.disabled = true;
        elements.fecha_vencimiento.disabled = true;

        // Habilitar solo precio y cantidad
        elements.precio_compra.readOnly = false;
        elements.cantidad.readOnly = false;

        // Cambiar visibilidad de botones (de forma segura)
        if (elements.agregarButton) elements.agregarButton.style.display = 'none';
        if (elements.guardarButton) elements.guardarButton.style.display = 'none';
        if (elements.modificarButton) {
          elements.modificarButton.disabled = false;
          elements.modificarButton.style.display = 'block';
        }
      }
    } catch (error) {
      console.error('Error al cargar datos del producto:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se pudieron cargar los datos del producto'
      });
    }
  }

  // Función para modificar el producto
  async function modificarProducto() {
    const codigoProducto = document.getElementById('select_producto_modificar').value;

    if (!codigoProducto) {
      Swal.fire('Error', 'Debe seleccionar un producto', 'error');
      return;
    }

    // Obtener los valores editables
    const precio_compra = parseFloat(document.getElementById('precio_compra').value);
    const cantidad = parseInt(document.getElementById('cantidad').value);
    const cantidadOriginal = parseInt(document.getElementById('cantidad').dataset.originalValue) || cantidad;

    // Determinar si la cantidad ha cambiado
    const cantidadModificada = cantidad !== cantidadOriginal;

    // Validaciones básicas
    if (isNaN(precio_compra)) {
      Swal.fire('Error', 'El precio debe ser un número válido', 'error');
      return;
    }

    if (isNaN(cantidad)) {
      Swal.fire('Error', 'La cantidad debe ser un número válido', 'error');
      return;
    }

    Swal.fire({
      title: '¿Confirmar modificación?',
      text: `¿Desea actualizar el precio a ${precio_compra.toFixed(2)} y la cantidad a ${cantidad}?${cantidadModificada ? '\nLa fecha de entrada se actualizará a hoy.' : ''}`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, modificar',
      cancelButtonText: 'Cancelar'
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/productos/api/productos/${codigoProducto}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              precio_compra: precio_compra,
              cantidad: cantidad,
              actualizar_fecha: cantidadModificada // Enviamos este flag al backend
            })
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire('Éxito', 'Producto modificado correctamente', 'success')
              .then(() => {
                cargarSelectProductos();
                cargarProductos();
                limpiarFormularioProducto();
              });
          } else {
            Swal.fire('Error', result.message || 'No se pudo modificar el producto', 'error');
          }
        } catch (error) {
          console.error('Error al modificar producto:', error);
          Swal.fire('Error', 'Error al conectar con el servidor', 'error');
        }
      }
    });
  }


  function limpiarFormularioProducto() {
    // 1. Limpiar el formulario principal
    const form = document.getElementById('form-producto');
    if (form) form.reset();

    // 2. Restablecer valores especiales
    const fechaEntrada = document.getElementById('fecha_entrada');
    if (fechaEntrada) fechaEntrada.value = new Date().toISOString().split('T')[0];

    // 3. Restablecer estado de los campos
    const campos = ['codigo_producto', 'nombre', 'marca', 'precio_compra', 'cantidad'];
    campos.forEach(id => {
      const campo = document.getElementById(id);
      if (campo) campo.readOnly = false;
    });

    const sector = document.getElementById('sector');
    if (sector) {
      sector.disabled = false;
      sector.value = '';
    }

    const codigoProveedor = document.getElementById('codigo_proveedor');
    if (codigoProveedor) {
      codigoProveedor.disabled = true;
      codigoProveedor.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';
    }

    const checkVencimiento = document.getElementById('check_vencimiento');
    if (checkVencimiento) {
      checkVencimiento.checked = false;
      checkVencimiento.disabled = false;
    }

    const fechaVencimiento = document.getElementById('fecha_vencimiento');
    if (fechaVencimiento) {
      fechaVencimiento.value = '';
      fechaVencimiento.disabled = true;
    }

    // 4. Manejar el select de modificación
    const selectModificar = document.getElementById('select_producto_modificar');
    if (selectModificar) {
      selectModificar.value = '';
    }

    // 5. Manejar los botones
    const modificarBtn = document.getElementById('modificarProductoButton');
    if (modificarBtn) {
      modificarBtn.disabled = true;
      modificarBtn.style.display = 'none';
    }

    const agregarBtn = document.getElementById('agregarProducto');
    if (agregarBtn) {
      agregarBtn.style.display = 'block';
    }

    const guardarBtn = document.getElementById('guardarProductos');
    if (guardarBtn) {
      guardarBtn.style.display = 'block';
    }
  }

  // Función para agregar producto a la lista temporal
  function agregarProductoTemporal() {
    const form = document.getElementById('form-producto');
    const codigoProducto = form.codigo_producto.value;
    const nombre = form.nombre.value;
    const marca = form.marca.value;
    const fechaVencimiento = document.getElementById('check_vencimiento').checked ? form.fecha_vencimiento.value : null;
    const sector = form.sector.value;
    const codigoProveedor = form.codigo_proveedor.value;
    const precioCompra = parseFloat(form.precio_compra.value);
    const cantidad = parseInt(form.cantidad.value);
    const fechaEntrada = form.fecha_entrada.value;

    // Validación de campos obligatorios
    if (!codigoProducto || !nombre || !marca || !sector || !codigoProveedor || isNaN(precioCompra) || isNaN(cantidad)) {
      Swal.fire({
        icon: 'warning',
        title: 'Campos incompletos',
        text: 'Por favor, complete todos los campos obligatorios antes de agregar.'
      });
      return;
    }

    // Crear objeto producto
    const producto = {
      codigo_producto: codigoProducto,
      nombre: nombre,
      marca: marca,
      fecha_vencimiento: fechaVencimiento,
      sector: sector,
      codigo_proveedor: codigoProveedor,
      precio_compra: precioCompra,
      cantidad: cantidad,
      fecha_entrada: fechaEntrada
    };

    // Agregar a la lista temporal
    productosTemp.push(producto);

    // Actualizar tabla temporal
    actualizarTablaTemporal();

    // Limpiar formulario (excepto sector y proveedor)
    form.codigo_producto.value = '';
    form.nombre.value = '';
    form.marca.value = '';
    form.precio_compra.value = '';
    form.cantidad.value = '';
    document.getElementById('check_vencimiento').checked = false;
    document.getElementById('fecha_vencimiento').value = '';
    document.getElementById('fecha_vencimiento').disabled = true;
  }

  // Función para actualizar la tabla temporal
  function actualizarTablaTemporal() {
    const tbody = document.getElementById('tablaProductosTemp');
    tbody.innerHTML = '';

    productosTemp.forEach((producto, index) => {
      const tr = document.createElement('tr');

      // Formatear fecha de vencimiento para mostrar
      let fechaVencimiento = "N/A";
      if (producto.fecha_vencimiento) {
        const fecha = new Date(producto.fecha_vencimiento);
        fechaVencimiento = `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear().toString().slice(-2)}`;
      }

      tr.innerHTML = `
          <td>${producto.codigo_producto}</td>
          <td>${producto.nombre}</td>
          <td>${producto.sector}</td>
          <td>${producto.marca}</td>
          <td>${producto.cantidad}</td>
          <td>${producto.precio_compra.toFixed(2)}</td>
          <td>${fechaVencimiento}</td>
          <td><button class="btn btn-danger btn-sm eliminar-producto" data-index="${index}">❌ Eliminar</button></td>
        `;

      tbody.appendChild(tr);
    });

    // Agregar eventos a los botones de eliminar
    document.querySelectorAll('.eliminar-producto').forEach(button => {
      button.addEventListener('click', function () {
        const index = parseInt(this.getAttribute('data-index'));
        eliminarProductoTemporal(index);
      });
    });
  }

  // Función para eliminar producto de la lista temporal
  function eliminarProductoTemporal(index) {
    Swal.fire({
      title: '¿Está seguro?',
      text: "Este producto será eliminado de la lista temporal.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, eliminar'
    }).then((result) => {
      if (result.isConfirmed) {
        productosTemp.splice(index, 1);
        actualizarTablaTemporal();
        Swal.fire({
          icon: 'success',
          title: 'Eliminado',
          text: 'El producto ha sido eliminado de la lista temporal.'
        });
      }
    });
  }

  // Función para guardar productos
  async function guardarProductos() {
    if (productosTemp.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'Lista vacía',
        text: 'No hay productos para guardar.'
      });
      return;
    }

    Swal.fire({
      title: "¿Confirmar registro?",
      text: `¿Está seguro que desea registrar ${productosTemp.length} producto(s)?`,
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Sí, registrar",
      cancelButtonText: "Cancelar"
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch('http://localhost:4000/productos/api/productos', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              productos: productosTemp
            })
          });

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Productos registrados",
              text: `Se han registrado ${productosTemp.length} producto(s) exitosamente.`,
              showConfirmButton: true
            }).then(() => {
              // Limpiar todo después de guardar
              productosTemp = [];
              document.getElementById('tablaProductosTemp').innerHTML = '';
              document.getElementById('form-producto').reset();
              document.getElementById('fecha_entrada').value = new Date().toISOString().split('T')[0];

              // REACTIVAR EL SELECTOR DE SECTOR
              document.getElementById('sector').disabled = false;

              // Recargar la tabla de productos registrados
              cargarProductos();
            });
          } else {
            Swal.fire("Error", data.message || "No se pudieron registrar los productos.", "error");
          }
        } catch (error) {
          console.error("Error al guardar productos:", error);
          Swal.fire("Error", "Hubo un problema al registrar los productos.", "error");
        }
      }
    });
  }

  // Inicialización al cargar la página
  document.addEventListener("DOMContentLoaded", function () {
    document.getElementById('fecha_entrada').value = fechaActual;
    document.getElementById('sector').addEventListener('change', cargarProveedores);
    document.getElementById('check_vencimiento').addEventListener('change', toggleFechaVencimiento);
    document.getElementById('agregarProducto').addEventListener('click', agregarProductoTemporal);
    document.getElementById('guardarProductos').addEventListener('click', guardarProductos);

    // Inicializar DataTable
    cargarProductos();
    cargarSelectProductos();

    // Configuración inicial de botones de modificación
    document.getElementById('modificarProductoButton').style.display = 'none';
  });

  document.querySelector('button[type="reset"]').addEventListener('click', function (e) {
    e.preventDefault(); // Prevenir el comportamiento por defecto
    limpiarFormularioProducto();
    // También limpia la lista temporal si es necesario
    productosTemp = [];
    document.getElementById('tablaProductosTemp').innerHTML = '';
  });
</script>