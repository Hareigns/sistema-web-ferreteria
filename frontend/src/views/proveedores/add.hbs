<title>Registro</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/styles/Proveedores.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <div class="card shadow-lg p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Proveedores</h3>
          <form action="/proveedores/add" method="post" id="proveedorForm">
            <div class="row g-3">
              <div class="col-md-6">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" id="nombre" name="nombre" class="form-control" 
                       pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}" 
                       title="Solo letras (mínimo 3 caracteres)" required>
              </div>
              <div class="col-md-6">
                <label for="apellido" class="form-label">Apellido</label>
                <input type="text" id="apellido" name="apellido" class="form-control" 
                       pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}" 
                       title="Solo letras (mínimo 3 caracteres)" required>
              </div>
              <div class="col-md-6">
                <label for="telefono" class="form-label">Teléfono</label>
                <input type="tel" id="telefono" name="telefono" class="form-control" required>
              </div>
              <div class="col-md-6">
                <label for="compania" class="form-label">Compañía</label>
                <select id="compania" name="compania" class="form-select" required>
                  <option value="" selected disabled>Seleccione una compañía</option>
                  <option value="Tigo">Tigo</option>
                  <option value="Claro">Claro</option>
                </select>
              </div>
              <div class="col-md-6">
                <label for="sector" class="form-label">Sector</label>
                <select id="sector" name="sector" class="form-select" required>
                  <option value="" disabled selected>Seleccione un sector</option>
                  <option value="Herramientas manuales">Herramientas manuales</option>
                  <option value="Herramientas eléctricas">Herramientas eléctricas</option>
                  <option value="Materiales de construcción">Materiales de construcción</option>
                  <option value="Pinturas o accesorios">Pinturas o accesorios</option>
                  <option value="Tuberías y plomería">Tuberías y plomería</option>
                  <option value="Electricidad e iluminación">Electricidad e iluminación</option>
                  <option value="Seguridad industrial">Seguridad industrial</option>
                  <option value="Productos de ferretería general">Productos de ferretería general</option>
                </select>
              </div>
              <div id="estado-container" class="col-md-6">
                <label for="estado" class="form-label">Estado</label>
                <select id="estado" name="estado" class="form-select" required>
                  <option value="Activo">Activo</option>
                  <option value="Inactivo">Inactivo</option>
                </select>
              </div>
              <div class="col-12 d-flex justify-content-between mt-3">
                <button class="btn btn-primary" type="submit" id="ingresarButton">Ingresar</button>
                <button class="btn btn-secondary" type="button" onclick="limpiarFormulario()">Limpiar</button>
              </div>
              <div class="card-body">
                <h5 class="text-center mb-3">Modificar Proveedor</h5>
                <select id="codigo_proveedor" class="form-select" id="codigo_proveedor"
                  onchange="cargarDatosProveedor(this.value)">
                  <option value="" disabled selected>Seleccione un proveedor</option>
                  <!-- Las opciones se llenarán con JavaScript -->
                </select>
                <button class="btn btn-success" type="button" id="modificarButton" onclick="modificarProveedor()"
                  disabled>Modificar</button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="card mb-4" style="border: 1px solid #ddd;">
  <div class="card-body text-center">
    <h3 class="mb-0" style="font-weight: bold; color: #333;">Lista de Proveedores</h3>
    <div class="card p-4 table-responsive">
      <div class="card-body">
        <table class="table align-middle mb-0 bg-white display" id="proveedoresTable" style="width:100%">
          <thead class="bg-light">
            <tr>
              <th>Código</th>
              <th>Nombre</th>
              <th>Apellido</th>
              <th>Teléfono</th>
              <th>Compañía</th>
              <th>Sector</th>
              <th>Estado</th>
            </tr>
          </thead>
          <tbody>
            <!-- Los datos se cargarán dinámicamente -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  let proveedoresTable;

  // Función para validar nombre y apellido
  function validarNombreApellido(valor) {
    // Permite letras, espacios y acentos (mínimo 3 caracteres)
    return /^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}$/.test(valor);
  }

  // Validación en tiempo real para nombre y apellido
  document.getElementById('nombre').addEventListener('input', function(e) {
    const value = e.target.value;
    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/.test(value)) {
      e.target.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, '');
    }
  });

  document.getElementById('apellido').addEventListener('input', function(e) {
    const value = e.target.value;
    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/.test(value)) {
      e.target.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, '');
    }
  });

  // Función para cargar proveedores en el select y la tabla
  async function cargarProveedores() {
    try {
      const response = await fetch('/proveedores/api/proveedores');
      const data = await response.json();

      if (data.success) {
        const select = document.getElementById('codigo_proveedor');
        select.innerHTML = '<option value="" disabled selected>Seleccione un proveedor</option>';

        // Ordenar los proveedores por Cod_Proveedor (ascendente)
        const proveedoresOrdenados = [...data.data].sort((a, b) => a.Cod_Proveedor - b.Cod_Proveedor);

        // Llenar el select con proveedores ordenados
        proveedoresOrdenados.forEach(proveedor => {
          const option = document.createElement('option');
          option.value = proveedor.Cod_Proveedor;
          option.textContent = `${proveedor.Cod_Proveedor} - ${proveedor.Nombre} ${proveedor.Apellido}`;
          select.appendChild(option);
        });

        // Llenar DataTable con proveedores ordenados
        if (proveedoresTable) {
          proveedoresTable.clear();
          proveedoresTable.rows.add(proveedoresOrdenados).draw();
        } else {
          inicializarDataTable(proveedoresOrdenados);
        }
      }
    } catch (error) {
      console.error('Error al cargar proveedores:', error);
      Swal.fire('Error', 'No se pudieron cargar los proveedores', 'error');
    }
  }

  function inicializarDataTable(data) {
    proveedoresTable = $('#proveedoresTable').DataTable({
      paging: true,
      searching: true,
      ordering: true,
      pageLength: 10,
      lengthMenu: [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
      language: {
        "decimal": "",
        "emptyTable": "No hay proveedores registrados",
        "info": "Mostrando _START_ a _END_ de _TOTAL_ proveedores",
        "infoEmpty": "Mostrando 0 a 0 de 0 proveedores",
        "infoFiltered": "(filtrado de _MAX_ proveedores totales)",
        "infoPostFix": "",
        "thousands": ",",
        "lengthMenu": "Mostrar _MENU_ proveedores",
        "loadingRecords": "Cargando...",
        "processing": "Procesando...",
        "search": "Buscar:",
        "zeroRecords": "No se encontraron proveedores coincidentes",
        "paginate": {
          "first": "Primero",
          "last": "Último",
          "next": "Siguiente",
          "previous": "Anterior"
        },
        "aria": {
          "sortAscending": ": activar para ordenar columna ascendente",
          "sortDescending": ": activar para ordenar columna descendente"
        }
      },
      data: data,
      columns: [
        { data: 'Cod_Proveedor' },
        { data: 'Nombre' },
        { data: 'Apellido' },
        { data: 'Telefono' },
        { data: 'Compania' },
        { data: 'Sector' },
        { 
          data: 'Estado',
          render: function(data, type, row) {
            return `<span class="badge ${data === 'Activo' ? 'bg-success' : 'bg-danger'}">${data}</span>`;
          }
        }
      ]
    });
  }

  // Función para cargar datos del proveedor seleccionado
  async function cargarDatosProveedor(codProveedor) {
    try {
      const response = await fetch(`/proveedores/api/proveedores/${codProveedor}`);
      const data = await response.json();

      if (data.success) {
        // Mostrar campo de estado
        document.getElementById('estado-container').classList.add('visible');

        // Cargar datos en el formulario
        document.getElementById('nombre').value = data.data.Nombre;
        document.getElementById('apellido').value = data.data.Apellido;
        document.getElementById('telefono').value = data.data.Telefono;
        document.getElementById('compania').value = data.data.Compania;
        document.getElementById('sector').value = data.data.Sector;
        document.getElementById('estado').value = data.data.Estado;

        // Habilitar solo Teléfono, Compañía y Estado
        document.getElementById('nombre').disabled = true;
        document.getElementById('apellido').disabled = true;
        document.getElementById('sector').disabled = true;

        document.getElementById('telefono').disabled = false;
        document.getElementById('compania').disabled = false;
        document.getElementById('estado').disabled = false;

        // Activar botón de modificar
        document.getElementById('modificarButton').disabled = false;
        document.getElementById('ingresarButton').disabled = true;
      }
    } catch (error) {
      console.error('Error al cargar proveedor:', error);
      Swal.fire('Error', 'No se pudieron cargar los datos del proveedor', 'error');
    }
  }

  // Función para limpiar el formulario
  function limpiarFormulario() {
    document.getElementById('proveedorForm').reset();
    document.getElementById('codigo_proveedor').value = '';

    // Ocultar campo de estado
    document.getElementById('estado-container').classList.remove('visible');

    // Reactivar todos los campos
    document.getElementById('nombre').disabled = false;
    document.getElementById('apellido').disabled = false;
    document.getElementById('sector').disabled = false;
    document.getElementById('telefono').disabled = false;
    document.getElementById('compania').disabled = false;
    document.getElementById('estado').disabled = false;

    // Desactivar botón de modificar
    document.getElementById('modificarButton').disabled = true;
    document.getElementById('ingresarButton').disabled = false;
  }

  // Función para verificar teléfono existente
  async function verificarTelefonoExistente(telefono, codProveedor = null) {
    try {
      // Validación básica del teléfono primero
      if (!telefono || !/^\d{8}$/.test(telefono)) {
        await Swal.fire({
          title: 'Teléfono inválido',
          text: 'El teléfono debe tener 8 dígitos',
          icon: 'error'
        });
        return true; // Consideramos que existe para bloquear el envío
      }

      let url = `/proveedores/api/telefono/existe/${telefono}`;
      if (codProveedor) {
        url += `?excluirProveedor=${codProveedor}`;
      }

      // Agregar timeout para evitar que se quede pegado
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 segundos timeout

      const response = await fetch(url, {
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.message || 'Error en la verificación');
      }

      if (data.existe) {
        await Swal.fire({
          title: 'Teléfono registrado',
          text: 'Este número ya está en uso por otro proveedor/empleado',
          icon: 'warning',
          confirmButtonText: 'Entendido'
        });
        return true;
      }
      return false;

    } catch (error) {
      console.error('Error verificando teléfono:', error);

      // Mostrar error diferente si fue por timeout
      if (error.name === 'AbortError') {
        await Swal.fire({
          title: 'Tiempo de espera agotado',
          text: 'La verificación de teléfono tardó demasiado',
          icon: 'error'
        });
      } else {
        await Swal.fire({
          title: 'Error de verificación',
          text: error.message || 'No se pudo verificar el teléfono',
          icon: 'error'
        });
      }
      return true; // Bloquear en caso de error
    }
  }

  // Función para manejar el envío del formulario (POST)
  document.getElementById('proveedorForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const submitBtn = document.getElementById('ingresarButton');
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Procesando...';

    try {
      const nombre = document.getElementById('nombre').value.trim();
      const apellido = document.getElementById('apellido').value.trim();
      
      // Validación de nombre y apellido
      if (!validarNombreApellido(nombre)) {
        await Swal.fire("Error", "El nombre debe contener solo letras y tener al menos 3 caracteres", "error");
        return;
      }
      
      if (!validarNombreApellido(apellido)) {
        await Swal.fire("Error", "El apellido debe contener solo letras y tener al menos 3 caracteres", "error");
        return;
      }

      const formData = {
        nombre,
        apellido,
        telefono: document.getElementById('telefono').value.trim(),
        compania: document.getElementById('compania').value,
        sector: document.getElementById('sector').value,
        estado: document.getElementById('estado').value
      };

      // Validaciones básicas
      if (!formData.nombre || !formData.apellido || !formData.telefono ||
        !formData.compania || !formData.sector || !formData.estado) {
        await Swal.fire('Error', 'Todos los campos son requeridos', 'error');
        return;
      }

      // Verificar teléfono
      const telefonoExiste = await verificarTelefonoExistente(formData.telefono);
      if (telefonoExiste) return;

      // Enviar datos al servidor
      const response = await fetch('/proveedores/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const result = await response.json();

      if (result.success) {
        await Swal.fire('Éxito', 'Proveedor registrado correctamente', 'success');
        cargarProveedores(); // Actualizar la lista
        limpiarFormulario(); // Limpiar el formulario
      } else {
        await Swal.fire('Error', result.errors?.join(', ') || 'Error al registrar', 'error');
      }
    } catch (error) {
      console.error('Error en submit:', error);
      await Swal.fire('Error', 'Ocurrió un error inesperado', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Ingresar';
    }
  });

  // Función para modificar proveedor (PUT)
  async function modificarProveedor() {
    const codProveedor = document.getElementById('codigo_proveedor').value;
    if (!codProveedor) {
      Swal.fire('Error', 'Debe seleccionar un proveedor', 'error');
      return;
    }

    const nombre = document.getElementById('nombre').value.trim();
    const apellido = document.getElementById('apellido').value.trim();
    
    // Validación de nombre y apellido (aunque estén deshabilitados, por seguridad)
    if (!validarNombreApellido(nombre)) {
      await Swal.fire("Error", "El nombre no es válido", "error");
      return;
    }
    
    if (!validarNombreApellido(apellido)) {
      await Swal.fire("Error", "El apellido no es válido", "error");
      return;
    }

    const formData = {
      nombre,
      apellido,
      telefono: document.getElementById('telefono').value.trim(),
      compania: document.getElementById('compania').value,
      sector: document.getElementById('sector').value,
      estado: document.getElementById('estado').value
    };

    // Validaciones
    if (!formData.nombre || !formData.apellido || !formData.telefono ||
      !formData.compania || !formData.sector || !formData.estado) {
      Swal.fire('Advertencia', 'Todos los campos son obligatorios', 'warning');
      return;
    }

    if (await verificarTelefonoExistente(formData.telefono, codProveedor)) {
      return;
    }

    const confirmacion = await Swal.fire({
      title: '¿Actualizar proveedor?',
      text: `¿Desea actualizar a ${formData.nombre} ${formData.apellido}?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sí, actualizar',
      cancelButtonText: 'Cancelar'
    });

    if (!confirmacion.isConfirmed) return;

    try {
      const response = await fetch(`/proveedores/api/proveedores/${codProveedor}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const result = await response.json();

      if (result.success) {
        await Swal.fire('Éxito', 'Proveedor actualizado correctamente', 'success');
        cargarProveedores();
        limpiarFormulario();
      } else {
        Swal.fire('Error', result.errors?.join(', ') || 'Error al actualizar', 'error');
      }
    } catch (error) {
      console.error('Error al actualizar:', error);
      Swal.fire('Error', 'Error al comunicarse con el servidor', 'error');
    }
  }

  // Cargar proveedores al iniciar la página
  document.addEventListener('DOMContentLoaded', () => {
    cargarProveedores();
  });
</script>