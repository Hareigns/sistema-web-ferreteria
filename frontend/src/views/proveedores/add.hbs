<title>Registro de Proveedores</title>
<link rel="stylesheet" href="/styles/proveedores.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<nav class="navbar navbar-expand-lg navbar-dark">
  <div class="container">
    <a class="navbar-brand" href="#">
      <i class="fas fa-truck me-2"></i>Gestor de Proveedores
    </a>
  </div>
</nav>

<div class="container mt-4">
  <!-- Pestañas -->
  <ul class="nav nav-tabs" id="supplierTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="list-tab" data-bs-toggle="tab" data-bs-target="#list" type="button" role="tab"
        aria-controls="list" aria-selected="true">
        <i class="fas fa-list me-2"></i>Lista de Proveedores
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="register-tab" data-bs-toggle="tab" data-bs-target="#register" type="button"
        role="tab" aria-controls="register" aria-selected="false">
        <i class="fas fa-user-plus me-2"></i>Registrar Proveedores
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="modify-tab" data-bs-toggle="tab" data-bs-target="#modify" type="button" role="tab"
        aria-controls="modify" aria-selected="false">
        <i class="fas fa-user-edit me-2"></i>Actualizar Proveedores
      </button>
    </li>
  </ul>

  <!-- Contenido de las pestañas -->
  <div class="tab-content" id="supplierTabsContent">
    <!-- Pestaña de Lista de Proveedores -->
    <div class="tab-pane fade show active" id="list" role="tabpanel" aria-labelledby="list-tab">
      <div class="card">
        <div class="card-header">
          <h3 class="text-center mb-0"><i class="fas fa-list me-2"></i>Lista de Proveedores</h3>
        </div>
        <div class="card-body p-4">
          <div class="table-responsive">
            <table class="table table-hover align-middle mb-0 display" id="proveedoresTable" style="width:100%">
              <thead>
                <tr>
                  <th><i class="fas fa-id-card me-1"></i> Código</th>
                  <th><i class="fas fa-user me-1"></i> Nombre</th>
                  <th><i class="fas fa-user-tag me-1"></i> Apellido</th>
                  <th><i class="fas fa-phone-alt me-1"></i> Teléfono</th>
                  <th><i class="fas fa-mobile-alt me-1"></i> Compañía</th>
                  <th><i class="fas fa-industry me-1"></i> Sector</th>
                  <th><i class="fas fa-circle me-1"></i> Estado</th>
                </tr>
              </thead>
              <tbody>
                <!-- Los datos se cargarán dinámicamente -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Pestaña de Registro -->
    <div class="tab-pane fade" id="register" role="tabpanel" aria-labelledby="register-tab">
      <div class="card">
        <div class="card-header">
          <h3 class="text-center mb-0"><i class="fas fa-user-plus me-2"></i>Registro de Proveedores</h3>
        </div>
        <div class="card-body p-4">
          <form id="proveedorForm">
            <div class="row g-3">
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="nombre">Nombre</label>
                  <input type="text" id="nombre" name="nombre" class="form-control"
                    pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}" title="Solo letras (mínimo 3 caracteres)" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="apellido">Apellido</label>
                  <input type="text" id="apellido" name="apellido" class="form-control"
                    pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}" title="Solo letras (mínimo 3 caracteres)" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="telefono">Teléfono</label>
                  <input type="tel" id="telefono" name="telefono" class="form-control" pattern="[0-9]{8}"
                    title="Debe contener 8 dígitos" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="compania">Compañía</label>
                  <select id="compania" name="compania" class="form-select" required>
                    <option value="" selected disabled>Seleccione una compañía</option>
                    <option value="Tigo">Tigo</option>
                    <option value="Claro">Claro</option>
                  </select>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="sector">Sector</label>
                  <select id="sector" name="sector" class="form-select" required>
                    <option value="" disabled selected>Seleccione un sector</option>
                    <option value="Herramientas manuales">Herramientas manuales</option>
                    <option value="Herramientas eléctricas">Herramientas eléctricas</option>
                    <option value="Materiales de construcción">Materiales de construcción</option>
                    <option value="Pinturas o accesorios">Pinturas o accesorios</option>
                    <option value="Tuberías y plomería">Tuberías y plomería</option>
                    <option value="Electricidad e iluminación">Electricidad e iluminación</option>
                    <option value="Seguridad industrial">Seguridad industrial</option>
                    <option value="Productos de ferretería general">Productos de ferretería general</option>
                  </select>
                </div>
              </div>
              <div class="col-md-6">
                <div class="floating-label">
                  <label for="estado">Estado</label>
                  <select id="estado" name="estado" class="form-select" required>
                    <option value="Activo" selected>Activo</option>
                    <option value="Inactivo">Inactivo</option>
                  </select>
                </div>
              </div>
            </div>

            <div class="action-buttons mt-4">
              <button class="btn btn-primary" type="button" id="ingresarButton">
                <i class="fas fa-user-plus me-2"></i>Ingresar
              </button>
              <button class="btn btn-danger" type="button" onclick="limpiarFormulario()">
                <i class="fas fa-broom me-2"></i>Limpiar
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Pestaña de Modificación -->
    <div class="tab-pane fade" id="modify" role="tabpanel" aria-labelledby="modify-tab">
      <div class="card">
        <div class="card-header">
          <h3 class="text-center mb-0"><i class="fas fa-user-edit me-2"></i>Actualizar Proveedores</h3>
        </div>
        <div class="card-body p-4">
          <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i> Seleccione un proveedor para modificar sus datos.
          </div>

          <div class="row mb-4">
            <div class="col-md-8">
              <div class="floating-label">
                <label for="select_proveedor_modificar">Buscar proveedor a modificar</label>
                <select id="select_proveedor_modificar" class="form-select">
                  <option value="" disabled selected>Seleccione un proveedor...</option>
                  <!-- Los proveedores se cargarán dinámicamente -->
                </select>
              </div>
            </div>
          </div>

          <div id="formulario-modificacion" style="display: none;">
            <form id="modificarProveedorForm">
              <div class="row g-3">
                <div class="col-md-6">
                  <div class="floating-label">
                    <label for="mod_codigo">Código</label>
                    <input type="text" id="mod_codigo" class="form-control" readonly style="background-color: #f8f9fa;">
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="floating-label">
                    <label for="mod_nombre">Nombre</label>
                    <input type="text" id="mod_nombre" class="form-control" readonly style="background-color: #f8f9fa;">
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="floating-label">
                    <label for="mod_apellido">Apellido</label>
                    <input type="text" id="mod_apellido" class="form-control" readonly
                      style="background-color: #f8f9fa;">
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="floating-label">
                    <label for="mod_telefono">Teléfono</label>
                    <input type="tel" id="mod_telefono" class="form-control" pattern="[0-9]{8}"
                      title="Debe contener 8 dígitos" required>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="floating-label">
                    <label for="mod_compania">Compañía</label>
                    <select id="mod_compania" class="form-select" required>
                      <option value="" selected disabled>Seleccione una compañía</option>
                      <option value="Tigo">Tigo</option>
                      <option value="Claro">Claro</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="floating-label">
                    <label for="mod_sector">Sector</label>
                    <select id="mod_sector" class="form-select" disabled style="background-color: #f8f9fa;">
                      <option value="" disabled selected>Seleccione un sector</option>
                      <option value="Herramientas manuales">Herramientas manuales</option>
                      <option value="Herramientas eléctricas">Herramientas eléctricas</option>
                      <option value="Materiales de construcción">Materiales de construcción</option>
                      <option value="Pinturas o accesorios">Pinturas o accesorios</option>
                      <option value="Tuberías y plomería">Tuberías y plomería</option>
                      <option value="Electricidad e iluminación">Electricidad e iluminación</option>
                      <option value="Seguridad industrial">Seguridad industrial</option>
                      <option value="Productos de ferretería general">Productos de ferretería general</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="floating-label">
                    <label for="mod_estado">Estado</label>
                    <select id="mod_estado" class="form-select" required>
                      <option value="Activo">Activo</option>
                      <option value="Inactivo">Inactivo</option>
                    </select>
                  </div>
                </div>
              </div>

              <div class="d-grid gap-2 mt-4">
                <button class="btn btn-success" type="button" id="modificarButton">
                  <i class="fas fa-save me-2"></i>Guardar Cambios
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  let proveedoresTable;

  // Función para validar nombre y apellido
  function validarNombreApellido(valor) {
    return /^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}$/.test(valor);
  }

  // Validación en tiempo real para nombre y apellido
  document.getElementById('nombre').addEventListener('input', function (e) {
    const value = e.target.value;
    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/.test(value)) {
      e.target.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, '');
    }
  });

  document.getElementById('apellido').addEventListener('input', function (e) {
    const value = e.target.value;
    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/.test(value)) {
      e.target.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, '');
    }
  });

  // Función para cargar proveedores en el select y la tabla
  async function cargarProveedores() {
    try {
      const response = await fetch('/proveedores/api/proveedores');
      const data = await response.json();

      if (data.success) {
        // Cargar en el select de modificación (CORREGIDO)
        const selectModificar = document.getElementById('select_proveedor_modificar');
        if (selectModificar) {
          selectModificar.innerHTML = '<option value="" disabled selected>Seleccione un proveedor...</option>';

          // Ordenar los proveedores por cod_proveedor (ascendente)
          const proveedoresOrdenados = [...data.data].sort((a, b) => a.cod_proveedor - b.cod_proveedor);

          // Llenar el select de modificación con proveedores ordenados
          proveedoresOrdenados.forEach(proveedor => {
            const option = document.createElement('option');
            option.value = proveedor.cod_proveedor;
            option.textContent = `${proveedor.cod_proveedor} - ${proveedor.nombre} ${proveedor.apellido}`;
            // Agregar datos adicionales como atributos data
            option.dataset.nombre = proveedor.nombre;
            option.dataset.apellido = proveedor.apellido;
            option.dataset.telefono = proveedor.telefono;
            option.dataset.compania = proveedor.compania;
            option.dataset.sector = proveedor.sector;
            option.dataset.estado = proveedor.estado;
            selectModificar.appendChild(option);
          });

          // Agregar evento para cargar datos cuando se seleccione un proveedor
          selectModificar.addEventListener('change', function () {
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption && selectedOption.value) {
              cargarDatosProveedorModificar(selectedOption.value);
            } else {
              document.getElementById('formulario-modificacion').style.display = 'none';
            }
          });
        }

        // Llenar DataTable con proveedores ordenados
        const proveedoresOrdenados = [...data.data].sort((a, b) => a.cod_proveedor - b.cod_proveedor);
        if (proveedoresTable) {
          proveedoresTable.clear();
          proveedoresTable.rows.add(proveedoresOrdenados).draw();
        } else {
          inicializarDataTable(proveedoresOrdenados);
        }
      }
    } catch (error) {
      console.error('Error al cargar proveedores:', error);
      Swal.fire('Error', 'No se pudieron cargar los proveedores', 'error');
    }
  }

  // Función para cargar datos del proveedor en el formulario de modificación
  function cargarDatosProveedorModificar(codProveedor) {
    const select = document.getElementById('select_proveedor_modificar');
    const selectedOption = select.options[select.selectedIndex];

    if (!selectedOption?.value) {
      document.getElementById('formulario-modificacion').style.display = 'none';
      return;
    }

    try {
      // Mostrar formulario de modificación
      document.getElementById('formulario-modificacion').style.display = 'block';

      // Cargar datos del option seleccionado
      document.getElementById('mod_codigo').value = selectedOption.value;
      document.getElementById('mod_nombre').value = selectedOption.dataset.nombre || '';
      document.getElementById('mod_apellido').value = selectedOption.dataset.apellido || '';
      document.getElementById('mod_telefono').value = selectedOption.dataset.telefono || '';
      document.getElementById('mod_compania').value = selectedOption.dataset.compania || '';
      document.getElementById('mod_sector').value = selectedOption.dataset.sector || '';
      document.getElementById('mod_estado').value = selectedOption.dataset.estado || 'Activo';

    } catch (error) {
      console.error('Error al cargar proveedor para modificar:', error);
      Swal.fire('Error', 'No se pudieron cargar los datos del proveedor', 'error');
    }
  }

  function inicializarDataTable(data) {
    proveedoresTable = $('#proveedoresTable').DataTable({
      paging: true,
      searching: true,
      ordering: true,
      pageLength: 10,
      lengthMenu: [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
      language: {
        "decimal": "",
        "emptyTable": "No hay proveedores registrados",
        "info": "Mostrando _START_ a _END_ de _TOTAL_ proveedores",
        "infoEmpty": "Mostrando 0 a 0 de 0 proveedores",
        "infoFiltered": "(filtrado de _MAX_ proveedores totales)",
        "infoPostFix": "",
        "thousands": ",",
        "lengthMenu": "Mostrar _MENU_ proveedores",
        "loadingRecords": "Cargando...",
        "processing": "Procesando...",
        "search": "Buscar:",
        "zeroRecords": "No se encontraron proveedores coincidentes",
        "paginate": {
          "first": "Primero",
          "last": "Último",
          "next": "Siguiente",
          "previous": "Anterior"
        }
      },
      data: data,
      columns: [
        { data: 'cod_proveedor' },
        { data: 'nombre' },
        { data: 'apellido' },
        { data: 'telefono' },
        { data: 'compania' },
        { data: 'sector' },
        {
          data: 'estado',
          render: function (data, type, row) {
            return `<span class="badge ${data === 'Activo' ? 'bg-success' : 'bg-danger'}">${data}</span>`;
          }
        }
      ]
    });
  }

  // Función para limpiar el formulario de registro
  function limpiarFormulario() {
    document.getElementById('proveedorForm').reset();
  }

  // Función para verificar teléfono existente
  async function verificarTelefonoExistente(telefono, codProveedor = null) {
    try {
      if (!telefono || !/^\d{8}$/.test(telefono)) {
        await Swal.fire({
          title: 'Teléfono inválido',
          text: 'El teléfono debe tener 8 dígitos',
          icon: 'error'
        });
        return true;
      }

      let url = `/proveedores/api/telefono/existe/${telefono}`;
      if (codProveedor) {
        url += `?excluirProveedor=${codProveedor}`;
      }

      const response = await fetch(url);
      const data = await response.json();

      if (!data.success) {
        throw new Error(data.message || 'Error en la verificación');
      }

      if (data.existe) {
        await Swal.fire({
          title: 'Teléfono registrado',
          text: 'Este número ya está en uso por otro proveedor/empleado',
          icon: 'warning',
          confirmButtonText: 'Entendido'
        });
        return true;
      }
      return false;

    } catch (error) {
      console.error('Error verificando teléfono:', error);
      await Swal.fire({
        title: 'Error de verificación',
        text: error.message || 'No se pudo verificar el teléfono',
        icon: 'error'
      });
      return true;
    }
  }

  // Función para manejar el envío del formulario (POST)
  document.getElementById('ingresarButton').addEventListener('click', async function (e) {
    e.preventDefault();

    const submitBtn = document.getElementById('ingresarButton');
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Procesando...';

    try {
      const nombre = document.getElementById('nombre').value.trim();
      const apellido = document.getElementById('apellido').value.trim();

      // Validación de nombre y apellido
      if (!validarNombreApellido(nombre)) {
        await Swal.fire("Error", "El nombre debe contener solo letras y tener al menos 3 caracteres", "error");
        return;
      }

      if (!validarNombreApellido(apellido)) {
        await Swal.fire("Error", "El apellido debe contener solo letras y tener al menos 3 caracteres", "error");
        return;
      }

      const formData = {
        nombre,
        apellido,
        telefono: document.getElementById('telefono').value.trim(),
        compania: document.getElementById('compania').value,
        sector: document.getElementById('sector').value,
        estado: document.getElementById('estado').value || 'Activo'
      };

      // Validaciones básicas
      if (!formData.nombre || !formData.apellido || !formData.telefono ||
        !formData.compania || !formData.sector) {
        await Swal.fire('Error', 'Todos los campos son requeridos', 'error');
        return;
      }

      // Verificar teléfono
      const telefonoExiste = await verificarTelefonoExistente(formData.telefono);
      if (telefonoExiste) return;

      // Enviar datos al servidor
      const response = await fetch('/proveedores/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const result = await response.json();

      if (result.success) {
        await Swal.fire('Éxito', 'Proveedor registrado correctamente', 'success');
        cargarProveedores(); // Actualizar la lista
        limpiarFormulario(); // Limpiar el formulario
      } else {
        await Swal.fire('Error', result.errors?.join(', ') || 'Error al registrar', 'error');
      }
    } catch (error) {
      console.error('Error en submit:', error);
      await Swal.fire('Error', 'Ocurrió un error inesperado', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<i class="fas fa-user-plus me-2"></i>Ingresar';
    }
  });

  // Función para modificar proveedor (PUT)
  document.getElementById('modificarButton').addEventListener('click', async function () {
    const codProveedor = document.getElementById('mod_codigo').value;
    if (!codProveedor) {
      Swal.fire('Error', 'Debe seleccionar un proveedor', 'error');
      return;
    }

    // Obtener los datos originales del select para nombre, apellido y sector
    const select = document.getElementById('select_proveedor_modificar');
    const selectedOption = select.options[select.selectedIndex];

    if (!selectedOption) {
      Swal.fire('Error', 'No se pudieron obtener los datos del proveedor', 'error');
      return;
    }

    // Usar los datos originales del select (que no se pueden modificar)
    const nombre = selectedOption.dataset.nombre || '';
    const apellido = selectedOption.dataset.apellido || '';
    const sector = selectedOption.dataset.sector || '';

    // Solo obtener los campos modificables
    const telefono = document.getElementById('mod_telefono').value.trim();
    const compania = document.getElementById('mod_compania').value;
    const estado = document.getElementById('mod_estado').value;

    const formData = {
      nombre,
      apellido,
      telefono,
      compania,
      sector,
      estado
    };

    // Validaciones solo para campos modificables
    if (!telefono || !compania || !estado) {
      Swal.fire('Advertencia', 'Teléfono, compañía y estado son obligatorios', 'warning');
      return;
    }

    // Validar formato del teléfono
    if (!/^\d{8}$/.test(telefono)) {
      await Swal.fire("Error", "El teléfono debe contener exactamente 8 dígitos", "error");
      return;
    }

    // Verificar si el teléfono ya existe (excluyendo el proveedor actual)
    if (await verificarTelefonoExistente(telefono, codProveedor)) {
      return;
    }

    const confirmacion = await Swal.fire({
      title: '¿Actualizar proveedor?',
      text: `¿Desea actualizar los datos de ${nombre} ${apellido}?`,
      html: `
      <div class="text-start">
        <p><strong>Cambios:</strong></p>
        <ul>
          <li>Teléfono: ${selectedOption.dataset.telefono} → ${telefono}</li>
          <li>Compañía: ${selectedOption.dataset.compania} → ${compania}</li>
          <li>Estado: ${selectedOption.dataset.estado} → ${estado}</li>
        </ul>
      </div>
    `,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Sí, actualizar',
      cancelButtonText: 'Cancelar'
    });

    if (!confirmacion.isConfirmed) return;

    try {
      const btnModificar = document.getElementById('modificarButton');
      btnModificar.disabled = true;
      btnModificar.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Procesando...';

      const response = await fetch(`/proveedores/api/proveedores/${codProveedor}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const result = await response.json();

      if (result.success) {
        await Swal.fire('Éxito', 'Proveedor actualizado correctamente', 'success');
        cargarProveedores();
        // Limpiar formulario de modificación
        document.getElementById('select_proveedor_modificar').value = '';
        document.getElementById('formulario-modificacion').style.display = 'none';
      } else {
        Swal.fire('Error', result.errors?.join(', ') || 'Error al actualizar', 'error');
      }
    } catch (error) {
      console.error('Error al actualizar:', error);
      Swal.fire('Error', 'Error al comunicarse con el servidor', 'error');
    } finally {
      const btnModificar = document.getElementById('modificarButton');
      btnModificar.disabled = false;
      btnModificar.innerHTML = '<i class="fas fa-save me-2"></i>Guardar Cambios';
    }
  });

  // Cargar proveedores al iniciar la página
  document.addEventListener('DOMContentLoaded', () => {
    cargarProveedores();
  });
</script>