<link rel="stylesheet" href="/styles/ventas.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

<!-- JavaScript (ORDEN CR√çTICO) -->
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/i18n/es.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-5 py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card">
                <div class="card p-4" style="background-color: #ffffff8f; border-light;">
                    <h3 class="text-center" style="color: #000000;">Ventas</h3>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="codigoVenta" class="form-label">C√≥digo de Venta:</label>
                            <input type="text" id="codigoVenta" class="form-control" placeholder="C√≥digo de Venta"
                                disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="sector" class="form-label">Sector:</label>
                            <select id="sector" name="sector" class="form-select" required>
                                <option value="" disabled selected>Seleccione un sector</option>
                                {{#each sectores}}
                                <option value="{{this}}">{{this}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="empleado" class="form-label">Empleado:</label>
                            <input type="text" id="empleado" class="form-control" placeholder="Empleado:" disabled />
                        </div>
                        <div class="col-md-4">
                            <label for="nombreProducto" class="form-label">Producto:</label>
                            <select id="nombreProducto" class="form-select select2-product">
                                <option value="" disabled selected>Seleccione un producto</option>
                            </select>
                            <div id="descripcionProducto" class="mt-2 small text-muted" style="display: none;"></div>
                        </div>
                        <div class="col-md-2">
                            <label for="cantidad" class="form-label">Cantidad:</label>
                            <input type="number" id="cantidad" class="form-control" placeholder="Cantidad" min="1"
                                required>
                            <div id="stockDisponible" class="mt-2 small text-muted" style="display: none;"></div>
                        </div>
                        <div class="col-md-2">
                            <label for="precio" class="form-label">Precio:</label>
                            <input type="text" id="precio" class="form-control" placeholder="Precio" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="metodoPago" class="form-label">M√©todo de Pago:</label>
                            <select id="metodoPago" class="form-select">
                                <option value="" disabled selected>Seleccione M√©todo de Pago</option>
                                <option>Efectivo</option>
                                <option>Tarjeta</option>
                                <option>Transferencia</option>
                            </select>
                        </div>
                    </div>

                    <div class="text-center mt-3">
                        <button id="agregarProducto" class="btn btn-custom btn-custom-primary">‚ûï Agregar M√°s</button>
                    </div>

                    <div class="mt-4">
                        <h5 class="text-center"
                            style="background-color: #80c7e0; color: #fff; padding: 8px; border-radius: 5px;">Lista de
                            Productos</h5>
                        <table class="table table-light table-striped text-center">
                            <thead class="table-secondary">
                                <tr>
                                    <th>Producto</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                    <th>M√©todo de Pago</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody id="tablaProductos">
                                <!-- Aqu√≠ se agregar√°n din√°micamente los productos -->
                            </tbody>
                        </table>
                    </div>
                    <div class="row mt-4">
                        <div class="col-md-4">
                            <label for="subtotal" class="form-label">Subtotal:</label>
                            <input type="text" id="subtotal" class="form-control" placeholder="Subtotal" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="iva" class="form-label">IVA (15%):</label>
                            <input type="text" id="iva" class="form-control" placeholder="IVA" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="total" class="form-label">Total:</label>
                            <input type="text" id="total" class="form-control" placeholder="Total" disabled>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <button id="guardarVenta" class="btn btn-custom btn-custom-success">üíæ Guardar Venta</button>
                        <button id="imprimirRecibo" class="btn btn-custom btn-custom-info no-print" disabled>
                            üñ®Ô∏è Imprimir Recibo
                        </button>
                    </div>

                    <!-- Contenedor del recibo -->
                    <div id="reciboContainer" class="recibo-container">
                        <div class="recibo-header">
                            <img src="/images/logo1.webp" alt="Logo Ferreter√≠a" class="recibo-logo"
                                onerror="this.style.display='none'">
                            <div class="bold" style="font-size: 14px;">FERRETER√çA LAS BRISAS DE ASOSOSCA</div>
                            <div style="font-size: 10px;">Tel: 2222-2222</div>
                            <div style="font-size: 10px;">contacto@lasbrisas.com</div>
                        </div>

                        <div class="recibo-body">
                            <div class="recibo-line">
                                <span>FECHA:</span>
                                <span id="reciboFecha"></span>
                            </div>
                            <div class="recibo-line">
                                <span>HORA:</span>
                                <span id="reciboHora"></span>
                            </div>
                            <div class="recibo-line">
                                <span>FACTURA #:</span>
                                <span id="reciboFactura"></span>
                            </div>
                            <div class="recibo-line">
                                <span>EMPLEADO:</span>
                                <span id="reciboEmpleado"></span>
                            </div>

                            <div class="recibo-productos">
                                <div class="text-center bold" style="margin: 8px 0; font-size: 12px;">DETALLE DE VENTA
                                </div>
                                <div id="reciboProductos">
                                    <!-- Los productos se insertar√°n aqu√≠ -->
                                </div>
                            </div>

                            <div class="recibo-totales">
                                <div class="recibo-line">
                                    <span>SUBTOTAL:</span>
                                    <span id="reciboSubtotal"></span>
                                </div>
                                <div class="recibo-line">
                                    <span>IVA (15%):</span>
                                    <span id="reciboIva"></span>
                                </div>
                                <div class="recibo-line">
                                    <span>TOTAL:</span>
                                    <span id="reciboTotal"></span>
                                </div>
                                <div class="recibo-line">
                                    <span>FORMA DE PAGO:</span>
                                    <span id="reciboMetodoPago"></span>
                                </div>
                            </div>
                        </div>

                        <div class="recibo-footer">
                            <div class="bold">¬°GRACIAS POR SU COMPRA!</div>
                            <div>Vuelva pronto</div>
                        </div>
                    </div>

                    <div class="mt-5 no-print">
                        <h5 class="text-center"
                            style="background-color: #007bff; color: #fff; padding: 8px; border-radius: 5px;">Historial
                            de Ventas</h5>
                        <div class="card p-3 table-responsive" style="border: 1px solid #ddd;">
                            <table class="table align-middle mb-0 bg-white table-striped text-center display"
                                id="tablaHistorialVentas" style="width:100%">
                                <thead class="bg-light">
                                    <tr>
                                        <th>C√≥digo Venta</th>
                                        <th>C√≥digo Producto</th>
                                        <th>Nombre</th>
                                        <th>Cantidad</th>
                                        <th>Precio</th>
                                        <th>M√©todo Pago</th>
                                        <th>Sector</th>
                                        <th>Fecha</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- DataTables llenar√° esto autom√°ticamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let productos = [];
    let ultimaVentaGuardada = null;

    // Funci√≥n para generar el recibo
    function generarRecibo(ventaData) {
        console.log('Generando recibo con datos:', ventaData);

        const ahora = new Date();
        const fecha = ahora.toLocaleDateString('es-ES');
        const hora = ahora.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });

        // Actualizar los datos del recibo
        document.getElementById('reciboFecha').textContent = fecha;
        document.getElementById('reciboHora').textContent = hora;
        document.getElementById('reciboFactura').textContent = ventaData.codigo_venta || 'N/A';
        document.getElementById('reciboEmpleado').textContent = ventaData.empleado || document.getElementById('empleado').value || 'N/A';
        document.getElementById('reciboSubtotal').textContent = `C$${parseFloat(ventaData.subtotal || 0).toFixed(2)}`;
        document.getElementById('reciboIva').textContent = `C$${parseFloat(ventaData.iva || 0).toFixed(2)}`;
        document.getElementById('reciboTotal').textContent = `C$${parseFloat(ventaData.total || 0).toFixed(2)}`;
        document.getElementById('reciboMetodoPago').textContent = ventaData.metodo_pago || 'Efectivo';

        // Generar lista de productos CON LOS CUATRO CAMPOS
        const productosContainer = document.getElementById('reciboProductos');
        productosContainer.innerHTML = '';

        if (ventaData.productos && ventaData.productos.length > 0) {
            ventaData.productos.forEach(producto => {
                const productoDiv = document.createElement('div');
                productoDiv.className = 'producto-line';
                const precioUnitario = parseFloat(producto.precio_venta).toFixed(2);
                const totalProducto = (parseFloat(producto.precio_venta) * parseInt(producto.cantidad)).toFixed(2);

                productoDiv.innerHTML = `
                <div class="producto-nombre">${producto.nombre_producto}</div>
                <div class="producto-cantidad">${producto.cantidad}</div>
                <div class="producto-precio-unitario">C$${precioUnitario}</div>
                <div class="producto-precio-total">C$${totalProducto}</div>
            `;
                productosContainer.appendChild(productoDiv);
            });
        } else {
            productosContainer.innerHTML = '<div class="text-center">No hay productos</div>';
        }

        // Mostrar el bot√≥n de imprimir
        document.getElementById('imprimirRecibo').disabled = false;
        ultimaVentaGuardada = ventaData;

        console.log('Recibo generado exitosamente');
    }

    // Funci√≥n MEJORADA para imprimir el recibo en formato EXACTO 210x297 mm
    function imprimirRecibo() {
        if (!ultimaVentaGuardada) {
            Swal.fire({
                icon: 'warning',
                title: 'No hay recibo',
                text: 'No hay un recibo disponible para imprimir'
            });
            return;
        }

        console.log('Imprimiendo recibo:', ultimaVentaGuardada);

        // Generar el recibo nuevamente para asegurar datos actualizados
        generarRecibo(ultimaVentaGuardada);

        // Crear una ventana nueva espec√≠ficamente para imprimir
        const ventanaImpresion = window.open('', '_blank', 'width=800,height=600');

        // Contenido HTML optimizado para impresi√≥n EXACTA 210x297 mm
        const contenidoRecibo = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Recibo de Venta - Ferreter√≠a Las Brisas</title>
                <meta charset="UTF-8">
                <style>
                    /* ESTILOS PARA FORMATO EXACTO 210x297 mm */
                    @page {
                        size: 210mm 297mm;
                        margin: 0;
                        padding: 0;
                    }
                    
                    body {
                        width: 210mm;
                        height: 297mm;
                        margin: 0;
                        padding: 10mm;
                        font-family: 'Arial', sans-serif;
                        font-size: 12px;
                        background: white;
                        line-height: 1.3;
                        color: #000;
                        box-sizing: border-box;
                        overflow: hidden;
                    }
                    
                    .recibo-container {
                        width: 190mm;
                        height: 277mm;
                        margin: 0 auto;
                        border: 1px solid #000;
                        padding: 8mm;
                        box-sizing: border-box;
                        position: relative;
                    }
                    
                    .recibo-header { 
                        text-align: center; 
                        border-bottom: 1px solid #000; 
                        padding-bottom: 5px; 
                        margin-bottom: 8px; 
                    }
                    
                    .recibo-logo {
                        max-width: 60px;
                        max-height: 60px;
                        margin-bottom: 5px;
                    }
                    
                    .empresa-nombre {
                        font-size: 16px;
                        font-weight: bold;
                        color: #000;
                        margin: 5px 0;
                    }
                    
                    .empresa-info {
                        font-size: 10px;
                        color: #000;
                        margin: 3px 0;
                    }
                    
                    .recibo-body {
                        margin: 10px 0;
                    }
                    
                    .recibo-line { 
                        display: flex; 
                        justify-content: space-between; 
                        margin: 5px 0; 
                        padding: 3px 0;
                        border-bottom: 1px dashed #ccc;
                        font-size: 11px;
                    }
                    
                    .recibo-totales { 
                        border-top: 1px solid #000; 
                        margin-top: 15px; 
                        padding-top: 10px; 
                        font-weight: bold;
                        background: #f0f0f0;
                        padding: 8px;
                        border-radius: 3px;
                    }
                    
                    .recibo-productos { 
                        margin: 15px 0; 
                    }
                    
                    .productos-header {
                        display: flex;
                        justify-content: space-between;
                        margin: 8px 0 4px 0;
                        padding: 6px;
                        background: #000;
                        color: white;
                        font-weight: bold;
                        border-radius: 3px;
                        font-size: 10px;
                    }
                    
                    .producto-line { 
                        display: flex; 
                        justify-content: space-between; 
                        margin: 4px 0; 
                        padding: 5px;
                        background: #f8f8f8;
                        border-radius: 2px;
                        font-size: 10px;
                    }
                    
                    .producto-nombre { 
                        flex: 3; 
                        text-align: left; 
                        font-weight: bold;
                    }
                    
                    .producto-cantidad { 
                        flex: 1; 
                        text-align: center; 
                    }
                    
                    .producto-precio-unitario { 
                        flex: 2; 
                        text-align: center; 
                    }
                    
                    .producto-precio-total { 
                        flex: 2; 
                        text-align: right; 
                        font-weight: bold;
                    }
                    
                    .text-center { 
                        text-align: center; 
                    }
                    
                    .bold { 
                        font-weight: bold; 
                    }
                    
                    .section-title {
                        font-size: 12px;
                        font-weight: bold;
                        color: #000;
                        margin: 10px 0 6px 0;
                        padding-bottom: 3px;
                        border-bottom: 1px solid #ccc;
                    }
                    
                    .total-amount {
                        font-size: 14px;
                        color: #000;
                    }
                    
                    .recibo-footer {
                        text-align: center;
                        margin-top: 15px;
                        padding-top: 10px;
                        border-top: 1px solid #000;
                        font-size: 10px;
                        position: absolute;
                        bottom: 8mm;
                        left: 8mm;
                        right: 8mm;
                    }
                    
                    .thank-you {
                        font-size: 12px;
                        font-weight: bold;
                        color: #000;
                        margin: 5px 0;
                    }
                    
                    /* Configuraci√≥n de impresi√≥n para tama√±o exacto */
                    @media print {
                        html, body {
                            width: 210mm;
                            height: 297mm;
                            margin: 0;
                            padding: 0;
                            overflow: hidden;
                        }
                        
                        body {
                            padding: 10mm;
                        }
                        
                        .recibo-container {
                            width: 190mm !important;
                            height: 277mm !important;
                            margin: 0 !important;
                            padding: 8mm !important;
                            border: 1px solid #000 !important;
                            box-shadow: none !important;
                            page-break-inside: avoid;
                        }
                        
                        .no-print {
                            display: none !important;
                        }
                        
                        /* Forzar el tama√±o exacto en todos los navegadores */
                        @page {
                            size: 210mm 297mm;
                            margin: 0;
                        }
                    }
                    
                    /* Estilos espec√≠ficos para navegadores */
                    @media screen {
                        body {
                            background: #f0f0f0;
                        }
                        
                        .recibo-container {
                            background: white;
                            box-shadow: 0 0 10px rgba(0,0,0,0.1);
                        }
                    }
                </style>
            </head>
            <body>
                <div class="recibo-container">
                    <div class="recibo-header">
                        <img src="/images/logo1.webp" alt="Logo Ferreter√≠a" class="recibo-logo" onerror="this.style.display='none'">
                        <div class="empresa-nombre">FERRETER√çA LAS BRISAS DE ASOSOSCA</div>
                        <div class="empresa-info">Tel: 2222-2222 | contacto@lasbrisas.com</div>
                        <div class="empresa-info">Direcci√≥n: De donde fue el Rastro Municipal 2c al sur, Le√≥n</div>
                        <div class="empresa-info">Sistema de Ventas - Recibo Oficial</div>
                    </div>

                    <div class="recibo-body">
                        <div class="section-title">INFORMACI√ìN DE LA VENTA</div>
                        
                        <div class="recibo-line">
                            <span class="bold">FACTURA #:</span>
                            <span class="bold">${document.getElementById('reciboFactura').textContent}</span>
                        </div>
                        <div class="recibo-line">
                            <span class="bold">FORMA DE PAGO:</span>
                            <span>${document.getElementById('reciboMetodoPago').textContent}</span>
                        </div>
                        <div class="recibo-line">
                            <span class="bold">FECHA Y HORA:</span>
                            <span>${document.getElementById('reciboFecha').textContent} ${document.getElementById('reciboHora').textContent}</span>
                        </div>
                        <div class="recibo-line">
                            <span class="bold">EMPLEADO:</span>
                            <span>${document.getElementById('reciboEmpleado').textContent}</span>
                        </div>

                        <div class="recibo-productos">
                            <div class="section-title">DETALLE DE PRODUCTOS</div>
                            
                            <!-- ENCABEZADOS DE PRODUCTOS -->
                            <div class="productos-header">
                                <div class="producto-nombre">PRODUCTO</div>
                                <div class="producto-cantidad">CANTIDAD</div>
                                <div class="producto-precio-unitario">UNITARIO</div>
                                <div class="producto-precio-total">TOTAL</div>
                            </div>
                            
                            <div>
                                ${document.getElementById('reciboProductos').innerHTML}
                            </div>
                        </div>

                        <div class="recibo-totales">
                            <div class="section-title">RESUMEN DE PAGO</div>
                            <div class="recibo-line">
                                <span>SUBTOTAL:</span>
                                <span>${document.getElementById('reciboSubtotal').textContent}</span>
                            </div>
                            <div class="recibo-line">
                                <span>IVA (15%):</span>
                                <span>${document.getElementById('reciboIva').textContent}</span>
                            </div>
                            <div class="recibo-line">
                                <span class="bold">TOTAL:</span>
                                <span class="bold total-amount">${document.getElementById('reciboTotal').textContent}</span>
                            </div>
                        </div>
                    </div>

                    <div class="recibo-footer">
                        <div class="thank-you">¬°GRACIAS POR SU COMPRA!</div>
                        <div>Este recibo es un documento oficial</div>
                        <div>Conserve este comprobante, garantia /24 horas</div>
                        <div>Aplica solo para herramientas y equipos. No aplica para consumibles</div>
                    </div>
                </div>

                <script>
                    // Imprimir autom√°ticamente cuando se carga la ventana
                    window.onload = function() {
                        setTimeout(function() {
                            // Forzar el tama√±o de p√°gina antes de imprimir
                            const style = document.createElement('style');
                            style.innerHTML = \`
                                @page {
                                    size: 210mm 297mm;
                                    margin: 0;
                                }
                                @media print {
                                    html, body {
                                        width: 210mm;
                                        height: 297mm;
                                    }
                                }
                            \`;
                            document.head.appendChild(style);
                            
                            window.print();
                            
                            // Cerrar la ventana despu√©s de imprimir
                            setTimeout(function() {
                                window.close();
                            }, 1000);
                        }, 500);
                    };
                <\/script>
            </body>
            </html>
        `;

        ventanaImpresion.document.write(contenidoRecibo);
        ventanaImpresion.document.close();
    }

    // Event listener para el bot√≥n de imprimir
    document.getElementById('imprimirRecibo').addEventListener('click', imprimirRecibo);

    // [El resto del c√≥digo JavaScript permanece igual...]
    // Modificar el evento agregarProducto para usar el nombre:
    document.getElementById("agregarProducto").addEventListener("click", async function () {
        const selectProducto = $('#nombreProducto');
        const selectedOption = selectProducto.select2('data')[0];

        if (!selectedOption) {
            Swal.fire({
                icon: 'warning',
                title: 'Producto no seleccionado',
                text: 'Por favor, seleccione un producto v√°lido'
            });
            return;
        }

        let codigo = selectedOption.id;
        let nombre = selectedOption.text;
        let cantidad = document.getElementById("cantidad").value;
        let precio = document.getElementById("precio").value;
        let metodoPago = document.getElementById("metodoPago").value;
        let sector = document.getElementById("sector").value;
        let fechaVencimiento = selectedOption.element.dataset.vencimiento;
        let stockDisponible = selectedOption.element.dataset.stock;

        if (!codigo || !cantidad || !precio || !metodoPago || !sector) {
            Swal.fire({
                icon: 'warning',
                title: 'Campos incompletos',
                text: 'Por favor, complete todos los campos antes de agregar.'
            });
            return;
        }

        const cantidadNum = parseInt(cantidad, 10);
        const stockNum = stockDisponible ? parseInt(stockDisponible, 10) : 0;

        const cantidadReservada = productos.reduce((total, p) => {
            return p.codigo_producto === codigo ? total + parseInt(p.cantidad, 10) : total;
        }, 0);

        const stockRealDisponible = stockNum - cantidadReservada;

        if (stockRealDisponible < cantidadNum) {
            Swal.fire({
                icon: 'warning',
                title: 'Inventario Insuficiente',
                html: `
                <div style="text-align: left;">
                    <p style="color: #856404; background-color: #fff3cd; padding: 10px; border-radius: 5px; border-left: 4px solid #ffeeba;">
                        No hay suficiente inventario para "${nombre}"
                    </p>
                    <p style="margin-top: 15px;"><strong>Disponible total:</strong> ${stockNum}</p>
                    <p><strong>Disponible real:</strong> ${stockRealDisponible}</p>
                    <p><strong>Solicitado:</strong> ${cantidadNum}</p>
                </div>
            `,
                confirmButtonText: 'Entendido',
                confirmButtonColor: '#3085d6'
            });
            return;
        }

        if (fechaVencimiento) {
            const hoy = new Date();
            const vencimiento = new Date(fechaVencimiento);

            if (vencimiento < hoy) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Producto Vencido',
                    html: `
                <div style="text-align: left;">
                    <p style="color: #856404; background-color: #fff3cd; padding: 10px; border-radius: 5px; border-left: 4px solid #ffeeba;">
                        No se puede vender "${nombre}" porque est√° vencido
                    </p>
                    <p style="margin-top: 15px;"><strong>Vencimiento:</strong> ${vencimiento.toLocaleDateString()}</p>
                </div>
            `,
                    confirmButtonText: 'Entendido',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }
        }

        const productoExistenteIndex = productos.findIndex(p => p.codigo_producto === codigo);

        if (productoExistenteIndex !== -1) {
            productos[productoExistenteIndex].cantidad = (parseInt(productos[productoExistenteIndex].cantidad) + cantidadNum);
            const filaExistente = document.querySelector(`tr[data-codigo="${codigo}"]`);
            if (filaExistente) {
                filaExistente.querySelector(".cantidad-cell").textContent = productos[productoExistenteIndex].cantidad;
            }
        } else {
            productos.push({
                codigo_producto: codigo,
                nombre_producto: nombre,
                cantidad: cantidadNum,
                precio_venta: precio,
                metodo_pago: metodoPago,
                sector: sector
            });

            let tabla = document.getElementById("tablaProductos");
            let fila = document.createElement("tr");
            fila.dataset.codigo = codigo;

            fila.innerHTML = `
            <td>${nombre}</td>
            <td class="cantidad-cell">${cantidadNum}</td>
            <td class="precio-cell">${precio}</td>
            <td class="metodo-pago-cell">${metodoPago}</td>
            <td>
                <button class="btn btn-warning btn-sm me-1 editar">‚úèÔ∏è Editar</button>
                <button class="btn btn-danger btn-sm eliminar">‚ùå Eliminar</button>
            </td>
        `;

            tabla.appendChild(fila);

            fila.querySelector(".editar").addEventListener("click", function () {
                editarProducto(fila, codigo);
            });

            fila.querySelector(".eliminar").addEventListener("click", function () {
                Swal.fire({
                    title: '¬øEst√° seguro?',
                    text: "Este producto ser√° eliminado de la lista.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'S√≠, eliminar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        productos = productos.filter(p => p.codigo_producto !== codigo);
                        fila.remove();
                        Swal.fire({
                            icon: 'success',
                            title: 'Eliminado',
                            text: 'El producto ha sido eliminado.'
                        });
                        actualizarTotales();
                    }
                });
            });
        }

        document.getElementById("nombreProducto").value = "";
        document.getElementById("cantidad").value = "";
        document.getElementById("precio").value = "";
        document.getElementById("metodoPago").value = "";
        document.getElementById("descripcionProducto").textContent = "";
        document.getElementById("descripcionProducto").style.display = "none";
        document.getElementById("stockDisponible").textContent = "";
        document.getElementById("stockDisponible").style.display = "none";

        actualizarTotales();
    });

    function editarProducto(fila, codigo) {
        const producto = productos.find(p => p.codigo_producto === codigo);
        const selectedOption = document.querySelector(`#nombreProducto option[value="${codigo}"]`);
        const stockTotal = selectedOption ? parseInt(selectedOption.dataset.stock) : 0;

        const cantidadCell = fila.querySelector(".cantidad-cell");
        const precioCell = fila.querySelector(".precio-cell");
        const metodoPagoCell = fila.querySelector(".metodo-pago-cell");
        const cantidadActual = cantidadCell.textContent;
        const precioActual = precioCell.textContent;
        const metodoPagoActual = metodoPagoCell.textContent.trim();

        cantidadCell.innerHTML = `<input type="number" class="form-control form-control-sm edit-cantidad" value="${cantidadActual}" min="1" max="${stockTotal}">`;
        precioCell.innerHTML = `<input type="number" class="form-control form-control-sm edit-precio" value="${precioActual}" min="0.01" step="0.01">`;

        const metodosPago = ['Efectivo', 'Tarjeta', 'Transferencia'];
        let options = metodosPago.map(mp =>
            `<option value="${mp}" ${mp === metodoPagoActual ? 'selected' : ''}>${mp}</option>`
        ).join('');

        metodoPagoCell.innerHTML = `
        <select class="form-select form-select-sm edit-metodo-pago">
            ${options}
        </select>
    `;

        const btnEditar = fila.querySelector(".editar");
        btnEditar.innerHTML = "üíæ Guardar";
        btnEditar.classList.remove("btn-warning");
        btnEditar.classList.add("btn-success");

        btnEditar.replaceWith(btnEditar.cloneNode(true));
        fila.querySelector(".editar").addEventListener("click", function () {
            guardarEdicion(fila, codigo, stockTotal);
        });
    }

    function guardarEdicion(fila, codigo, stockTotal) {
        const nuevaCantidad = parseInt(fila.querySelector(".edit-cantidad").value);
        const nuevoPrecio = parseFloat(fila.querySelector(".edit-precio").value);
        const nuevoMetodoPago = fila.querySelector(".edit-metodo-pago").value;

        if (!nuevaCantidad || nuevaCantidad < 1 || !nuevoPrecio || nuevoPrecio <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Valores inv√°lidos',
                text: 'La cantidad debe ser al menos 1 y el precio debe ser mayor a 0'
            });
            return;
        }

        const cantidadOriginal = parseInt(fila.querySelector(".edit-cantidad").defaultValue);
        const cantidadReservada = productos.reduce((total, p) => {
            return p.codigo_producto === codigo ? total + parseInt(p.cantidad, 10) : total;
        }, 0);

        const stockDisponible = stockTotal - (cantidadReservada - cantidadOriginal);

        if (nuevaCantidad > stockDisponible) {
            Swal.fire({
                icon: 'error',
                title: 'Inventario insuficiente',
                html: `No hay suficiente inventario. Disponible: ${stockDisponible}`
            });
            return;
        }

        fila.querySelector(".cantidad-cell").textContent = nuevaCantidad;
        fila.querySelector(".precio-cell").textContent = nuevoPrecio.toFixed(2);
        fila.querySelector(".metodo-pago-cell").textContent = nuevoMetodoPago;

        const productoIndex = productos.findIndex(p => p.codigo_producto === codigo);
        if (productoIndex !== -1) {
            productos[productoIndex].cantidad = nuevaCantidad;
            productos[productoIndex].precio_venta = nuevoPrecio;
            productos[productoIndex].metodo_pago = nuevoMetodoPago;
        }

        const btnGuardar = fila.querySelector(".editar");
        btnGuardar.innerHTML = "‚úèÔ∏è Editar";
        btnGuardar.classList.remove("btn-success");
        btnGuardar.classList.add("btn-warning");

        btnGuardar.replaceWith(btnGuardar.cloneNode(true));
        fila.querySelector(".editar").addEventListener("click", function () {
            editarProducto(fila, codigo);
        });

        actualizarTotales();
    }

    document.getElementById("guardarVenta").addEventListener("click", async function () {
        if (productos.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Sin productos',
                text: 'No se han agregado productos.'
            });
            return;
        }

        try {
            const subtotal = productos.reduce((total, producto) => {
                return total + (parseFloat(producto.precio_venta) * parseInt(producto.cantidad));
            }, 0);

            const iva = subtotal * 0.15;
            const total = subtotal + iva;

            const detallesVenta = productos.map(producto => ({
                codigo_producto: producto.codigo_producto,
                cantidad: parseInt(producto.cantidad, 10),
                precio_unitario: parseFloat(producto.precio_venta),
                metodo_pago: producto.metodo_pago,
                sector: producto.sector
            }));

            console.log('Enviando venta con detalles:', detallesVenta);

            const response = await fetch("http://localhost:4000/ventas/api/ventas", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    detalles_venta: detallesVenta,
                    estado_venta: 'Completada'
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Error del servidor:', errorData);
                throw new Error(errorData.message || `Error HTTP: ${response.status}`);
            }

            const result = await response.json();
            console.log('Respuesta del servidor:', result);

            if (!result.success) {
                throw new Error(result.message || 'Error al guardar la venta');
            }

            // PREPARAR DATOS PARA EL RECIBO
            const ventaData = {
                codigo_venta: result.codigo_venta,
                productos: [...productos],
                subtotal: subtotal,
                iva: iva,
                total: total,
                metodo_pago: detallesVenta[0]?.metodo_pago || 'Efectivo',
                empleado: document.getElementById('empleado').value
            };

            console.log('Datos para recibo:', ventaData);

            // Generar el recibo
            generarRecibo(ventaData);

            Swal.fire({
                icon: 'success',
                title: 'Venta registrada',
                html: `
                    <div style="text-align: left;">
                        <p>‚úÖ Venta registrada exitosamente</p>
                        <p><strong>N√∫mero de Factura:</strong> ${result.codigo_venta}</p>
                        <p><strong>Total:</strong> C$${total.toFixed(2)}</p>
                        <p><strong>Productos:</strong> ${productos.length}</p>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Imprimir Recibo',
                cancelButtonText: 'Continuar',
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    setTimeout(() => {
                        imprimirRecibo();
                    }, 500);
                }
            });

            // Resetear la venta
            productos = [];
            document.getElementById("tablaProductos").innerHTML = "";
            document.getElementById("subtotal").value = "0.00";
            document.getElementById("iva").value = "0.00";
            document.getElementById("total").value = "0.00";

            if (result.codigo_venta) {
                document.getElementById("codigoVenta").value = parseInt(result.codigo_venta) + 1;
                cargarHistorialVentas();
            }

        } catch (error) {
            console.error("Error en el proceso:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Error al procesar la venta'
            });
        }
    });

    async function cargarCodigoVenta() {
        try {
            const response = await fetch('http://localhost:4000/ventas/api/ventas');
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            const data = await response.json();
            if (data.success && Array.isArray(data.data) && data.data.length > 0) {
                const ultimoCodigo = Math.max(...data.data.map(venta => venta.cod_venta));
                document.getElementById("codigoVenta").value = ultimoCodigo + 1;
            } else {
                document.getElementById("codigoVenta").value = 1;
            }
        } catch (error) {
            console.error("Error al cargar el c√≥digo de venta:", error);
            document.getElementById("codigoVenta").value = 1;
        }
    }

    fetch("http://localhost:4000/ventas/api/ventas/")
        .then(response => response.json())
        .then(data => {
            console.log(data);
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });

    fetch('/api/empleados')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const empleado = data.empleado;
                const empleadoInput = document.getElementById('empleado');
                empleadoInput.value = `${empleado.nombre} ${empleado.apellido}`;
            } else {
                console.log(data.message);
            }
        })
        .catch(error => console.error('Error al obtener datos del empleado:', error));

    function actualizarTotales() {
        let subtotal = 0;

        productos.forEach(producto => {
            subtotal += parseFloat(producto.precio_venta) * parseInt(producto.cantidad);
        });

        const iva = subtotal * 0.15;
        const total = subtotal + iva;

        document.getElementById("subtotal").value = subtotal.toFixed(2);
        document.getElementById("iva").value = iva.toFixed(2);
        document.getElementById("total").value = total.toFixed(2);
    }

    async function cargarHistorialVentas() {
        try {
            const productosResponse = await fetch('http://localhost:4000/productos/api/productos');
            const productosData = await productosResponse.json();

            if (!productosData.success) {
                throw new Error('Error al cargar productos');
            }

            const mapaProductos = {};
            productosData.data.forEach(p => {
                mapaProductos[p.cod_producto] = p.nombre;
            });

            const ventasResponse = await fetch('http://localhost:4000/ventas/api/ventas');
            const ventasData = await ventasResponse.json();

            if (!ventasData.success) {
                throw new Error('Error al cargar ventas');
            }

            const ventas = ventasData.data.sort((a, b) => new Date(b.fecha_salida) - new Date(a.fecha_salida));

            $('#tablaHistorialVentas').DataTable({
                paging: true,
                searching: true,
                ordering: true,
                pageLength: 10,
                lengthMenu: [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
                language: {
                    "decimal": "",
                    "emptyTable": "No hay ventas registradas",
                    "info": "Mostrando _START_ a _END_ de _TOTAL_ ventas",
                    "infoEmpty": "Mostrando 0 a 0 de 0 ventas",
                    "infoFiltered": "(filtrado de _MAX_ ventas totales)",
                    "infoPostFix": "",
                    "thousands": ",",
                    "lengthMenu": "Mostrar _MENU_ ventas",
                    "loadingRecords": "Cargando...",
                    "processing": "Procesando...",
                    "search": "Buscar:",
                    "zeroRecords": "No se encontraron ventas coincidentes",
                    "paginate": {
                        "first": "Primera",
                        "last": "√öltima",
                        "next": "Siguiente",
                        "previous": "Anterior"
                    },
                    "aria": {
                        "sortAscending": ": activar para ordenar columna ascendente",
                        "sortDescending": ": activar para ordenar columna descendente"
                    }
                },
                data: ventas,
                columns: [
                    { data: 'cod_venta' },
                    { data: 'cod_producto' },
                    {
                        data: 'cod_producto',
                        render: function (data) {
                            return mapaProductos[data] || 'Desconocido';
                        }
                    },
                    { data: 'cantidad_venta' },
                    {
                        data: 'precio_venta',
                        render: function (data) {
                            return `C$${parseFloat(data).toFixed(2)}`;
                        }
                    },
                    { data: 'metodo_pago' },
                    { data: 'sector' },
                    {
                        data: 'fecha_salida',
                        render: function (data) {
                            return formatearFecha(data);
                        }
                    }
                ],
                order: [[0, 'desc']],
                destroy: true
            });

        } catch (error) {
            console.error('Error al cargar historial:', error);
            $('#tablaHistorialVentas').DataTable({
                data: [],
                language: {
                    "emptyTable": "Error al cargar el historial de ventas",
                    "info": "Mostrando 0 a 0 de 0 ventas",
                    "infoEmpty": "Error al cargar el historial",
                    "infoFiltered": "(filtrado de _MAX_ ventas totales)",
                    "search": "Buscar:",
                    "zeroRecords": "Error al cargar los datos"
                }
            });
        }
    }

    async function cargarSectores() {
        try {
            const response = await fetch("http://localhost:4000/productos/api/productos");
            const data = await response.json();

            if (data.success) {
                const sectoresUnicos = [...new Set(data.data.map(producto => producto.sector))];
                const selectSector = document.getElementById("sector");

                selectSector.innerHTML = `<option value="" disabled selected>Seleccione un sector</option>`;
                sectoresUnicos.forEach(sector => {
                    const option = document.createElement("option");
                    option.value = sector;
                    option.textContent = sector;
                    selectSector.appendChild(option);
                });
            }
        } catch (error) {
            console.error("Error al cargar sectores:", error);
        }
    }

    async function cargarProductosPorSector(sectorSeleccionado) {
        try {
            const response = await fetch("http://localhost:4000/productos/api/productos");
            const data = await response.json();

            const selectProducto = $('#nombreProducto');
            selectProducto.empty().append('<option value="" disabled selected>Seleccione un producto</option>');

            data.data
                .filter(producto => producto.sector === sectorSeleccionado)
                .forEach(producto => {
                    const option = new Option(
                        producto.nombre,
                        producto.cod_producto,
                        false,
                        false
                    );
                    $(option).attr('data-precio', producto.precio_compra);
                    $(option).attr('data-stock', producto.cantidad);
                    $(option).attr('data-descripcion', producto.descripcion);
                    $(option).attr('data-vencimiento', producto.fechavencimiento);
                    $(option).attr('data-nombre', producto.nombre);

                    selectProducto.append(option);
                });

            selectProducto.select2({
                placeholder: "Seleccione un producto",
                allowClear: false,
                width: '100%',
                dropdownParent: selectProducto.closest('.card'),
                language: "es"
            });

        } catch (error) {
            console.error('Error al cargar productos:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No se pudieron cargar los productos'
            });
        }
    }

    $("#sector").on("change", async function () {
        const sectorSeleccionado = $(this).val();
        if (!sectorSeleccionado) {
            $('#nombreProducto').empty().append('<option value="" disabled selected>Seleccione un sector primero</option>');
            $('#nombreProducto').prop('disabled', true).trigger('change');
            return;
        }

        $('#nombreProducto').prop('disabled', false);
        await cargarProductosPorSector(sectorSeleccionado);
    });

    $('#nombreProducto').on('change', function () {
        const selectedOption = $(this).find('option:selected');
        const precioBase = selectedOption.data('precio') || 0;
        const precioConIVA = (precioBase * 1.25).toFixed(2);

        $('#precio').val(precioConIVA);

        $('#descripcionProducto').text(selectedOption.data('descripcion') || '').toggle(!!selectedOption.data('descripcion'));
        $('#stockDisponible').text(`Inventario: ${selectedOption.data('stock') || 0}`).toggle(!!selectedOption.data('stock'));

        const stock = selectedOption.data('stock') || 0;
        $('#cantidad').attr('max', stock).val('');
    });

    function productoEstaVencido(fechaVencimiento) {
        if (!fechaVencimiento) return false;
        const hoy = new Date();
        const vencimiento = new Date(fechaVencimiento);
        return vencimiento < hoy;
    }

    function formatearFecha(fechaISO) {
        if (!fechaISO) return 'Sin fecha';
        try {
            const fecha = new Date(fechaISO);
            fecha.setMinutes(fecha.getMinutes() + fecha.getTimezoneOffset() - (6 * 60));
            const dia = String(fecha.getDate()).padStart(2, '0');
            const mes = String(fecha.getMonth() + 1).padStart(2, '0');
            const a√±o = fecha.getFullYear();
            return `${dia}/${mes}/${a√±o}`;
        } catch (e) {
            console.warn('Error al formatear fecha:', fechaISO, e);
            return fechaISO.split('T')[0];
        }
    }

    $(document).ready(async function () {
        await cargarSectores();
        $('#nombreProducto').select2({
            placeholder: "Seleccione un sector primero",
            disabled: true,
            width: '100%',
            dropdownParent: $('.card'),
            language: "es"
        });

        cargarHistorialVentas();
        cargarCodigoVenta();
        actualizarTotales();
    });
</script>