<link rel="stylesheet" href="/styles/ventas.css">

<div class="container mt-4">
    <div class="card">
        <div class="card p-4" style="background-color: #ffffff8f; border-light;">
            <h3 class="text-center" style="color: #000000;">Ventas</h3>
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="codigoVenta" class="form-label">C√≥digo de Venta:</label>
                    <input type="text" id="codigoVenta" class="form-control" placeholder="C√≥digo de Venta" disabled>
                </div>
                <div class="col-md-4">
                    <label for="sector" class="form-label">Sector:</label>
                    <select id="sector" name="sector" class="form-select" required>
                        <option value="" disabled selected>Seleccione un sector</option>
                        {{#each sectores}}
                        <option value="{{this}}">{{this}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="empleado" class="form-label">Empleado:</label>
                    <input type="text" id="empleado" class="form-control" placeholder="Empleado:" disabled />
                </div>
                <div class="col-md-4">
                    <label for="nombreProducto" class="form-label">Producto:</label>
                    <select id="nombreProducto" class="form-select">
                        <option value="" disabled selected>Seleccione un producto</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="cantidad" class="form-label">Cantidad:</label>
                    <input type="number" id="cantidad" class="form-control" placeholder="Cantidad">
                </div>
                <div class="col-md-2">
                    <label for="precio" class="form-label">Precio:</label>
                    <input type="text" id="precio" class="form-control" placeholder="Precio" disabled>
                </div>
                <div class="col-md-4">
                    <label for="metodoPago" class="form-label">M√©todo de Pago:</label>
                    <select id="metodoPago" class="form-select">
                        <option value="" disabled selected>Seleccione M√©todo de Pago</option>
                        <option>Efectivo</option>
                        <option>Tarjeta</option>
                        <option>Transferencia</option>
                    </select>
                </div>
            </div>

            <div class="text-center mt-3">
                <button id="agregarProducto" class="btn btn-custom btn-custom-primary">‚ûï Agregar M√°s</button>
            </div>

            <div class="mt-4">
                <h5 class="text-center"
                    style="background-color: #80c7e0; color: #fff; padding: 8px; border-radius: 5px;">Lista de Productos
                </h5>
                <table class="table table-light table-striped text-center">
                    <thead class="table-secondary">
                        <tr>
                            <th>Producto</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>M√©todo de Pago</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaProductos">
                        <!-- Aqu√≠ se agregar√°n din√°micamente los productos -->
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between mt-3">
                <button id="guardarVenta" class="btn btn-custom btn-custom-success">üíæ Guardar Venta</button>
            </div>
        </div>
    </div>
</div>

<script>

    // Lista de productos agregados
    let productos = [];

    // Obtener el √∫ltimo c√≥digo de venta almacenado o inicializar en 1
    let codigoVenta = localStorage.getItem("codigoVenta") ? parseInt(localStorage.getItem("codigoVenta")) : 1;

    // Mostrar el c√≥digo de venta actual en la caja de texto
    document.getElementById("codigoVenta").value = codigoVenta;

    // Agregar un producto a la lista de productos
    document.getElementById("agregarProducto").addEventListener("click", function () {
        let nombre = document.getElementById("nombreProducto").value;
        let cantidad = document.getElementById("cantidad").value;
        let precio = document.getElementById("precio").value;
        let metodoPago = document.getElementById("metodoPago").value;
        let sector = document.getElementById("sector").value;

        if (nombre === "" || cantidad === "" || precio === "" || metodoPago === "" || sector === "") {
            alert("Por favor, complete todos los campos antes de agregar.");
            return;
        }

        productos.push({
            codigo_producto: nombre,
            cantidad: cantidad,
            precio_venta: precio,  // Aseg√∫rate de usar el nombre correcto aqu√≠
            metodo_pago: metodoPago,
            sector: sector
        });

        // Agregar fila a la tabla
        let tabla = document.getElementById("tablaProductos");
        let fila = document.createElement("tr");

        fila.innerHTML = `
    <td>${nombre}</td>
    <td>${cantidad}</td>
    <td>${precio}</td>
    <td>${metodoPago}</td>
    <td><button class="btn btn-danger btn-sm eliminar">‚ùå Eliminar</button></td>
  `;

        tabla.appendChild(fila);

        // Limpiar los campos
        document.getElementById("nombreProducto").value = "";
        document.getElementById("cantidad").value = "";
        document.getElementById("precio").value = "";
        document.getElementById("metodoPago").value = "";

        // Eliminar producto de la tabla
        fila.querySelector(".eliminar").addEventListener("click", function () {
            productos = productos.filter(p => p.codigo_producto !== nombre);
            fila.remove();
        });
    });


document.getElementById("guardarVenta").addEventListener("click", async function () {
    // Validaci√≥n de productos
    if (productos.length === 0) {
        alert("No se han agregado productos.");
        return;
    }

    try {
        // 1. Obtener el empleado logueado
        const empleadoResponse = await fetch('/empleados/api/empleados');
        if (!empleadoResponse.ok) throw new Error('Error al obtener datos del empleado');
        
        const empleadoData = await empleadoResponse.json();
        console.log("Datos del empleado:", empleadoData); // Para depuraci√≥n
        
        // Validaci√≥n de respuesta
        if (!empleadoData.success || !empleadoData.data || empleadoData.data.length === 0) {
            throw new Error('No se encontr√≥ informaci√≥n del empleado');
        }

        // 2. Obtener el c√≥digo del empleado (usando tu estructura exacta)
        const empleadoLogueado = empleadoData.data[0]; // Primer empleado del array
        const codigoEmpleado = empleadoLogueado.Cod_Empleado; // Campo num√©rico seg√∫n tu API
        
        // Validaci√≥n del c√≥digo
        if (typeof codigoEmpleado !== 'number') {
            throw new Error('El c√≥digo de empleado debe ser num√©rico');
        }

        // 3. Preparar detalles de la venta con conversi√≥n de tipos
        const detallesVenta = productos.map(producto => ({
            codigo_producto: producto.codigo_producto,
            cantidad: parseInt(producto.cantidad, 10),
            precio_unitario: parseFloat(producto.precio_venta),
            metodo_pago: producto.metodo_pago,
            sector: producto.sector
        }));

        // 4. Calcular total con precisi√≥n decimal
        const totalVenta = detallesVenta.reduce((total, producto) => {
            return total + (producto.cantidad * producto.precio_unitario);
        }, 0).toFixed(2); // 2 decimales para moneda

        // 5. Estructurar datos para el backend
        const ventaData = {
            codigo_empleado: codigoEmpleado, // N√∫mero (1, 2, 3...)
            total_venta: parseFloat(totalVenta), // Convertir a n√∫mero
            detalles_venta: detallesVenta
        };

        console.log("Datos completos de venta:", ventaData);

        // 6. Enviar al backend
        const response = await fetch("http://localhost:4000/ventas/api/ventas", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(ventaData)
        });

        // 7. Procesar respuesta
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `Error HTTP: ${response.status}`);
        }

        const result = await response.json();
        
        // 8. √âxito - limpiar y notificar
        alert(`‚úÖ Venta registrada exitosamente\nC√≥digo: ${result.codigo || 'N/A'}`);
        
        // Resetear el formulario
        productos = [];
        document.getElementById("tablaProductos").innerHTML = "";
        
        // Actualizar c√≥digo de venta si viene en la respuesta
        if (result.codigo) {
            document.getElementById("codigoVenta").value = result.codigo;
            localStorage.setItem("ultimaVenta", result.codigo);
        }

    } catch (error) {
        console.error("Error en el proceso:", error);
        alert(`‚ùå Error al registrar venta:\n${error.message}`);
    }
});


/*
document.getElementById("guardarVenta").addEventListener("click", async function () {
    if (productos.length === 0) {
        alert("No se han agregado productos.");
        return;
    }

    // Convertir strings a n√∫meros donde sea necesario
    const detallesVenta = productos.map(p => ({
        codigo_producto: p.codigo_producto,
        cantidad: Number(p.cantidad),
        precio_unitario: Number(p.precio_venta), // Cambiar nombre a precio_unitario
        metodo_pago: p.metodo_pago,
        sector: p.sector
    }));

    const ventaData = {
        // No enviar codigo_venta ya que es autoincremental
        codigo_empleado: "CL123", // Cambiar nombre a codigo_cliente
        total_venta: detallesVenta.reduce((acc, p) => acc + (p.cantidad * p.precio_unitario), 0),
        detalles_venta: detallesVenta
    };

    console.log("Enviando datos:", ventaData);

    // Quitar la barra final del endpoint
    const response = await fetch("http://localhost:4000/ventas/api/ventas", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(ventaData)
    });

    const data = await response.json();

    if (data.success) {
        alert("Venta registrada correctamente.");
        productos = [];
        document.getElementById("tablaProductos").innerHTML = "";
        localStorage.setItem("codigoVenta", ventaData.codigo_venta + 1); // Incrementar para la siguiente venta
    } else {
        alert("Error al registrar la venta: " + data.message);
    }
});
*/
    fetch("http://localhost:4000/ventas/api/ventas/")
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log(data);  // Aqu√≠ deber√≠as ver el JSON
            // Aqu√≠ maneja los datos obtenidos (como actualizar la UI o almacenar los datos)
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });


    // Obtener los datos del empleado logueado
    fetch('/api/empleados')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const empleado = data.empleado; // Obtiene los datos del empleado
                // Asigna el nombre y apellido del empleado al input de texto
                const empleadoInput = document.getElementById('empleado');
                empleadoInput.value = `${empleado.Nombre} ${empleado.Apellido}`;
            } else {
                console.log(data.message);  // Si no est√° autenticado, muestra el mensaje
            }
        })
        .catch(error => console.error('Error al obtener datos del empleado:', error));

    // Cargar los sectores
    async function cargarSectores() {
        try {
            const response = await fetch("http://localhost:4000/productos/api/productos");
            const data = await response.json();

            if (data.success) {
                const sectoresUnicos = [...new Set(data.data.map(producto => producto.Sector))]; // Obtener sectores √∫nicos
                const selectSector = document.getElementById("sector");

                selectSector.innerHTML = `<option value="" disabled selected>Seleccione un sector</option>`; // Limpiar select

                sectoresUnicos.forEach(sector => {
                    const option = document.createElement("option");
                    option.value = sector;
                    option.textContent = sector;
                    selectSector.appendChild(option);
                });

                console.log("Sectores cargados:", sectoresUnicos);
            }
        } catch (error) {
            console.error("Error al cargar sectores:", error);
        }
    }

    // Llamar a la funci√≥n cuando cargue la p√°gina
    document.addEventListener("DOMContentLoaded", cargarSectores);

    // Cargar productos por sector
    async function cargarProductosPorSector(sectorSeleccionado) {
        try {
            const response = await fetch("http://localhost:4000/productos/api/productos");
            const data = await response.json();

            if (data.success) {
                const productosFiltrados = data.data.filter(producto => producto.Sector === sectorSeleccionado);
                const selectProducto = document.getElementById("nombreProducto");

                selectProducto.innerHTML = `<option value="" disabled selected>Seleccione un producto</option>`;

                productosFiltrados.forEach(producto => {
                    const option = document.createElement("option");
                    option.value = producto.Cod_Producto;
                    option.textContent = producto.Nombre;
                    option.dataset.precio = producto.Precio_Compra;  // Guardamos el precio en el atributo `data`
                    selectProducto.appendChild(option);
                });

                console.log(`Productos en el sector "${sectorSeleccionado}":`, productosFiltrados);
            }
        } catch (error) {
            console.error("Error al cargar productos por sector:", error);
        }
    }

    // Evento para detectar cambio en el select de productos
    document.getElementById("nombreProducto").addEventListener("change", function () {
        const productoSeleccionado = this.selectedOptions[0];  // Obtener la opci√≥n seleccionada
        const precio = productoSeleccionado.dataset.precio;  // Obtener el precio desde el atributo `data`

        // Multiplicar el precio por 1.25
        const precioConIVA = (precio * 1.25).toFixed(2);  // Multiplicamos y redondeamos a 2 decimales

        // Actualizar el campo de precio
        document.getElementById("precio").value = precioConIVA;
    });

    // Detectar cambio en el select de sectores
    document.getElementById("sector").addEventListener("change", function () {
        const sectorSeleccionado = this.value;
        cargarProductosPorSector(sectorSeleccionado);
    });


</script>