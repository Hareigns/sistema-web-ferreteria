<link rel="stylesheet" href="/styles/ventas.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-5 py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card">
                <div class="card p-4" style="background-color: #ffffff8f; border-light;">
                    <h3 class="text-center" style="color: #000000;">Ventas</h3>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="codigoVenta" class="form-label">C√≥digo de Venta:</label>
                            <input type="text" id="codigoVenta" class="form-control" placeholder="C√≥digo de Venta"
                                disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="sector" class="form-label">Sector:</label>
                            <select id="sector" name="sector" class="form-select" required>
                                <option value="" disabled selected>Seleccione un sector</option>
                                {{#each sectores}}
                                <option value="{{this}}">{{this}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="empleado" class="form-label">Empleado:</label>
                            <input type="text" id="empleado" class="form-control" placeholder="Empleado:" disabled />
                        </div>
                        <div class="col-md-4">
                            <label for="nombreProducto" class="form-label">Producto:</label>
                            <select id="nombreProducto" class="form-select">
                                <option value="" disabled selected>Seleccione un producto</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="cantidad" class="form-label">Cantidad:</label>
                            <input type="number" id="cantidad" class="form-control" placeholder="Cantidad" min="1"
                                required>
                        </div>
                        <div class="col-md-2">
                            <label for="precio" class="form-label">Precio:</label>
                            <input type="text" id="precio" class="form-control" placeholder="Precio" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="metodoPago" class="form-label">M√©todo de Pago:</label>
                            <select id="metodoPago" class="form-select">
                                <option value="" disabled selected>Seleccione M√©todo de Pago</option>
                                <option>Efectivo</option>
                                <option>Tarjeta</option>
                                <option>Transferencia</option>
                            </select>
                        </div>
                    </div>

                    <div class="text-center mt-3">
                        <button id="agregarProducto" class="btn btn-custom btn-custom-primary">‚ûï Agregar M√°s</button>
                    </div>

                    <div class="mt-4">
                        <h5 class="text-center"
                            style="background-color: #80c7e0; color: #fff; padding: 8px; border-radius: 5px;">Lista de
                            Productos
                        </h5>
                        <table class="table table-light table-striped text-center">
                            <thead class="table-secondary">
                                <tr>
                                    <th>Producto</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                    <th>M√©todo de Pago</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody id="tablaProductos">
                                <!-- Aqu√≠ se agregar√°n din√°micamente los productos -->
                            </tbody>
                        </table>
                    </div>
                    <div class="row mt-4">
                        <div class="col-md-4">
                            <label for="subtotal" class="form-label">Subtotal:</label>
                            <input type="text" id="subtotal" class="form-control" placeholder="Subtotal" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="iva" class="form-label">IVA (15%):</label>
                            <input type="text" id="iva" class="form-control" placeholder="IVA" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="total" class="form-label">Total:</label>
                            <input type="text" id="total" class="form-control" placeholder="Total" disabled>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <button id="guardarVenta" class="btn btn-custom btn-custom-success">üíæ Guardar Venta</button>
                    </div>

                    <div class="mt-5">
                        <h5 class="text-center"
                            style="background-color: #007bff; color: #fff; padding: 8px; border-radius: 5px;">
                            Historial de Ventas
                        </h5>
                        <div class="card p-3 table-responsive" style="border: 1px solid #ddd;">
                            <table class="table align-middle mb-0 bg-white table-striped text-center">
                                <thead class="bg-light">
                                    <tr>
                                        <th>C√≥digo de Venta</th>
                                        <th>C√≥digo de Producto</th>
                                        <th>Cantidad</th>
                                        <th>Precio</th>
                                        <th>M√©todo de Pago</th>
                                        <th>Sector</th>
                                        <th>Fecha</th>
                                    </tr>
                                </thead>
                                <tbody id="tablaHistorialVentas">
                                    <!-- Se llenar√° din√°micamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let productos = [];

    // Modificar el evento agregarProducto para usar el nombre:
    document.getElementById("agregarProducto").addEventListener("click", function () {
        let selectProducto = document.getElementById("nombreProducto");
        let selectedOption = selectProducto.options[selectProducto.selectedIndex];

        let codigo = selectProducto.value;
        let nombre = selectedOption.dataset.nombre; // Obtenemos el nombre del dataset
        let cantidad = document.getElementById("cantidad").value;
        let precio = document.getElementById("precio").value;
        let metodoPago = document.getElementById("metodoPago").value;
        let sector = document.getElementById("sector").value;

        if (codigo === "" || cantidad === "" || precio === "" || metodoPago === "" || sector === "") {
            Swal.fire({
                icon: 'warning',
                title: 'Campos incompletos',
                text: 'Por favor, complete todos los campos antes de agregar.'
            });
            return;
        }

        productos.push({
            codigo_producto: codigo,
            nombre_producto: nombre, // Guardamos el nombre tambi√©n
            cantidad: cantidad,
            precio_venta: precio,
            metodo_pago: metodoPago,
            sector: sector
        });

        let tabla = document.getElementById("tablaProductos");
        let fila = document.createElement("tr");
        fila.dataset.codigo = codigo; // Guardamos el c√≥digo como atributo de la fila

        fila.innerHTML = `
    <td>${nombre}</td>
    <td class="cantidad-cell">${cantidad}</td>
    <td class="precio-cell">${precio}</td>
    <td class="metodo-pago-cell">${metodoPago}</td>
    <td>
        <button class="btn btn-warning btn-sm me-1 editar">‚úèÔ∏è Editar</button>
        <button class="btn btn-danger btn-sm eliminar">‚ùå Eliminar</button>
    </td>
`;

        tabla.appendChild(fila);

        // Limpiar campos
        document.getElementById("nombreProducto").value = "";
        document.getElementById("cantidad").value = "";
        document.getElementById("precio").value = "";
        document.getElementById("metodoPago").value = "";

        fila.querySelector(".editar").addEventListener("click", function () {
            editarProducto(fila, codigo);
        });

        actualizarTotales();

        fila.querySelector(".eliminar").addEventListener("click", function () {
            Swal.fire({
                title: '¬øEst√° seguro?',
                text: "Este producto ser√° eliminado de la lista.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'S√≠, eliminar'
            }).then((result) => {
                if (result.isConfirmed) {
                    productos = productos.filter(p => p.codigo_producto !== codigo);
                    fila.remove();
                    Swal.fire({
                        icon: 'success',
                        title: 'Eliminado',
                        text: 'El producto ha sido eliminado.'
                    });
                }
            });
        });


        // Funci√≥n para editar producto
        function editarProducto(fila, codigo) {
            // Obtener los valores actuales
            const cantidadCell = fila.querySelector(".cantidad-cell");
            const precioCell = fila.querySelector(".precio-cell");
            const cantidadActual = cantidadCell.textContent;
            const precioActual = precioCell.textContent;

            // Convertir celdas en campos editables
            cantidadCell.innerHTML = `<input type="number" class="form-control form-control-sm edit-cantidad" value="${cantidadActual}" min="1">`;
            precioCell.innerHTML = `<input type="number" class="form-control form-control-sm edit-precio" value="${precioActual}" min="0.01" step="0.01">`;

            // Cambiar bot√≥n de editar a guardar
            const btnEditar = fila.querySelector(".editar");
            btnEditar.innerHTML = "üíæ Guardar";
            btnEditar.classList.remove("btn-warning");
            btnEditar.classList.add("btn-success");

            // Remover el evento anterior y agregar el de guardar
            btnEditar.replaceWith(btnEditar.cloneNode(true));
            fila.querySelector(".editar").addEventListener("click", function () {
                guardarEdicion(fila, codigo);
            });
        }


        // Funci√≥n para editar producto
        function editarProducto(fila, codigo) {
            // Obtener los valores actuales
            const cantidadCell = fila.querySelector(".cantidad-cell");
            const precioCell = fila.querySelector(".precio-cell");
            const metodoPagoCell = fila.querySelector(".metodo-pago-cell");
            const cantidadActual = cantidadCell.textContent;
            const precioActual = precioCell.textContent;
            const metodoPagoActual = metodoPagoCell.textContent.trim();

            // Convertir celdas en campos editables
            cantidadCell.innerHTML = `<input type="number" class="form-control form-control-sm edit-cantidad" value="${cantidadActual}" min="1">`;
            precioCell.innerHTML = `<input type="number" class="form-control form-control-sm edit-precio" value="${precioActual}" min="0.01" step="0.01">`;

            // Crear select para m√©todo de pago
            const metodosPago = ['Efectivo', 'Tarjeta', 'Transferencia'];
            let options = metodosPago.map(mp =>
                `<option value="${mp}" ${mp === metodoPagoActual ? 'selected' : ''}>${mp}</option>`
            ).join('');

            metodoPagoCell.innerHTML = `
        <select class="form-select form-select-sm edit-metodo-pago">
            ${options}
        </select>
    `;

            // Cambiar bot√≥n de editar a guardar
            const btnEditar = fila.querySelector(".editar");
            btnEditar.innerHTML = "üíæ Guardar";
            btnEditar.classList.remove("btn-warning");
            btnEditar.classList.add("btn-success");

            // Remover el evento anterior y agregar el de guardar
            btnEditar.replaceWith(btnEditar.cloneNode(true));
            fila.querySelector(".editar").addEventListener("click", function () {
                guardarEdicion(fila, codigo);
            });
        }

        // Funci√≥n para guardar los cambios
        function guardarEdicion(fila, codigo) {
            const nuevaCantidad = fila.querySelector(".edit-cantidad").value;
            const nuevoPrecio = fila.querySelector(".edit-precio").value;
            const nuevoMetodoPago = fila.querySelector(".edit-metodo-pago").value;

            // Validar los valores
            if (!nuevaCantidad || nuevaCantidad < 1 || !nuevoPrecio || nuevoPrecio <= 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Valores inv√°lidos',
                    text: 'La cantidad debe ser al menos 1 y el precio debe ser mayor a 0'
                });
                return;
            }

            // Actualizar la fila
            fila.querySelector(".cantidad-cell").textContent = nuevaCantidad;
            fila.querySelector(".precio-cell").textContent = nuevoPrecio;
            fila.querySelector(".metodo-pago-cell").textContent = nuevoMetodoPago;

            // Actualizar el array de productos
            const productoIndex = productos.findIndex(p => p.codigo_producto === codigo);
            if (productoIndex !== -1) {
                productos[productoIndex].cantidad = nuevaCantidad;
                productos[productoIndex].precio_venta = nuevoPrecio;
                productos[productoIndex].metodo_pago = nuevoMetodoPago;
            }

            // Restaurar bot√≥n de editar
            const btnGuardar = fila.querySelector(".editar");
            btnGuardar.innerHTML = "‚úèÔ∏è Editar";
            btnGuardar.classList.remove("btn-success");
            btnGuardar.classList.add("btn-warning");

            // Volver a asignar el evento de editar
            btnGuardar.replaceWith(btnGuardar.cloneNode(true));
            fila.querySelector(".editar").addEventListener("click", function () {
                editarProducto(fila, codigo);
            });

            // Actualizar totales
            actualizarTotales();
        }
    });



    document.getElementById("guardarVenta").addEventListener("click", async function () {
        if (productos.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Sin productos',
                text: 'No se han agregado productos.'
            });
            return;
        }

        try {
            // Obtener datos del empleado
            const empleadoResponse = await fetch('/empleados/api/empleados');
            if (!empleadoResponse.ok) throw new Error('Error al obtener datos del empleado');

            const empleadoData = await empleadoResponse.json();
            const empleadoLogueado = empleadoData.data[0];
            const codigoEmpleado = empleadoLogueado.Cod_Empleado;

            if (typeof codigoEmpleado !== 'number') {
                throw new Error('El c√≥digo de empleado debe ser num√©rico');
            }

            // Calcular total
            const detallesVenta = productos.map(producto => ({
                codigo_producto: producto.codigo_producto,
                cantidad: parseInt(producto.cantidad, 10),
                precio_unitario: parseFloat(producto.precio_venta),
                metodo_pago: producto.metodo_pago,
                sector: producto.sector
            }));

            const totalVenta = detallesVenta.reduce((total, producto) => {
                return total + (producto.cantidad * producto.precio_unitario);
            }, 0).toFixed(2);

            const codigoVenta = document.getElementById("codigoVenta").value;

            // Enviar los datos de la venta
            const response = await fetch("http://localhost:4000/ventas/api/ventas", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    codigo_empleado: codigoEmpleado,
                    detalles_venta: detallesVenta,
                    estado_venta: 'Completada'  // Puedes definir esto seg√∫n sea necesario
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `Error HTTP: ${response.status}`);
            }

            const result = await response.json();

            // Mostrar SweetAlert con el c√≥digo de venta
            Swal.fire({
                icon: 'success',
                title: 'Venta registrada',
                text: `‚úÖ Venta registrada exitosamente`  // Aseg√∫rate de que el c√≥digo de venta se obtenga correctamente
            });

            // Resetear la venta
            productos = [];
            document.getElementById("tablaProductos").innerHTML = "";

            if (codigoVenta) {
                localStorage.setItem("ultimaVenta", result.codigo_venta);  // Usa result.codigo_venta
                cargarCodigoVenta();
                cargarHistorialVentas();
                actualizarTotales();
            }

        } catch (error) {
            console.error("Error en el proceso:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error al registrar venta',
                text: error.message
            });
        }
    });


    fetch("http://localhost:4000/ventas/api/ventas/")
        .then(response => response.json())
        .then(data => {
            console.log(data);
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });

    fetch('/api/empleados')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const empleado = data.empleado;
                const empleadoInput = document.getElementById('empleado');
                empleadoInput.value = `${empleado.Nombre} ${empleado.Apellido}`;
            } else {
                console.log(data.message);
            }
        })
        .catch(error => console.error('Error al obtener datos del empleado:', error));

    function actualizarTotales() {
        let subtotal = 0;

        // Calcular subtotal sumando todos los productos
        productos.forEach(producto => {
            subtotal += parseFloat(producto.precio_venta) * parseInt(producto.cantidad);
        });

        const iva = subtotal * 0.15;
        const total = subtotal + iva;

        // Actualizar los campos
        document.getElementById("subtotal").value = subtotal.toFixed(2);
        document.getElementById("iva").value = iva.toFixed(2);
        document.getElementById("total").value = total.toFixed(2);
    }

    function cargarHistorialVentas() {
        // Primero obtenemos todos los productos
        fetch('http://localhost:4000/productos/api/productos/')
            .then(response => response.json())
            .then(productosData => {
                if (!productosData.success) throw new Error('Error al cargar productos');

                const productos = productosData.data;
                const mapaProductos = {};
                productos.forEach(p => {
                    mapaProductos[p.Cod_Producto] = p.Nombre;
                });

                // Ahora obtenemos el historial de ventas
                fetch('http://localhost:4000/ventas/api/ventas/')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const ventas = data.data;
                            const tbody = document.getElementById('tablaHistorialVentas');
                            tbody.innerHTML = '';

                            ventas.forEach(venta => {
                                const fecha = new Date(venta.Fecha_Salida);
                                const fechaFormateada = `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear()}`;
                                const nombreProducto = mapaProductos[venta.Cod_Producto] || 'Desconocido';

                                const tr = document.createElement('tr');
                                tr.innerHTML = `
                <td>${venta.Cod_Venta}</td>
                <td>${nombreProducto}</td>
                <td>${venta.Cantidad_Venta}</td>
                <td>$${venta.Precio_Venta.toFixed(2)}</td>
                <td>${venta.Metodo_Pago}</td>
                <td>${venta.Sector}</td>
                <td>${fechaFormateada}</td>
              `;
                                tbody.appendChild(tr);
                            });
                        } else {
                            console.error('Error al cargar ventas:', data);
                        }
                    })
                    .catch(err => console.error('Error al cargar ventas:', err));
            })
            .catch(err => console.error('Error al cargar productos:', err));
    }

    // Ejecutar al cargar la p√°gina
    document.addEventListener('DOMContentLoaded', cargarHistorialVentas);

    async function cargarCodigoVenta() {
        try {
            const response = await fetch('http://localhost:4000/ventas/api/ventas/');
            const data = await response.json();

            if (data.success && Array.isArray(data.data)) {
                const ventas = data.data;

                // Buscar el c√≥digo m√°ximo (asumiendo que la clave es Cod_Venta)
                const ultimoCodigo = ventas.reduce((max, venta) => {
                    return venta.Cod_Venta > max ? venta.Cod_Venta : max;
                }, 0);

                const nuevoCodigo = ultimoCodigo + 1;
                document.getElementById("codigoVenta").value = nuevoCodigo;
                localStorage.setItem("codigoVenta", nuevoCodigo); // Si deseas guardarlo
            } else {
                throw new Error("No se pudo obtener la lista de ventas");
            }
        } catch (error) {
            console.error("Error al cargar el c√≥digo de venta:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No se pudo obtener el c√≥digo de venta desde el servidor'
            });
        }
    }

    async function cargarSectores() {
        try {
            const response = await fetch("http://localhost:4000/productos/api/productos");
            const data = await response.json();

            if (data.success) {
                const sectoresUnicos = [...new Set(data.data.map(producto => producto.Sector))];
                const selectSector = document.getElementById("sector");

                selectSector.innerHTML = `<option value="" disabled selected>Seleccione un sector</option>`;
                sectoresUnicos.forEach(sector => {
                    const option = document.createElement("option");
                    option.value = sector;
                    option.textContent = sector;
                    selectSector.appendChild(option);
                });
            }
        } catch (error) {
            console.error("Error al cargar sectores:", error);
        }
    }

    // Llamar al cargar la p√°gina
    document.addEventListener("DOMContentLoaded", () => {
        cargarCodigoVenta();
        cargarSectores(); // Esto ya lo tienes
        actualizarTotales();
    });

    // En la funci√≥n cargarProductosPorSector, modificar la creaci√≥n de options para guardar tambi√©n el nombre:
    async function cargarProductosPorSector(sectorSeleccionado) {
        try {
            const response = await fetch("http://localhost:4000/productos/api/productos");
            const data = await response.json();

            if (data.success) {
                const productosFiltrados = data.data.filter(producto => producto.Sector === sectorSeleccionado);
                const selectProducto = document.getElementById("nombreProducto");

                selectProducto.innerHTML = `<option value="" disabled selected>Seleccione un producto</option>`;

                productosFiltrados.forEach(producto => {
                    const option = document.createElement("option");
                    option.value = producto.Cod_Producto;
                    option.textContent = producto.Nombre;
                    option.dataset.precio = producto.Precio_Compra;
                    option.dataset.nombre = producto.Nombre; // Guardamos el nombre aqu√≠
                    selectProducto.appendChild(option);
                });
            }
        } catch (error) {
            console.error("Error al cargar productos por sector:", error);
        }
    }

    document.getElementById("nombreProducto").addEventListener("change", function () {
        const productoSeleccionado = this.selectedOptions[0];
        const precio = productoSeleccionado.dataset.precio;
        const precioConIVA = (precio * 1.25).toFixed(2);
        document.getElementById("precio").value = precioConIVA;
    });

    document.getElementById("sector").addEventListener("change", function () {
        const sectorSeleccionado = this.value;
        cargarProductosPorSector(sectorSeleccionado);
    });



</script>