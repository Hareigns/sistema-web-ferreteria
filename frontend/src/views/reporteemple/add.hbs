<link rel="stylesheet" href="/styles/reporte.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg p-4">
                <div class="card-body">
                    <!-- Formulario para generar reportes -->
                    <div class="card-header bg-info text-white">
                        <h2 class="h5 mb-0">Generar Reportes</h2>
                    </div>
                </div>

                <!-- Sección de Reportes -->
                <div class="row">
                    <!-- Reporte de Ventas -->
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-primary text-white">
                                <h2 class="h5 mb-0">Reporte de Ventas</h2>
                            </div>
                            <div class="card-body pb-2">
                                <div class="list-group list-group-flush">
                                    <div class="list-group-item">
                                        <div class="form-check me-3">
                                            <input class="form-check-input" type="radio" name="filtroVentas" id="diario"
                                                checked>
                                            <label class="form-check-label" for="diario">Diario</label>
                                        </div>
                                        <div class="mt-2" id="fechaDiario">
                                            <label for="fechaDiarioInput" class="form-label small">Seleccione el
                                                día:</label>
                                            <input type="date" class="form-control form-control-sm"
                                                id="fechaDiarioInput">
                                        </div>
                                    </div>
                                    <div class="list-group-item">
                                        <div class="form-check me-3">
                                            <input class="form-check-input" type="radio" name="filtroVentas"
                                                id="semanal">
                                            <label class="form-check-label" for="semanal">Semanal</label>
                                        </div>
                                        <div class="mt-2 d-none" id="fechaSemanal">
                                            <label for="fechaSemanalInput" class="form-label small">Seleccione la
                                                semana:</label>
                                            <input type="week" class="form-control form-control-sm"
                                                id="fechaSemanalInput">
                                        </div>
                                    </div>
                                    <div class="list-group-item">
                                        <div class="form-check me-3">
                                            <input class="form-check-input" type="radio" name="filtroVentas"
                                                id="mensual">
                                            <label class="form-check-label" for="mensual">Mensual</label>
                                        </div>
                                        <div class="mt-2 d-none" id="fechaMensual">
                                            <label for="fechaMensualInput" class="form-label small">Seleccione el
                                                mes:</label>
                                            <input type="month" class="form-control form-control-sm"
                                                id="fechaMensualInput">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent py-2">
                                <button id="exportarVentas" class="btn btn-sm btn-outline-primary w-100">
                                    <i class="fas fa-download me-1"></i>Exportar selección
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Reporte Combinado de Productos -->
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-success text-white">
                                <h2 class="h5 mb-0">Reporte de Productos</h2>
                            </div>

                            <div class="card-body pb-2"> <!-- Reducido padding inferior -->
                                <!-- Sección de Productos Vendidos -->
                                <h5 class="text-center mb-3">Productos Vendidos</h5>
                                <div class="list-group list-group-flush">
                                    <div class="list-group-item d-flex align-items-center">
                                        <span class="badge bg-success me-3">+</span>
                                        <span>Producto + vendido</span>
                                        <span class="badge bg-primary ms-auto">Top 5</span>
                                    </div>
                                    <div class="list-group-item d-flex align-items-center">
                                        <span class="badge bg-danger me-3">-</span>
                                        <span>Producto - vendido</span>
                                        <span class="badge bg-primary ms-auto">Últimos 5</span>
                                    </div>
                                    <div class="list-group-item d-flex align-items-center">
                                        <span class="badge bg-warning me-3">○</span>
                                        <span>Producto no vendido</span>
                                        <span class="badge bg-primary ms-auto">Sin ventas</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent py-2">
                                <button id="exportarProductos" class="btn btn-sm btn-outline-success w-100">
                                    <i class="bi bi-file-earmark-excel me-1"></i> Exportar Vendidos
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    // Configuración centralizada
    const reportConfig = {
        ventas: {
            endpoint: '/reportes/ventas',
            filters: ['diario', 'semanal', 'mensual']
        },
        productos: {
            endpoint: '/reportes/productos'
        }
    };

    // Utilidades comunes
    const reportUtils = {
        showAlert: async (icon, title, text, confirmText = 'Aceptar') => {
            return Swal.fire({ icon, title, text, confirmButtonText: confirmText });
        },

        handleError: async (error, context = '') => {
            console.error(`Error en ${context}:`, error);
            await reportUtils.showAlert(
                'error',
                'Error',
                error.message || 'Ocurrió un error inesperado',
                'Cerrar'
            );
        },

        fetchData: async (url, method = 'GET', body = null) => {
            const options = {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json' // Asegura que esperamos JSON
                },
                credentials: 'include' // Importante para incluir cookies
            };

            if (body) options.body = JSON.stringify(body);

            try {
                const res = await fetch(url, options);

                // Verificar el tipo de contenido
                const contentType = res.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await res.text();
                    throw new Error(`Respuesta no JSON recibida: ${text.substring(0, 100)}...`);
                }

                const data = await res.json();

                if (!res.ok) {
                    throw new Error(data.message || 'Error en la solicitud');
                }

                return data;
            } catch (error) {
                console.error('Error en fetchData:', error);
                throw error;
            }
        }
    };

    // Funcionalidad de reportes
    const reportHandlers = {
        ventas: {
            getSelectedFilter: () => {
                const selectedRadio = document.querySelector('input[name="filtroVentas"]:checked');
                if (!selectedRadio) return null;

                return {
                    tipo: selectedRadio.id,
                    fecha: selectedRadio.id === 'diario' ? document.getElementById('fechaDiarioInput').value :
                        selectedRadio.id === 'semanal' ? document.getElementById('fechaSemanalInput').value :
                            document.getElementById('fechaMensualInput').value
                };
            },

            exportToExcel: async (data, filter) => {
                try {
                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Reporte Ventas');

                    // Función para formatear la fecha
                    const formatDate = (dateString) => {
                        const parts = dateString.split('-');
                        if (parts.length === 3) {
                            return `${parts[2]}/${parts[1]}/${parts[0]}`;
                        }
                        const now = new Date();
                        return `${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()}`;
                    };

                    // Preparar datos con el formato de fecha
                    const processedData = data.map(item => {
                        return {
                            Cod_Venta: item.Cod_Venta,
                            Cod_Producto: item.Cod_Producto,
                            Nombre_Producto: item.Nombre_Producto,
                            Cantidad_Venta: item.Cantidad_Venta,
                            Monto_Total: Number(parseFloat(item.Monto_Total).toFixed(2)),
                            Fecha_Venta: formatDate(item.Fecha_Venta)
                        };
                    });

                    // Configurar columnas
                    worksheet.columns = [
                        { header: 'Código Venta', key: 'Cod_Venta', width: 15 },
                        { header: 'Código Producto', key: 'Cod_Producto', width: 15 },
                        { header: 'Nombre Producto', key: 'Nombre_Producto', width: 30 },
                        { header: 'Cantidad Vendida', key: 'Cantidad_Venta', width: 18 },
                        { header: 'Monto Total', key: 'Monto_Total', width: 15 },
                        {
                            header: 'Fecha Venta',
                            key: 'Fecha_Venta',
                            width: 15,
                            style: { numFmt: 'd/m/yyyy' }
                        }
                    ];

                    // Aplicar estilo a los encabezados
                    const headerRow = worksheet.getRow(1);
                    headerRow.eachCell(cell => {
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FF4F81BD' }
                        };
                        cell.font = {
                            bold: true,
                            color: { argb: 'FFFFFFFF' },
                            size: 12
                        };
                        cell.border = {
                            top: { style: 'thin' },
                            left: { style: 'thin' },
                            bottom: { style: 'thin' },
                            right: { style: 'thin' }
                        };
                        cell.alignment = { vertical: 'middle', horizontal: 'center' };
                    });

                    // Agregar datos
                    processedData.forEach(item => {
                        const row = worksheet.addRow([
                            item.Cod_Venta,
                            item.Cod_Producto,
                            item.Nombre_Producto,
                            item.Cantidad_Venta,
                            item.Monto_Total,
                            item.Fecha_Venta
                        ]);

                        const fechaCell = row.getCell(6);
                        fechaCell.numFmt = 'd/m/yyyy';

                        row.eachCell(cell => {
                            cell.border = {
                                top: { style: 'thin' },
                                left: { style: 'thin' },
                                bottom: { style: 'thin' },
                                right: { style: 'thin' }
                            };
                        });
                    });

                    // Calcular totales
                    const totalVentas = processedData.reduce((sum, item) => sum + item.Monto_Total, 0);
                    const totalCantidad = processedData.reduce((sum, item) => sum + item.Cantidad_Venta, 0);

                    const totalRow = worksheet.addRow([
                        '',
                        '',
                        'Totales',
                        totalCantidad,
                        totalVentas,
                        ''
                    ]);

                    totalRow.eachCell((cell, colNumber) => {
                        cell.font = { bold: true };
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FF4F81BD' }
                        };
                        cell.border = {
                            top: { style: 'thin' },
                            left: { style: 'thin' },
                            bottom: { style: 'thin' },
                            right: { style: 'thin' }
                        };
                        if (colNumber === 5) cell.numFmt = '#,##0.00';
                    });

                    // Autoajustar columnas
                    worksheet.columns.forEach(column => {
                        let maxLength = 0;
                        column.eachCell({ includeEmpty: true }, cell => {
                            let columnLength = cell.value ? cell.value.toString().length : 0;
                            if (columnLength > maxLength) {
                                maxLength = columnLength;
                            }
                        });
                        column.width = Math.min(Math.max(maxLength + 2, column.width), 30);
                    });

                    // Descargar archivo
                    const buffer = await workbook.xlsx.writeBuffer();
                    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `reporte_ventas_${filter}.xlsx`;
                    a.click();
                    URL.revokeObjectURL(url);

                } catch (error) {
                    console.error('Error detallado al exportar:', error);
                    throw new Error(`Error al exportar Excel: ${error.message}`);
                }
            },

            generateReport: async () => {
                try {
                    const filterInfo = reportHandlers.ventas.getSelectedFilter();

                    if (!filterInfo || !filterInfo.fecha) {
                        await reportUtils.showAlert('warning', 'Datos requeridos', 'Por favor selecciona un filtro y una fecha');
                        return;
                    }

                    const data = await reportUtils.fetchData(
                        reportConfig.ventas.endpoint,
                        'POST',
                        {
                            filtro: filterInfo.tipo,
                            fecha: filterInfo.fecha
                        }
                    );

                    if (!Array.isArray(data)) {
                        throw new Error('Formato de respuesta inválido');
                    }

                    if (data.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', 'No hay ventas registradas para el período seleccionado.');
                        return;
                    }

                    await reportHandlers.ventas.exportToExcel(data, filterInfo.tipo);
                    await reportUtils.showAlert('success', '¡Reporte exportado!', 'El archivo Excel ha sido descargado exitosamente.');

                } catch (error) {
                    await reportUtils.handleError(error, 'generación de reporte de ventas');
                }
            }
        },

        productos: {
            exportToExcel: async (data) => {
                try {
                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Productos por Empleado');

                    // Procesar datos para Excel
                    const processedData = [
                        ...data.topProducts,
                        ...data.worstProducts,
                        ...data.notSoldProducts
                    ].map(item => ({
                        'Código': item.Cod_Producto,
                        'Nombre': item.Nombre,
                        'Cantidad Vendida': item.CantidadVendida,
                        'Tipo': item.Tipo
                    }));

                    // Configurar columnas
                    worksheet.columns = [
                        { header: 'Código', key: 'Código', width: 15 },
                        { header: 'Nombre', key: 'Nombre', width: 30 },
                        { header: 'Cantidad Vendida', key: 'Cantidad Vendida', width: 15 },
                        { header: 'Tipo', key: 'Tipo', width: 15 }
                    ];

                    // Aplicar estilos
                    worksheet.getRow(1).eachCell(cell => {
                        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4F81BD' } };
                        cell.font = { bold: true, color: { argb: 'FFFFFFFF' } };
                        cell.alignment = { vertical: 'middle', horizontal: 'center' };
                    });

                    // Agregar datos
                    processedData.forEach(item => {
                        worksheet.addRow(item);
                    });

                    // Autoajustar columnas
                    worksheet.columns.forEach(column => {
                        column.width = Math.max(
                            column.header.length + 2,
                            ...processedData.map(item => item[column.key]?.toString().length || 0)
                        );
                    });

                    // Descargar archivo
                    const buffer = await workbook.xlsx.writeBuffer();
                    const now = new Date();
                    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `reporte_productos_empleado_${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.xlsx`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                } catch (error) {
                    throw new Error(`Error al exportar Excel: ${error.message}`);
                }
            },

            generateReport: async () => {
                try {
                    // Obtener el ID del empleado desde la sesión actual
                    const empleadoId = await obtenerIdEmpleado();

                    if (!empleadoId) {
                        await reportUtils.showAlert('warning', 'Datos requeridos', 'No se pudo identificar al empleado. Por favor inicie sesión nuevamente.');
                        return;
                    }

                    const response = await reportUtils.fetchData(
                        reportConfig.productos.endpoint,
                        'POST',
                        { empleadoId }
                    );

                    if (!response.success || !response.data) {
                        throw new Error('Respuesta del servidor inválida');
                    }

                    if (response.data.topProducts.length === 0 &&
                        response.data.worstProducts.length === 0 &&
                        response.data.notSoldProducts.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', 'No hay productos en el reporte para este empleado.');
                        return;
                    }

                    await reportHandlers.productos.exportToExcel(response.data);
                    await reportUtils.showAlert('success', '¡Reporte exportado!', 'El archivo Excel ha sido descargado exitosamente.');

                } catch (error) {
                    await reportUtils.handleError(error, 'generación de reporte de productos');
                }
            }
        }
    };

    // Nueva función para obtener el ID del empleado
    async function obtenerIdEmpleado() {
        try {
            const response = await fetch('/api/usuario/actual', {
                method: 'GET',
                credentials: 'include', // Cambiado de 'same-origin' a 'include'
                headers: {
                    'Accept': 'application/json'
                }
            });

            // Verificar si la respuesta es JSON
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                const text = await response.text();
                console.error('Respuesta no JSON:', text);
                throw new Error('El servidor no devolvió JSON');
            }

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || 'No se pudo obtener la información del usuario');
            }

            return data.Cod_Empleado;
        } catch (error) {
            console.error('Error al obtener ID del empleado:', error);
            return null;
        }
    }

    // Inicialización
    document.addEventListener('DOMContentLoaded', () => {
        // Asignar eventos
        document.getElementById('exportarVentas').addEventListener('click', reportHandlers.ventas.generateReport);
        document.getElementById('exportarProductos').addEventListener('click', reportHandlers.productos.generateReport);

        // Mostrar/ocultar campos de fecha según el filtro seleccionado
        document.querySelectorAll('input[name="filtroVentas"]').forEach(radio => {
            radio.addEventListener('change', function () {
                document.getElementById('fechaDiario').classList.add('d-none');
                document.getElementById('fechaSemanal').classList.add('d-none');
                document.getElementById('fechaMensual').classList.add('d-none');

                if (this.id === 'diario') {
                    document.getElementById('fechaDiario').classList.remove('d-none');
                } else if (this.id === 'semanal') {
                    document.getElementById('fechaSemanal').classList.remove('d-none');
                } else if (this.id === 'mensual') {
                    document.getElementById('fechaMensual').classList.remove('d-none');
                }
            });
        });

        // Inicializar con el filtro diario visible
        document.getElementById('fechaDiario').classList.remove('d-none');
    });
</script>

<script>
    // Solución definitiva para el dropdown del navbar
    document.addEventListener('DOMContentLoaded', function () {
        // Manejar clicks en el dropdown manualmente
        document.querySelectorAll('.dropdown-toggle').forEach(function (toggle) {
            toggle.addEventListener('click', function (e) {
                e.preventDefault();
                var menu = this.nextElementSibling;
                menu.classList.toggle('show');
            });
        });

        // Cerrar dropdown al hacer click fuera
        document.addEventListener('click', function (e) {
            if (!e.target.closest('.dropdown')) {
                document.querySelectorAll('.dropdown-menu.show').forEach(function (menu) {
                    menu.classList.remove('show');
                });
            }
        });

        // Reinicializar dropdowns después de DataTables
        if ($.fn.DataTable.isDataTable('#empleadosTable')) {
            $('#empleadosTable').on('init.dt', function () {
                new bootstrap.Dropdown(document.querySelector('.dropdown-toggle'));
            });
        }
    });
</script>