<link rel="stylesheet" href="/styles/bodega.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>


<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-12">
            <div class="card shadow-lg p-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Gestión de Inventario</h5>
                </div>
                <div class="card-body">
                    <!-- Controles de búsqueda (se mantienen igual) -->
                    <div class="row mb-3 search-controls">
                        <div class="col-md-12">
                            <div class="mb-2">
                                <label for="sector" class="form-label">Seleccionar Sector</label>
                                <select id="sector" name="sector" class="form-select" required>
                                    <option value="" disabled selected>Seleccione un sector</option>
                                    <option value="Herramientas manuales">Herramientas manuales</option>
                                    <option value="Herramientas eléctricas">Herramientas eléctricas</option>
                                    <option value="Materiales de construcción">Materiales de construcción</option>
                                    <option value="Pinturas o accesorios">Pinturas o accesorios</option>
                                    <option value="Tuberías y plomería">Tuberías y plomería</option>
                                    <option value="Electricidad e iluminación">Electricidad e iluminación</option>
                                    <option value="Seguridad industrial">Seguridad industrial</option>
                                    <option value="Productos de ferretería general">Productos de ferretería general
                                    </option>
                                </select>
                            </div>

                            <div class="mb-2">
                                <label for="periodo" class="form-label">Seleccionar Periodo</label>
                                <select id="periodo" name="periodo" class="form-select">
                                    <option value="todos" selected>Todos los registros</option>
                                    <option value="diario">Últimas 24 horas</option>
                                    <option value="semanal">Última semana</option>
                                    <option value="mensual">Último mes</option>
                                </select>
                            </div>

                            <div class="mb-2">
                                <label for="search-input" class="form-label">Buscar productos</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="search-input"
                                        placeholder="Ingrese nombre o código...">
                                    <button class="btn btn-primary" id="search-button">
                                        <i class="fas fa-search me-1"></i> Buscar
                                    </button>
                                    <button class="btn btn-secondary" id="reset-button">
                                        <i class="fas fa-undo me-1"></i> Restablecer
                                    </button>
                                </div>
                            </div>

                            <div id="search-error" class="text-danger mt-2" style="display: none;"></div>
                        </div>
                    </div>

                    <!-- Tabla mejorada -->
                    <div class="table-container">
                        <div class="table-wrapper">
                            <table id="dataTable" class="table table-hover table-bordered">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Código Producto</th>
                                        <th>Nombre</th>
                                        <th>Marca</th>
                                        <th>Fecha Entrada</th>
                                        <th>Cantidad</th>
                                        <th>Fecha Vencimiento</th>
                                        <th>Sector</th>
                                        <th>Estado</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Los datos se cargarán dinámicamente -->
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="8" class="summary-row">
                                            <div class="summary-container">
                                                <div class="summary-item">
                                                    <span class="summary-label">Total Productos</span>
                                                    <span class="summary-value" id="total-products">0</span>
                                                </div>
                                                <div class="summary-item">
                                                    <span class="summary-label">Bajo Stock (&lt;10)</span>
                                                    <span class="summary-value" id="low-stock">0</span>
                                                </div>
                                                <div class="summary-item">
                                                    <span class="summary-label">Próximos a vencer</span>
                                                    <span class="summary-value" id="expiring-products">0</span>
                                                </div>
                                                <div class="summary-item">
                                                    <span class="summary-label">Vencidos</span>
                                                    <span class="summary-value" id="expired-products">0</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let dataTable;

    $(document).ready(function () {
        initializeDataTable();

        $('#search-input').keypress(function (e) {
            if (e.which === 13) validateAndSearch();
        });

        $('#search-button').click(validateAndSearch);
    });

    function validateAndSearch() {
        const sector = $('#sector').val();
        const periodo = $('#periodo').val();
        const searchTerm = $('#search-input').val().trim();

        // Verificar que al menos un campo tenga valor
        if (!sector && !searchTerm && periodo === 'Todos los registros') {
            Swal.fire({
                icon: 'warning',
                title: 'Se requiere criterio',
                text: 'Por favor ingrese al menos un criterio de búsqueda (sector, período o término)',
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Entendido'
            });
            return;
        }

        searchData();
    }

    function initializeDataTable() {
        dataTable = $('#dataTable').DataTable({
            dom: 't',
            scrollX: false,
            scrollY: false,
            autoWidth: false,
            paging: false,
            searching: false,
            info: false,
            language: { emptyTable: "No hay datos disponibles" },
            columns: [
                {
                    data: 'Cod_Producto',
                    defaultContent: 'N/A',
                    render: function (data) {
                        return `<span class="cell-content">${data || 'N/A'}</span>`;
                    }
                },
                {
                    data: 'Nombre',
                    defaultContent: 'N/A',
                    render: function (data) {
                        if (!data) return 'N/A';
                        const content = data.length > 30 ?
                            `<span class="cell-content has-tooltip" title="${data}">${data.substring(0, 30)}...</span>` :
                            `<span class="cell-content">${data}</span>`;
                        return content;
                    }
                },
                {
                    data: 'Marca',
                    defaultContent: 'N/A',
                    render: function (data) {
                        return `<span class="cell-content">${data || 'N/A'}</span>`;
                    }
                },
                {
                    data: 'FechaEntrada',
                    render: function (data) {
                        return `<span class="cell-content">${formatDateForDisplay(data)}</span>`;
                    }
                },
                {
                    data: 'Cantidad',
                    render: function (data) {
                        return `<span class="cell-content">${data != null ? data : '0'}</span>`;
                    }
                },
                {
                    data: 'FechaVencimiento',
                    render: function (data) {
                        return `<span class="cell-content">${formatDateForDisplay(data)}</span>`;
                    }
                },
                {
                    data: 'Sector',
                    defaultContent: 'N/A',
                    render: function (data) {
                        if (!data) return 'N/A';
                        const content = data.length > 25 ?
                            `<span class="cell-content has-tooltip" title="${data}">${data.substring(0, 25)}...</span>` :
                            `<span class="cell-content">${data}</span>`;
                        return content;
                    }
                },
                {
                    data: null,
                    render: function (data, type, row) {
                        const expiryDate = parseDate(row.FechaVencimiento);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        const quantity = parseInt(row.Cantidad) || 0;

                        if (!expiryDate) {
                            return `<span class="text-secondary cell-content">
                                <i class="fas fa-question-circle me-1"></i>Sin fecha
                            </span>`;
                        }

                        const daysToExpiry = Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24));

                        if (daysToExpiry < 0) {
                            return `<span class="text-danger cell-content">
                                <i class="fas fa-times-circle me-1"></i>Vencido
                            </span>`;
                        } else if (daysToExpiry <= 30) {
                            return `<span class="text-danger cell-content">
                                <i class="fas fa-exclamation-triangle me-1"></i>Vence en ${daysToExpiry} días
                            </span>`;
                        } else if (quantity < 10) {
                            return `<span class="text-warning cell-content">
                                <i class="fas fa-exclamation-circle me-1"></i>Stock bajo
                            </span>`;
                        } else {
                            return `<span class="text-success cell-content">
                                <i class="fas fa-check-circle me-1"></i>OK
                            </span>`;
                        }
                    }
                }
            ],
            initComplete: updateSummary,
            drawCallback: function () {
                updateSummary();
                $('.highlight').css({
                    'background-color': '#ffeb3b',
                    'font-weight': 'bold'
                });
            }
        });
    }

    async function searchData() {
        const sector = $('#sector').val();
        const periodo = $('#periodo').val();
        const searchTerm = $('#search-input').val().trim();

        try {
            Swal.fire({
                title: 'Buscando datos',
                html: 'Por favor espere...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const params = new URLSearchParams();
            if (sector) params.append('sector', sector);
            if (periodo) params.append('periodo', periodo);
            if (searchTerm) params.append('search', searchTerm);

            const url = `/bodega/api/reporte?${params.toString()}`;
            const response = await fetch(url);

            if (!response.ok) {
                throw new Error(`Error ${response.status}: ${await response.text()}`);
            }

            const { success, data } = await response.json();

            if (!success) {
                throw new Error('Error en los datos recibidos');
            }

            dataTable.clear();
            if (data && data.length > 0) {
                data.forEach(item => {
                    dataTable.row.add({
                        Cod_Producto: item.Cod_Producto,
                        Nombre: item.Nombre,
                        Marca: item.Marca,
                        FechaEntrada: item.FechaEntrada,
                        Cantidad: item.Cantidad,
                        FechaVencimiento: item.FechaVencimiento,
                        Sector: item.Sector
                    });
                });
            }

            dataTable.draw();
            Swal.close();

            if (!data || data.length === 0) {
                Swal.fire({
                    icon: 'info',
                    title: 'Sin resultados',
                    text: 'No se encontraron productos con los criterios de búsqueda',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'Entendido'
                });
            }

        } catch (error) {
            console.error('Error al buscar datos:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error al buscar',
                text: 'Error al buscar datos: ' + error.message,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Entendido'
            });
        }
    }

    function updateSummary() {
        if (!dataTable) return;

        const today = new Date();
        today.setHours(0, 0, 0, 0);

        let total = 0;
        let expiring = 0;
        let lowStock = 0;
        let expired = 0;

        dataTable.rows().every(function () {
            const row = this.data();
            total++;

            const quantity = parseInt(row.Cantidad) || 0;
            if (quantity < 10) lowStock++;

            const expiryDate = parseDate(row.FechaVencimiento);
            if (expiryDate) {
                const daysToExpiry = Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24));

                if (daysToExpiry < 0) {
                    expired++;
                } else if (daysToExpiry <= 30) {
                    expiring++;
                }
            }
        });

        // Actualizar valores
        $('#total-products').text(total);
        $('#low-stock').text(lowStock);
        $('#expiring-products').text(expiring);
        $('#expired-products').text(expired);

        // Aplicar clases de alerta
        $('#low-stock').closest('.summary-item')
            .toggleClass('has-warning', lowStock > 0);

        $('#expired-products').closest('.summary-item')
            .toggleClass('has-alert', expired > 0);

        $('#expiring-products').closest('.summary-item')
            .toggleClass('has-warning', expiring > 0);
    }

    function parseDate(dateString) {
        if (!dateString || dateString === 'NULL' || dateString === null || dateString === 'N/A') {
            return null;
        }

        if (dateString instanceof Date) {
            return isNaN(dateString.getTime()) ? null : new Date(dateString);
        }

        const date = new Date(dateString);
        if (!isNaN(date.getTime())) {
            return date;
        }

        const parts = dateString.split('/');
        if (parts.length === 3) {
            const day = parseInt(parts[0], 10);
            const month = parseInt(parts[1], 10) - 1;
            const year = parseInt(parts[2], 10);
            const altDate = new Date(year, month, day);
            if (!isNaN(altDate.getTime())) {
                return altDate;
            }
        }

        return null;
    }

    function formatDateForDisplay(dateString) {
        const date = parseDate(dateString);
        if (!date) return 'N/A';

        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }


    // Función para restablecer los controles
    function resetSearchControls() {
        // Agregar clase de animación a los controles
        $('.search-controls select, .search-controls input').addClass('empty-filter');

        // Animación para limpiar
        setTimeout(() => {
            // Restablecer valores
            $('#sector').val('').trigger('change');
            $('#periodo').val('todos').trigger('change');
            $('#search-input').val('');

            // Limpiar tabla
            dataTable.clear().draw();

            // Restablecer contadores
            updateSummary();

            // Remover clase de animación
            setTimeout(() => {
                $('.search-controls select, .search-controls input').removeClass('empty-filter');
            }, 1000);
        }, 300);
    }

    // Evento para el botón de restablecer
    $(document).on('click', '#reset-button', function () {
        resetSearchControls();
    });

    // También puedes agregar un atajo de teclado (ESC) para restablecer
    $(document).keyup(function (e) {
        if (e.key === "Escape") {
            resetSearchControls();
        }
    });
</script>