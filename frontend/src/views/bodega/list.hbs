<link rel="stylesheet" href="/styles/bodega.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-12">
            <div class="card shadow-lg p-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Gestión de Inventario</h5>
                </div>
                <div class="card-body">
                    <!-- Controles de búsqueda -->
                    <div class="row mb-3 search-controls">
                        <div class="col-md-12">
                            <div class="mb-2">
                                <label for="sector" class="form-label">Seleccionar Sector</label>
                                <select id="sector" name="sector" class="form-select" required>
                                    <option value="" disabled selected>Seleccione un sector</option>
                                    <option value="Herramientas manuales">Herramientas manuales</option>
                                    <option value="Herramientas eléctricas">Herramientas eléctricas</option>
                                    <option value="Materiales de construcción">Materiales de construcción</option>
                                    <option value="Pinturas o accesorios">Pinturas o accesorios</option>
                                    <option value="Tuberías y plomería">Tuberías y plomería</option>
                                    <option value="Electricidad e iluminación">Electricidad e iluminación</option>
                                    <option value="Seguridad industrial">Seguridad industrial</option>
                                    <option value="Productos de ferretería general">Productos de ferretería general
                                    </option>
                                </select>
                            </div>

                            <div class="mb-2">
                                <label for="periodo" class="form-label">Seleccionar Periodo</label>
                                <select id="periodo" name="periodo" class="form-select">
                                    <option value="todos" selected>Todos los registros</option>
                                    <option value="diario">Últimas 24 horas</option>
                                    <option value="semanal">Última semana</option>
                                    <option value="mensual">Último mes</option>
                                </select>
                            </div>

                            <div class="mb-2">
                                <label for="search-input" class="form-label">Buscar productos</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="search-input"
                                        placeholder="Ingrese nombre o código...">
                                    <button class="btn btn-primary" id="search-button">
                                        <i class="fas fa-search me-1"></i> Buscar
                                    </button>
                                    <button class="btn btn-secondary" id="reset-button">
                                        <i class="fas fa-undo me-1"></i> Restablecer
                                    </button>
                                </div>
                            </div>

                            <div id="search-error" class="text-danger mt-2" style="display: none;"></div>
                        </div>
                    </div>

                    <!-- Tabla -->
                    <div class="table-container">
                        <div class="table-wrapper">
                            <table id="dataTable" class="table table-hover table-bordered display" style="width:100%">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Código Producto</th>
                                        <th>Nombre</th>
                                        <th>Marca</th>
                                        <th>Ubicación</th>
                                        <th>Fecha Entrada</th>
                                        <th>Cantidad</th>
                                        <th>Fecha Vencimiento</th>
                                        <th>Sector</th>
                                        <th>Estado</th>
                                    </tr>
                                </thead>
                                <tbody><!-- Datos dinámicos --></tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="9" class="summary-row">
                                            <div class="summary-container">
                                                <div class="summary-item">
                                                    <span class="summary-label">Total Productos</span>
                                                    <span class="summary-value" id="total-products">0</span>
                                                </div>
                                                <div class="summary-item">
                                                    <span class="summary-label">Inventario Bajo (&lt;10)</span>
                                                    <span class="summary-value" id="low-stock">0</span>
                                                </div>
                                                <div class="summary-item">
                                                    <span class="summary-label">Próximos a vencer</span>
                                                    <span class="summary-value" id="expiring-products">0</span>
                                                </div>
                                                <div class="summary-item">
                                                    <span class="summary-label">Vencidos</span>
                                                    <span class="summary-value" id="expired-products">0</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Variables globales
    let dataTable;

    // Inicialización
    $(document).ready(function () {
        initializeDataTable();
        setupEventHandlers();
    });

    // Funciones de inicialización
    function initializeDataTable() {
        dataTable = $('#dataTable').DataTable({
            paging: true,
            searching: false,
            ordering: true,
            pageLength: 10000, // Un número muy alto para mostrar todos los registros
            lengthMenu: [[5, 10, 25, 50, 100, 10000], [5, 10, 25, 50, 100, "Todos"]],
            language: getDataTableLanguageConfig(),
            dom: '<"top"lf>rt<"bottom"ip>',
            columns: getColumnConfigs(),
            initComplete: updateSummary,
            drawCallback: updateSummary
        });
    }

    function setupEventHandlers() {
        $('#search-input').keypress(function (e) {
            if (e.which === 13) validateAndSearch();
        });
        $('#search-button').click(validateAndSearch);
        $(document).on('click', '#reset-button', resetSearchControls);

        // Este es el event listener importante para los filtros
        $(document).on('click', '.summary-filter', handleSummaryFilterClick);

        $(document).keyup(function (e) {
            if (e.key === "Escape") resetSearchControls();
        });
    }

    // Configuraciones
    function getDataTableLanguageConfig() {
        return {
            "decimal": "",
            "emptyTable": "No hay productos registrados",
            "info": "Mostrando _START_ a _END_ de _TOTAL_ productos",
            "infoEmpty": "Mostrando 0 a 0 de 0 productos",
            "infoFiltered": "",
            "infoPostFix": "",
            "thousands": ",",
            "lengthMenu": "Mostrar _MENU_ productos",
            "loadingRecords": "Cargando...",
            "processing": "Procesando...",
            "search": "",
            "zeroRecords": "No se encontraron productos coincidentes",
            "paginate": {
                "first": "Primero",
                "last": "Último",
                "next": "Siguiente",
                "previous": "Anterior"
            },
            "aria": {
                "sortAscending": ": activar para ordenar columna ascendente",
                "sortDescending": ": activar para ordenar columna descendente"
            }
        };
    }

    function getColumnConfigs() {
        return [
            { data: 'cod_producto', defaultContent: 'N/A', render: renderProductCode }, // Cambiado de Cod_Producto
            { data: 'nombre', defaultContent: 'N/A', render: renderProductName }, // Cambiado de Nombre
            { data: 'marca', defaultContent: 'N/A', render: renderDefaultContent }, // Cambiado de Marca
            { data: 'descripcion', defaultContent: 'N/A', render: renderDefaultContent }, // Cambiado de Descripcion
            { data: 'fechaentrada', render: renderDate }, // Cambiado de FechaEntrada
            { data: 'cantidad', render: renderQuantity }, // Cambiado de Cantidad
            { data: 'fechavencimiento', render: renderDate }, // Cambiado de FechaVencimiento
            { data: 'sector', defaultContent: 'N/A', render: renderSector }, // Cambiado de Sector
            { data: null, render: renderStatus }
        ];
    }


    // Funciones de renderizado
    function renderProductCode(data) {
        return `<span class="cell-content">${data || 'N/A'}</span>`;
    }

    function renderProductName(data) {
        if (!data) return 'N/A';
        return data.length > 30
            ? `<span class="cell-content has-tooltip" title="${data}">${data.substring(0, 30)}...</span>`
            : `<span class="cell-content">${data}</span>`;
    }

    function renderDefaultContent(data) {
        return `<span class="cell-content">${data || 'N/A'}</span>`;
    }

    function renderDate(data) {
        return `<span class="cell-content">${formatDateForDisplay(data)}</span>`;
    }

    function renderQuantity(data) {
        return `<span class="cell-content">${data != null ? data : '0'}</span>`;
    }

    function renderSector(data) {
        if (!data) return 'N/A';
        return data.length > 25
            ? `<span class="cell-content has-tooltip" title="${data}">${data.substring(0, 25)}...</span>`
            : `<span class="cell-content">${data}</span>`;
    }

    function renderStatus(data, type, row) {
        const expiryDate = parseDate(row.fechavencimiento); // Cambiado de FechaVencimiento
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const quantity = parseInt(row.cantidad) || 0; // Cambiado de Cantidad

        // Resto del código permanece igual...
        if (!expiryDate) {
            return `<span class="text-secondary cell-content">
            <i class="fas fa-question-circle me-1"></i>Sin fecha
        </span>`;
        }

        const daysToExpiry = Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24));

        if (daysToExpiry < 0) {
            return `<span class="text-danger cell-content">
            <i class="fas fa-times-circle me-1"></i>Vencido
        </span>`;
        } else if (daysToExpiry <= 30) {
            return `<span class="text-danger cell-content">
            <i class="fas fa-exclamation-triangle me-1"></i>Vence en ${daysToExpiry} días
        </span>`;
        } else if (quantity < 10) {
            return `<span class="text-warning cell-content">
            <i class="fas fa-exclamation-circle me-1"></i>Stock bajo
        </span>`;
        } else {
            return `<span class="text-success cell-content">
            <i class="fas fa-check-circle me-1"></i>OK
        </span>`;
        }
    }


    // Funciones de búsqueda
    function validateAndSearch() {
        const sector = $('#sector').val();
        const periodo = $('#periodo').val();
        const searchTerm = $('#search-input').val().trim();

        if (!sector && !searchTerm && periodo === 'todos') {
            showWarningAlert('Se requiere criterio', 'Por favor ingrese al menos un criterio de búsqueda (sector, período o término)');
            return;
        }

        searchData();
    }

    async function searchData() {
        const sector = $('#sector').val();
        const periodo = $('#periodo').val();
        const searchTerm = $('#search-input').val().trim();

        try {
            showLoadingAlert('Buscando datos', 'Por favor espere...');

            const params = new URLSearchParams();
            if (sector) params.append('sector', sector);
            if (periodo) params.append('periodo', periodo);
            if (searchTerm) params.append('search', searchTerm);

            const response = await fetch(`/bodega/api/reporte?${params.toString()}`);

            if (!response.ok) {
                throw new Error(`Error ${response.status}: ${await response.text()}`);
            }

            const { success, data } = await response.json();

            if (!success) {
                throw new Error('Error en los datos recibidos');
            }

            updateTableData(data);

            if (!data || data.length === 0) {
                showInfoAlert('Sin resultados', 'No se encontraron productos con los criterios de búsqueda');
            }

        } catch (error) {
            console.error('Error al buscar datos:', error);
            showErrorAlert('Error al buscar', `Error al buscar datos: ${error.message}`);
        } finally {
            Swal.close();
        }
    }

    function updateTableData(data) {
        dataTable.clear();
        if (data && data.length > 0) {
            dataTable.rows.add(data).draw();
        } else {
            dataTable.draw();
        }
    }

    // Funciones de resumen y filtros
    function updateSummary() {
        if (!dataTable) return;

        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const counts = countProductsByStatus(today);

        updateSummaryUI(counts);
    }

    function countProductsByStatus(today) {
        let total = 0, expiring = 0, lowStock = 0, expired = 0;

        dataTable.rows().every(function () {
            const row = this.data();
            total++;

            const quantity = parseInt(row.cantidad) || 0; // Cambiado de Cantidad a cantidad
            if (quantity < 10) lowStock++;

            const expiryDate = parseDate(row.fechavencimiento); // Cambiado de FechaVencimiento a fechavencimiento
            if (expiryDate) {
                const daysToExpiry = Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24));
                if (daysToExpiry < 0) expired++;
                else if (daysToExpiry <= 30) expiring++;
            }
        });

        return { total, expiring, lowStock, expired };
    }


    function updateSummaryUI({ total, expiring, lowStock, expired }) {
        // Hacer los totales clickeables
        $('#total-products').html(`<a href="javascript:void(0)" class="summary-filter" data-filter="all">${total}</a>`);
        $('#low-stock').html(`<a href="javascript:void(0)" class="summary-filter" data-filter="low-stock">${lowStock}</a>`);
        $('#expiring-products').html(`<a href="javascript:void(0)" class="summary-filter" data-filter="expiring">${expiring}</a>`);
        $('#expired-products').html(`<a href="javascript:void(0)" class="summary-filter" data-filter="expired">${expired}</a>`);

        toggleAlertClasses(lowStock, expired, expiring);
    }

    function toggleAlertClasses(lowStock, expired, expiring) {
        $('#low-stock').closest('.summary-item').toggleClass('has-warning', lowStock > 0);
        $('#expired-products').closest('.summary-item').toggleClass('has-alert', expired > 0);
        $('#expiring-products').closest('.summary-item').toggleClass('has-warning', expiring > 0);
    }

    function handleSummaryFilterClick() {
        const filterType = $(this).data('filter');
        applySummaryFilter(filterType);
    }

    function applySummaryFilter(filterType) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        // Mostrar todos los registros en una sola página
        dataTable.page.len(10000).draw();

        dataTable.rows().every(function () {
            const row = this.data();
            const showRow = shouldShowRow(filterType, row);
            $(this.node()).toggle(showRow);
        });

        dataTable.page('first').draw('page');
    }

    function shouldShowRow(filterType, row) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const quantity = parseInt(row.cantidad) || 0; // Cambiado de Cantidad a cantidad
        const expiryDate = parseDate(row.fechavencimiento); // Cambiado de FechaVencimiento a fechavencimiento

        switch (filterType) {
            case 'all':
                return true;
            case 'low-stock':
                return quantity < 10;
            case 'expiring':
                if (!expiryDate) return false;
                const daysToExpiry = Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24));
                return daysToExpiry > 0 && daysToExpiry <= 30;
            case 'expired':
                if (!expiryDate) return false;
                return Math.floor((expiryDate - today) / (1000 * 60 * 60 * 24)) < 0;
            default:
                return true;
        }
    }


    // Funciones de utilidad
    function parseDate(dateString) {
        if (!dateString || dateString === 'NULL' || dateString === null || dateString === 'N/A') {
            return null;
        }

        if (dateString instanceof Date) {
            return isNaN(dateString.getTime()) ? null : new Date(dateString);
        }

        const date = new Date(dateString);
        if (!isNaN(date.getTime())) {
            return date;
        }

        const parts = dateString.split('/');
        if (parts.length === 3) {
            const day = parseInt(parts[0], 10);
            const month = parseInt(parts[1], 10) - 1;
            const year = parseInt(parts[2], 10);
            const altDate = new Date(year, month, day);
            if (!isNaN(altDate.getTime())) {
                return altDate;
            }
        }

        return null;
    }

    function formatDateForDisplay(dateString) {
        const date = parseDate(dateString);
        if (!date) return 'N/A';

        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }

    function resetSearchControls() {
        $('.search-controls select, .search-controls input').addClass('empty-filter');

        setTimeout(() => {
            $('#sector').val('').trigger('change');
            $('#periodo').val('todos').trigger('change');
            $('#search-input').val('');
            dataTable.clear().draw();
            updateSummary();

            setTimeout(() => {
                $('.search-controls select, .search-controls input').removeClass('empty-filter');
            }, 1000);
        }, 300);
    }

    // Funciones de alerta
    function showLoadingAlert(title, text) {
        Swal.fire({
            title: title,
            html: text,
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });
    }

    function showWarningAlert(title, text) {
        Swal.fire({
            icon: 'warning',
            title: title,
            text: text,
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Entendido'
        });
    }

    function showInfoAlert(title, text) {
        Swal.fire({
            icon: 'info',
            title: title,
            text: text,
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Entendido'
        });
    }

    function showErrorAlert(title, text) {
        Swal.fire({
            icon: 'error',
            title: title,
            text: text,
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Entendido'
        });
    }
</script>