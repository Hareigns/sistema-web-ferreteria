<title>Registro de Empleado</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/styles/empleados.css">

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <div class="card p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Empleados</h3>
          <form action="api/empleados" method="post" id="empleadoForm">
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" id="nombre" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="apellido" class="form-label">Apellido</label>
                <input type="text" id="apellido" class="form-control" required>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="direccion" class="form-label">Direcci√≥n</label>
                <input type="text" id="direccion" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="estado" class="form-label">Estado</label>
                <select id="estado" class="form-select" required>
                  <option value="Activo">Activo</option>
                  <option value="Inactivo">Inactivo</option>
                </select>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="telefono" class="form-label">Tel√©fono</label>
                <input type="tel" id="telefono" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="compania_telefonica" class="form-label">Compa√±√≠a Telef√≥nica</label>
                <select id="compania_telefonica" class="form-select" required>
                  <option value="Tigo">Tigo</option>
                  <option value="Claro">Claro</option>
                </select>
              </div>
            </div>
            <div class="d-flex justify-content-between">
              <button class="btn btn-primary" type="button" onclick="ingresarEmpleado()">Ingresar</button>
              <button class="btn btn-danger" type="button" onclick="limpiarCampos()">Limpiar</button>
            </div>
            <div class="mt-3">
              <select name="codigo_empleado" class="form-select" id="codigo_empleado" required>
                <option value="" disabled selected>Seleccione un empleado</option>
              </select>
              <button class="btn btn-success mt-2" type="button" id="modificarButton"
                onclick="modificarEmpleado()">Modificar</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  <div class="row mt-4">
    <div class="col-12">
      <div class="card" style="border: 1px solid #ddd;">
        <div class="card-body text-center">
          <h3 class="mb-0" style="font-weight: bold; color: #333;">Lista de Empleados</h3>
          <div class="card p-4 table-responsive">
            <table class="table align-middle mb-0 bg-white" id="empleadosTable">
              <thead class="bg-light">
                <tr>
                  <th>C√≥digo</th>
                  <th>Nombre</th>
                  <th>Apellido</th>
                  <th>Direccion</th>
                  <th>Tel√©fono</th>
                  <th>Compa√±√≠a</th>
                </tr>
              </thead>
              <tbody id="empleados-table-body"></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

  // Cargar empleados en el select
  async function cargarEmpleadosEnSelect() {
    try {
      const response = await fetch("/empleados/api/empleados");
      const data = await response.json();

      if (data.success) {
        const selectEmpleado = document.getElementById("codigo_empleado");
        selectEmpleado.innerHTML = `<option value="" disabled selected>Seleccione un empleado</option>`; // Limpiar el select

        // Iterar sobre los empleados y agregar opciones al select
        data.data.forEach(empleado => {
          const option = document.createElement("option");
          option.value = empleado.Cod_Empleado;
          option.textContent = `${empleado.Nombre} ${empleado.Apellido}`;
          selectEmpleado.appendChild(option);
        });
      } else {
        Swal.fire("Error", "No se pudieron cargar los empleados.", "error");
      }
    } catch (error) {
      console.error("Error al obtener empleados:", error);
      Swal.fire("Error", "Hubo un problema al obtener la lista de empleados.", "error");
    }
  }

  // Llenar los campos con los datos del empleado seleccionado
  document.getElementById("codigo_empleado").addEventListener("change", async function () {
    const codigoEmpleado = this.value;
    if (!codigoEmpleado) return;

    try {
      const response = await fetch(`/empleados/api/empleados`);
      const data = await response.json();

      if (data.success) {
        const empleado = data.data.find(emp => emp.Cod_Empleado == codigoEmpleado);

        if (empleado) {
          document.getElementById("nombre").value = empleado.Nombre;
          document.getElementById("apellido").value = empleado.Apellido;
          document.getElementById("direccion").value = empleado.Direccion;
          document.getElementById("telefono").value = empleado.Telefono || "";
          document.getElementById("compania_telefonica").value = empleado.Compania || "";
        } else {
          Swal.fire("Error", "Empleado no encontrado.", "error");
        }
      } else {
        Swal.fire("Error", "No se pudieron cargar los datos.", "error");
      }
    } catch (error) {
      console.error("Error al obtener datos del empleado:", error);
      Swal.fire("Error", "Hubo un problema al obtener los datos.", "error");
    }
  });

  // Cargar empleados en la tabla
  async function cargarEmpleadosEnTabla() {
  try {
    const response = await fetch("/empleados/api/empleados");
    const data = await response.json();
    
    console.log("Datos de empleados recibidos:", data); // üìå Verifica los datos

    if (data.success && Array.isArray(data.data)) {
      const tablaBody = document.getElementById("empleados-table-body");
      tablaBody.innerHTML = ""; // Limpiar tabla

      data.data.forEach(empleado => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${empleado.Cod_Empleado}</td>
          <td>${empleado.Nombre}</td>
          <td>${empleado.Apellido}</td>
          <td>${empleado.Direccion}</td>
          <td>${empleado.Telefono || "No disponible"}</td>
          <td>${empleado.Compania || "No disponible"}</td>
        `;
        tablaBody.appendChild(row);
      });

      console.log("Tabla actualizada con √©xito");
    } else {
      Swal.fire("Error", "No se pudieron cargar los empleados.", "error");
    }
  } catch (error) {
    console.error("Error al obtener empleados:", error);
    Swal.fire("Error", "Hubo un problema al obtener la lista de empleados.", "error");
  }
  }


  // Llamar la funci√≥n cuando la p√°gina cargue
  document.addEventListener("DOMContentLoaded", function () {
    cargarEmpleadosEnSelect();
    cargarEmpleadosEnTabla();
  });


  async function modificarEmpleado() {
    const codigoEmpleado = document.getElementById("codigo_empleado").value;
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();
    const direccion = document.getElementById("direccion").value.trim();
    const estado = document.getElementById("estado").value; // Aseg√∫rate de tener un campo de estado (Activo/Inactivo)
    const telefono = document.getElementById("telefono").value.trim();
    const compania = document.getElementById("compania_telefonica").value;

    // Validar campos
    if (!codigoEmpleado || !nombre || !apellido || !direccion || !estado || !telefono || !compania) {
      Swal.fire("Advertencia", "Todos los campos son obligatorios.", "warning");
      return;
    }

    try {
      // Enviar los datos al servidor para actualizar el empleado
      const response = await fetch('/empleados/add', {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          codigoEmpleado, // ID del empleado
          nombre,
          apellido,
          direccion,
          estado,
          telefono,
          compania
        }),
      });

      const data = await response.json();
      if (data.success) {
        Swal.fire("√âxito", "Empleado y tel√©fono actualizados correctamente.", "success");
        location.reload(); // Recargar la p√°gina para ver los cambios
      } else {
        Swal.fire("Error", data.error || "No se pudo modificar el empleado.", "error");
      }
    } catch (error) {
      console.error("Error al modificar empleado:", error);
      Swal.fire("Error", "Hubo un problema al modificar el empleado.", "error");
    }
  }


async function ingresarEmpleado() {
  const nombre = document.getElementById("nombre").value.trim();
  const apellido = document.getElementById("apellido").value.trim();
  const direccion = document.getElementById("direccion").value.trim();
  const estado = document.getElementById("estado").value;
  const telefono = document.getElementById("telefono").value.trim();
  const compania = document.getElementById("compania_telefonica").value;

  if (!nombre || !apellido || !direccion || !telefono || !compania) {
    Swal.fire("Advertencia", "Todos los campos son obligatorios.", "warning");
    return;
  }

  Swal.fire({
    title: "¬øConfirmar ingreso?",
    text: "¬øEst√° seguro que desea ingresar este empleado?",
    icon: "question",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "S√≠, ingresar",
    cancelButtonText: "Cancelar"
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch("api/empleados/", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ nombre, apellido, direccion, estado, telefono, compania })
        });

        const data = await response.json();
        console.log("üì¢ Respuesta del servidor:", data); // üìå Muestra la respuesta en la consola

        // üîπ Verifica si la API realmente est√° devolviendo "success: true"
        if (data.success === true) { 
          Swal.fire("‚úÖ √âxito", "Empleado ingresado correctamente", "success");
          
          // üîÑ Recargar la tabla sin hacer reload
          cargarEmpleadosEnTabla(); 
          limpiarCampos();
        } else {
          Swal.fire("‚ùå Error", data.message || "No se pudo ingresar el empleado", "error");
        }
      } catch (error) {
        console.error("‚ùå Error al ingresar empleado:", error);
        Swal.fire("‚ùå Error", "Hubo un problema al ingresar el empleado", "error");
      }
    }
  });
}



  function limpiarCampos() {
    const campos = ["nombre", "apellido", "direccion", "estado", "telefono", "compania_telefonica"];

    campos.forEach(id => {
      const input = document.getElementById(id);
      if (input) {
        input.value = "";  // Limpia el campo si existe
      }
    });
  }

</script>