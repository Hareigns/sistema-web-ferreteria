<title>Registro de Empleado</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/styles/empleados.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">


<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="card shadow-lg p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Empleados</h3>
          <form id="empleadoForm">
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" id="nombre" class="form-control" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}"
                  title="Solo letras (mínimo 3 caracteres)" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="apellido" class="form-label">Apellido</label>
                <input type="text" id="apellido" class="form-control" pattern="[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}"
                  title="Solo letras (mínimo 3 caracteres)" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="direccion" class="form-label">Dirección</label>
                <input type="text" id="direccion" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="cedula" class="form-label">Cédula (13 dígitos + 1 letra)</label>
                <input type="text" id="cedula" class="form-control" pattern="[0-9]{13}[A-Za-z]{1}"
                  title="13 dígitos seguidos de 1 letra" required>
              </div>
              <div id="estado-container" class="col-md-6 mb-3">
                <label for="estado" class="form-label">Estado</label>
                <select id="estado" class="form-select" required>
                  <option value="Activo">Activo</option>
                  <option value="Inactivo">Inactivo</option>
                </select>
              </div>
              <div class="col-md-6 mb-3">
                <label for="telefono" class="form-label">Teléfono</label>
                <input type="tel" id="telefono" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="compania_telefonica" class="form-label">Compañía Telefónica</label>
                <select id="compania_telefonica" class="form-select" required>
                  <option value="Tigo">Tigo</option>
                  <option value="Claro">Claro</option>
                </select>
              </div>
              <div class="col-md-6 mb-3 d-flex align-items-center">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="contrasena_temporal">
                  <label class="form-check-label" for="contrasena_temporal">
                    Resetear a contraseña temporal
                  </label>
                </div>
              </div>
              <div class="d-flex justify-content-between">
                <button class="btn btn-primary" type="button" id="ingresarButton"
                  onclick="ingresarEmpleado()">Ingresar</button>
                <button class="btn btn-danger" type="button" onclick="limpiarCampos()">Limpiar</button>
              </div>

              <div class="mt-4">
                <h5 class="text-center mb-3">Modificar Empleados</h5>
                <select name="codigo_empleado" class="form-select" id="codigo_empleado" required
                  onchange="habilitarDeshabilitarBotones()">
                  <option value="" disabled selected>Seleccione un empleado</option>
                </select>
                <button class="btn btn-success mt-2 w-100" type="button" id="modificarButton"
                  onclick="modificarEmpleado()" disabled>Modificar</button>
              </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="card mb-4" style="border: 1px solid #ddd;">
  <div class="card-body text-center">
    <h3 class="mb-0" style="font-weight: bold; color: #333;">Lista de Empleados</h3>
    <div class="card p-4 table-responsive">
      <div class="card-body">
        <table class="table align-middle mb-0 bg-white display" id="empleadosTable" style="width:100%">
          <thead class="bg-light">
            <tr>
              <th>Código</th>
              <th>Nombre</th>
              <th>Apellido</th>
              <th>Cédula</th>
              <th>Dirección</th>
              <th>Estado</th>
              <th>F. Ingreso</th>
              <th>Teléfono</th>
              <th>Compañía</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Validación en tiempo real para nombre y apellido
  document.getElementById('nombre').addEventListener('input', function (e) {
    const value = e.target.value;
    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/.test(value)) {
      e.target.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, '');
    }
  });

  document.getElementById('apellido').addEventListener('input', function (e) {
    const value = e.target.value;
    if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]*$/.test(value)) {
      e.target.value = value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]/g, '');
    }
  });

  // Función de validación
  function validarNombreApellido(valor) {
    // Permite letras, espacios y acentos (mínimo 3 caracteres)
    return /^[a-zA-ZáéíóúÁÉÍÓÚñÑüÜ\s]{3,}$/.test(valor);
  }

  // Asegurar compatibilidad
  $(document).ready(function () {
    // Inicializar dropdowns manualmente si es necesario
    if (typeof bootstrap !== 'undefined') {
      var dropdowns = document.querySelectorAll('.dropdown-toggle');
      dropdowns.forEach(function (dropdown) {
        new bootstrap.Dropdown(dropdown);
      });
    } else {
      console.warn('Bootstrap no está cargado correctamente');
    }

    // Manejar clics en el dropdown de usuario
    $('.navbar .dropdown').on('show.bs.dropdown', function () {
      $(this).find('.dropdown-menu').addClass('show');
    }).on('hide.bs.dropdown', function () {
      $(this).find('.dropdown-menu').removeClass('show');
    });
  });
</script>

<script>

  // Función para habilitar/deshabilitar botones según la selección
  function habilitarDeshabilitarBotones() {
    const selectEmpleado = document.getElementById('codigo_empleado');
    const ingresarButton = document.getElementById('ingresarButton');
    const modificarButton = document.getElementById('modificarButton');

    if (selectEmpleado.value && selectEmpleado.value !== "") {
      ingresarButton.disabled = true;
      modificarButton.disabled = false;
    } else {
      ingresarButton.disabled = false;
      modificarButton.disabled = true;
    }
  }


  // Llamar a la función cuando la página cargue para establecer el estado inicial
  window.onload = function () {
    habilitarDeshabilitarBotones();
  };

  async function cargarEmpleadosEnSelect() {
    const select = document.getElementById("codigo_empleado");

    try {
      // Mostrar estado de carga
      select.disabled = true;
      select.innerHTML = '<option value="">Cargando empleados...</option>';

      const response = await fetch('/empleados/api/empleados');

      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();

      // Verificar estructura de respuesta
      if (!result.success || !Array.isArray(result.data)) {
        throw new Error('Formato de respuesta inválido');
      }

      const empleados = result.data;

      // Limpiar y preparar el select
      select.innerHTML = '<option value="" disabled selected>Seleccione un empleado</option>';

      if (empleados.length === 0) {
        select.innerHTML = '<option value="" disabled>No hay empleados activos</option>';
        return;
      }

      // Ordenar empleados por código numérico (ascendente)
      empleados.sort((a, b) => {
        const codigoA = parseInt(a.Cod_Empleado) || 0;
        const codigoB = parseInt(b.Cod_Empleado) || 0;
        return codigoA - codigoB;
      });

      // Llenar el select
      empleados.forEach(empleado => {
        const option = document.createElement("option");
        option.value = empleado.Cod_Empleado;
        option.textContent = `${empleado.Cod_Empleado} - ${empleado.Nombre} ${empleado.Apellido || ''}`;

        // Mapear campos según la estructura de tu API
        option.dataset.nombre = empleado.Nombre || '';
        option.dataset.apellido = empleado.Apellido || '';
        option.dataset.direccion = empleado.Direccion || '';
        option.dataset.estado = empleado.Estado || 'Activo';
        option.dataset.cedula = empleado.Cedula || '';
        option.dataset.telefono = empleado.Telefono || '';
        option.dataset.compania = empleado.Compania || 'Tigo';
        option.dataset.fechaIngreso = empleado.FechaIngresoFormateada || formatDate(empleado.FechaIngreso) || 'No definida';

        select.appendChild(option);
      });

      select.disabled = false;
      habilitarDeshabilitarBotones();

    } catch (error) {
      console.error('Error al cargar empleados:', error);
      select.innerHTML = '<option value="" disabled>Error al cargar empleados</option>';

      Swal.fire({
        title: 'Error',
        html: `<p>No se pudieron cargar los empleados.</p>
            <small>${error.message || 'Error desconocido'}</small>`,
        icon: 'error',
        confirmButtonText: 'Reintentar',
        showDenyButton: true,
        denyButtonText: 'Cerrar'
      }).then((result) => {
        if (result.isConfirmed) {
          cargarEmpleadosEnSelect();
        }
      });
    }
  }

  // Función auxiliar para formatear fechas
  function formatDate(dateString) {
    if (!dateString) return '';

    try {
      // Si es un string ISO (YYYY-MM-DD)
      if (dateString.match(/^\d{4}-\d{2}-\d{2}/)) {
        const [year, month, day] = dateString.split('T')[0].split('-');
        return `${day.padStart(2, '0')}/${month.padStart(2, '0')}/${year}`;
      }

      // Si ya está formateada (dd/mm/yyyy)
      if (dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
        return dateString;
      }

      return '';
    } catch (e) {
      console.error('Error formateando fecha:', e);
      return '';
    }
  }

  let empleadosTable;

  async function cargarEmpleadosEnTabla() {
    try {
      const response = await fetch("/empleados/api/empleados");
      const data = await response.json();

      if (data.success && Array.isArray(data.data)) {
        const empleadosOrdenados = [...data.data].sort((a, b) => a.Cod_Empleado - b.Cod_Empleado);

        // Verificar si DataTable ya está inicializado
        if ($.fn.DataTable.isDataTable('#empleadosTable')) {
          empleadosTable.destroy();
          $('#empleadosTable').empty();
        }

        inicializarDataTableEmpleados(empleadosOrdenados);
      }
    } catch (error) {
      console.error("Error al obtener empleados:", error);
      Swal.fire("Error", "Hubo un problema al obtener la lista de empleados.", "error");
    }
  }

  function inicializarDataTableEmpleados(data) {
    // Verificar si jQuery está disponible
    if (typeof $ === 'undefined') {
      console.error('Error: jQuery no está cargado. DataTables requiere jQuery.');
      Swal.fire({
        title: 'Error de configuración',
        text: 'La tabla no puede inicializarse porque falta jQuery',
        icon: 'error'
      });
      return;
    }

    empleadosTable = $('#empleadosTable').DataTable({
      paging: true,
      searching: true,
      ordering: true,
      pageLength: 10,
      lengthMenu: [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
      language: {
        "decimal": "",
        "emptyTable": "No hay empleados registrados",
        "info": "Mostrando _START_ a _END_ de _TOTAL_ empleados",
        "infoEmpty": "Mostrando 0 a 0 de 0 empleados",
        "infoFiltered": "(filtrado de _MAX_ empleados totales)",
        "infoPostFix": "",
        "thousands": ",",
        "lengthMenu": "Mostrar _MENU_ empleados",
        "loadingRecords": "Cargando...",
        "processing": "Procesando...",
        "search": "Buscar:",
        "zeroRecords": "No se encontraron empleados coincidentes",
        "paginate": {
          "first": "Primero",
          "last": "Último",
          "next": "Siguiente",
          "previous": "Anterior"
        }
      },
      data: data,
      columns: [
        { data: 'Cod_Empleado' },
        { data: 'Nombre' },
        { data: 'Apellido' },
        {
          data: 'Cedula',
          render: function (data) {
            return data || 'No definida';
          }
        },
        { data: 'Direccion' },
        {
          data: 'Estado',
          render: function (data) {
            return `<span class="badge ${data === 'Activo' ? 'bg-success' : 'bg-danger'}">${data || 'No definido'}</span>`;
          }
        },
        {
          data: 'FechaIngreso',
          render: function (data, type, row) {
            return row.FechaIngresoFormateada || formatDate(data) || 'No definida';
          }
        },
        {
          data: 'Telefono',
          render: function (data) {
            return data || 'No disponible';
          }
        },
        {
          data: 'Compania',
          render: function (data) {
            const companiaClass = data === 'Tigo' ? 'text-primary fw-bold' :
              data === 'Claro' ? 'text-danger fw-bold' : 'fw-bold';
            return `<span class="${companiaClass}">${data || 'No disponible'}</span>`;
          }
        }
      ]
    });
  }

  // Llamar la función cuando la página cargue
  document.addEventListener("DOMContentLoaded", function () {
    cargarEmpleadosEnSelect();
    cargarEmpleadosEnTabla();
  });

  // Función para verificar si un teléfono ya existe (Frontend)
  async function verificarTelefonoExistente(telefono, codEmpleado = null) {
    try {
      // Validación básica del teléfono primero
      if (!telefono || !/^\d{8}$/.test(telefono)) {
        await Swal.fire({
          title: 'Teléfono inválido',
          text: 'El teléfono debe tener 8 dígitos',
          icon: 'error'
        });
        return true; // Consideramos que existe para bloquear el envío
      }

      let url = `/empleados/api/telefono/existe/${telefono}`;
      if (codEmpleado) {
        url += `?excluirEmpleado=${codEmpleado}`;
      }

      const response = await fetch(url);
      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Error al verificar teléfono');
      }

      if (data.existe) {
        await Swal.fire({
          title: 'Teléfono existente',
          text: 'Este número de teléfono ya está registrado para otro empleado o proveedor',
          icon: 'error',
          confirmButtonText: 'Entendido'
        });
        return true;
      }
      return false;
    } catch (error) {
      console.error('Error al verificar teléfono:', error);
      await Swal.fire({
        title: 'Error',
        text: 'No se pudo verificar el número de teléfono',
        icon: 'error'
      });
      return true; // Asumir que existe para prevenir problemas
    }
  }

  // Función para modificar empleado (mejorada)
  async function modificarEmpleado() {
    const codigoEmpleado = document.getElementById("codigo_empleado").value;
    const resetPassword = document.getElementById("contrasena_temporal").checked;


    // Obtener valores
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();
    const direccion = document.getElementById("direccion").value.trim();
    const estado = document.getElementById("estado").value;
    const telefono = document.getElementById("telefono").value.trim();
    const compania = document.getElementById("compania_telefonica").value;

    // Validación de nombre y apellido (aunque estén deshabilitados, por seguridad)
    if (!validarNombreApellido(nombre)) {
      await Swal.fire("Error", "El nombre no es válido", "error");
      return;
    }

    if (!validarNombreApellido(apellido)) {
      await Swal.fire("Error", "El apellido no es válido", "error");
      return;
    }

    if (!codigoEmpleado) {
      await Swal.fire("Error", "Debe seleccionar un empleado", "error");
      return;
    }

    try {
      // Confirmación
      const confirmacion = await Swal.fire({
        title: `¿Actualizar empleado?`,
        html: `¿Confirmas la modificación de ${nombre} ${apellido}?<br>${resetPassword ? '<b>⚠️ Se restablecerá la contraseña a temporal</b>' : ''}`,
        icon: "question",
        showCancelButton: true,
        confirmButtonText: 'Confirmar',
        cancelButtonText: 'Cancelar'
      });

      if (!confirmacion.isConfirmed) return;

      // Preparar datos para enviar
      const payload = {
        direccion,
        estado,
        telefono,
        compania,
        resetPassword
      };

      // Si se solicita resetear la contraseña, enviar flag
      if (resetPassword) {
        payload.resetPassword = true;
      }

      // Enviar datos
      const response = await fetch(`/empleados/api/empleados/${codigoEmpleado}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });

      const data = await response.json();

      // Manejar respuesta
      if (!response.ok) {
        const errorMsg = data.errors ? data.errors.join('<br>') : data.message;
        throw new Error(errorMsg || "Error al actualizar");
      }

      // Éxito
      await Swal.fire({
        title: "¡Actualizado!",
        text: `Empleado ${nombre} ${apellido} modificado correctamente${resetPassword ? ' (Contraseña restablecida)' : ''}`,
        icon: "success"
      });

      // Actualizar UI
      cargarEmpleadosEnTabla();
      if (estado === 'Inactivo') limpiarCampos();

    } catch (error) {
      console.error("Error:", error);
      await Swal.fire({
        title: "Error",
        html: `<b>No se pudo modificar el empleado</b><br><small>${error.message}</small>`,
        icon: "error"
      });
    }
  }

  // Función para ingresar empleado (actualizada)
  async function ingresarEmpleado() {
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();
    const direccion = document.getElementById("direccion").value.trim();
    const estado = document.getElementById("estado").value;
    const telefono = document.getElementById("telefono").value.trim();
    const compania = document.getElementById("compania_telefonica").value;
    const cedula = document.getElementById("cedula").value.trim();

    // Validación básica
    if (!nombre || !apellido || !direccion || !telefono || !compania || !cedula) {
      Swal.fire("Advertencia", "Todos los campos son obligatorios.", "warning");
      return;
    }

    // Validación de nombre y apellido
    if (!validarNombreApellido(nombre)) {
      await Swal.fire("Error", "El nombre debe contener solo letras y tener al menos 3 caracteres", "error");
      return;
    }

    if (!validarNombreApellido(apellido)) {
      await Swal.fire("Error", "El apellido debe contener solo letras y tener al menos 3 caracteres", "error");
      return;
    }

    // Validar formato de cédula
    if (!/^[0-9]{13}[A-Za-z]{1}$/.test(cedula)) {
      Swal.fire("Error", "La cédula debe tener 13 dígitos seguidos de 1 letra", "error");
      return;
    }

    // Verificar si la cédula ya existe
    if (await verificarCedulaExistente(cedula)) {
      return;
    }

    // Verificar si el teléfono ya existe
    if (await verificarTelefonoExistente(telefono)) {
      return;
    }

    const confirmacion = await Swal.fire({
      title: "¿Confirmar ingreso?",
      text: `¿Está seguro que desea ingresar a ${nombre} ${apellido}?`,
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Sí, ingresar",
      cancelButtonText: "Cancelar"
    });

    if (!confirmacion.isConfirmed) return;

    try {
      const response = await fetch("/empleados/api/empleados", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          nombre,
          apellido,
          direccion,
          estado,
          telefono,
          compania,
          cedula
        })
      });

      const data = await response.json();

      if (data.success) {
        await Swal.fire({
          title: "¡Éxito!",
          html: `Empleado ingresado correctamente<br>`,
          icon: "success",
          timer: 2000,
          showConfirmButton: false
        });

        cargarEmpleadosEnTabla();
        cargarEmpleadosEnSelect();
        limpiarCampos();
      } else {
        Swal.fire("Error", data.message || "No se pudo ingresar el empleado", "error");
      }
    } catch (error) {
      console.error("Error al ingresar empleado:", error);
      Swal.fire("Error", "Hubo un problema al ingresar el empleado", "error");
    }
  }

  function limpiarCampos() {
    // Limpiar campos de texto
    const campos = ["nombre", "apellido", "direccion", "telefono", "cedula"];
    campos.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.value = "";
        element.defaultValue = ""; // Asegurar reset de valores por defecto
        element.disabled = false; // Habilitar campo al limpiar
      }
    });

    // Resetear selects y habilitar estado
    document.getElementById("estado").value = "Activo";
    document.getElementById("estado").disabled = false; // Asegurar que esté habilitado
    document.getElementById("compania_telefonica").value = "Tigo";

    // Resetear select de empleados y checkbox
    const selectEmpleado = document.getElementById("codigo_empleado");
    selectEmpleado.value = "";
    selectEmpleado.selectedIndex = 0;

    // Ocultar ambos campos
    document.getElementById("estado-container").classList.remove("visible");
    document.querySelector(".form-check").classList.remove("visible");

    // Manejar estados de botones
    document.getElementById("ingresarButton").disabled = false;
    document.getElementById("modificarButton").disabled = true;

    // Resetear formulario completamente
    document.getElementById("empleadoForm").reset();
  }

  // Evento change mejorado con manejo de errores y bloqueo de campos
  document.getElementById("codigo_empleado").addEventListener("change", async function () {
    try {
      const selectedOption = this.options[this.selectedIndex];
      const estadoSelect = document.getElementById("estado");

      if (!selectedOption?.value) {
        limpiarCampos();
        // Habilitar campos al limpiar
        ['nombre', 'apellido', 'cedula'].forEach(id => {
          const field = document.getElementById(id);
          if (field) field.disabled = false;
        });
        // Habilitar estado cuando no hay empleado seleccionado
        estadoSelect.disabled = false;
        return;
      }

      // Mostrar ambos campos (estado y reset password)
      document.getElementById("estado-container").classList.add("visible");
      document.querySelector(".form-check").classList.add("visible");

      // Verificar datos del empleado seleccionado
      if (!selectedOption.dataset.nombre) {
        throw new Error('Datos del empleado no cargados correctamente');
      }

      // Bloquear/desbloquear estado según el código del empleado
      const codigoEmpleado = parseInt(selectedOption.value);
      if (codigoEmpleado === 1 || codigoEmpleado === 2) {
        estadoSelect.disabled = true;
        estadoSelect.value = "Activo"; // Forzar estado Activo para empleados 1 y 2
      } else {
        estadoSelect.disabled = false;
      }

      // Resto del código existente para llenar los campos...
      const fieldsToUpdate = [
        { id: 'nombre', dataset: 'nombre', required: true },
        { id: 'apellido', dataset: 'apellido' },
        { id: 'direccion', dataset: 'direccion' },
        { id: 'cedula', dataset: 'cedula' },
        { id: 'telefono', dataset: 'telefono' },
        { id: 'estado', dataset: 'estado', type: 'select' },
        { id: 'compania_telefonica', dataset: 'compania', type: 'select' }
      ];

      fieldsToUpdate.forEach(field => {
        const element = document.getElementById(field.id);
        if (!element) {
          console.error(`Elemento no encontrado: ${field.id}`);
          return;
        }

        const value = selectedOption.dataset[field.dataset] || '';

        if (field.type === 'select') {
          // Para select, verificar que el valor existe en las opciones
          const optionExists = [...element.options].some(opt => opt.value === value);
          element.value = optionExists ? value : element.options[0]?.value || '';
        } else {
          element.value = value;
        }

        // Guardar valor original para detectar cambios
        element.defaultValue = element.value;
      });

      // Bloquear campos que no deben editarse
      ['nombre', 'apellido', 'cedula'].forEach(id => {
        const field = document.getElementById(id);
        if (field) field.disabled = true;
      });

      document.getElementById("modificarButton").disabled = false;
      // Mostrar el checkbox y su label
      document.querySelector(".form-check").classList.add("visible");

    } catch (error) {
      console.error('Error al cargar datos del empleado:', error);
      Swal.fire({
        title: 'Error',
        text: 'No se pudieron cargar los datos del empleado seleccionado',
        icon: 'error'
      });
    }
  });

  // Función para verificar si una cédula ya existe (Frontend)
  async function verificarCedulaExistente(cedula, codEmpleado = null) {
    try {
      let url = `/empleados/api/cedula/existe/${cedula}`;
      if (codEmpleado) {
        url += `?excluirEmpleado=${codEmpleado}`;
      }

      const response = await fetch(url);
      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Error al verificar cédula');
      }

      if (data.existe) {
        await Swal.fire({
          title: 'Cédula existente',
          text: 'Esta cédula ya está registrada para otro empleado',
          icon: 'error',
          confirmButtonText: 'Entendido'
        });
        return true;
      }
      return false;
    } catch (error) {
      console.error('Error al verificar cédula:', error);
      await Swal.fire({
        title: 'Error',
        text: 'No se pudo verificar la cédula',
        icon: 'error'
      });
      return true; // Asumir que existe para prevenir problemas
    }
  }
</script>

<script>
  // Solución definitiva para el dropdown del navbar
  document.addEventListener('DOMContentLoaded', function () {
    // Manejar clicks en el dropdown manualmente
    document.querySelectorAll('.dropdown-toggle').forEach(function (toggle) {
      toggle.addEventListener('click', function (e) {
        e.preventDefault();
        var menu = this.nextElementSibling;
        menu.classList.toggle('show');
      });
    });

    // Cerrar dropdown al hacer click fuera
    document.addEventListener('click', function (e) {
      if (!e.target.closest('.dropdown')) {
        document.querySelectorAll('.dropdown-menu.show').forEach(function (menu) {
          menu.classList.remove('show');
        });
      }
    });

    // Reinicializar dropdowns después de DataTables
    if ($.fn.DataTable.isDataTable('#empleadosTable')) {
      $('#empleadosTable').on('init.dt', function () {
        new bootstrap.Dropdown(document.querySelector('.dropdown-toggle'));
      });
    }
  });
</script>