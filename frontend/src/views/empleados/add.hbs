<title>Registro de Empleado</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/styles/empleados.css">

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="card p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Empleados</h3>
          <form action="api/empleados" method="post" id="empleadoForm">
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" id="nombre" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="apellido" class="form-label">Apellido</label>
                <input type="text" id="apellido" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="direccion" class="form-label">Dirección</label>
                <input type="text" id="direccion" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="cedula" class="form-label">Cédula (13 dígitos + 1 letra)</label>
                <input type="text" id="cedula" class="form-control" pattern="[0-9]{13}[A-Za-z]{1}"
                  title="13 dígitos seguidos de 1 letra" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="estado" class="form-label">Estado</label>
                <select id="estado" class="form-select" required>
                  <option value="Activo">Activo</option>
                  <option value="Inactivo">Inactivo</option>
                </select>
              </div>
              <div class="col-md-6 mb-3">
                <label for="telefono" class="form-label">Teléfono</label>
                <input type="tel" id="telefono" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="compania_telefonica" class="form-label">Compañía Telefónica</label>
                <select id="compania_telefonica" class="form-select" required>
                  <option value="Tigo">Tigo</option>
                  <option value="Claro">Claro</option>
                </select>
              </div>
            </div>
            <div class="d-flex justify-content-between">
              <button class="btn btn-primary" type="button" onclick="ingresarEmpleado()">Ingresar</button>
              <button class="btn btn-danger" type="button" onclick="limpiarCampos()">Limpiar</button>
            </div>

            <div class="mt-4">
              <h5 class="text-center mb-3">Modificar Empleados</h5>
              <select name="codigo_empleado" class="form-select" id="codigo_empleado" required>
                <option value="" disabled selected>Seleccione un empleado</option>
              </select>
              <button class="btn btn-success mt-2 w-100" type="button" id="modificarButton"
                onclick="modificarEmpleado()">Modificar</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="row mt-4">
  <div class="col-12">
    <div class="card" style="border: 1px solid #ddd;">
      <div class="card-body text-center">
        <h3 class="mb-0" style="font-weight: bold; color: #333;">Lista de Empleados</h3>
        <div class="card p-4 table-responsive">
          <table class="table align-middle mb-0 bg-white" id="empleadosTable">
            <thead class="bg-light">
              <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Cédula</th>
                <th>Dirección</th>
                <th>Estado</th>
                <th>F. Ingreso</th>
                <th>Teléfono</th>
                <th>Compañía</th>
              </tr>
            </thead>
            <tbody id="empleados-table-body"></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Cargar empleados en el select
  async function cargarEmpleadosEnSelect() {
    try {
      const response = await fetch("/empleados/api/empleados");
      const data = await response.json();

      if (data.success) {
        const selectEmpleado = document.getElementById("codigo_empleado");
        selectEmpleado.innerHTML = `<option value="" disabled selected>Seleccione un empleado</option>`;

        data.data.forEach(empleado => {
          const option = document.createElement("option");
          option.value = empleado.Cod_Empleado;
          option.textContent = `${empleado.Nombre} ${empleado.Apellido}`;
          selectEmpleado.appendChild(option);
        });
      } else {
        Swal.fire("Error", "No se pudieron cargar los empleados.", "error");
      }
    } catch (error) {
      console.error("Error al obtener empleados:", error);
      Swal.fire("Error", "Hubo un problema al obtener la lista de empleados.", "error");
    }
  }

  // Llenar los campos con los datos del empleado seleccionado
  document.getElementById("codigo_empleado").addEventListener("change", async function () {
    const codigoEmpleado = this.value;
    if (!codigoEmpleado) return;

    try {
      const response = await fetch(`/empleados/api/empleados`);
      const data = await response.json();

      if (data.success) {
        const empleado = data.data.find(emp => emp.Cod_Empleado == codigoEmpleado);

        if (empleado) {
          document.getElementById("nombre").value = empleado.Nombre;
          document.getElementById("apellido").value = empleado.Apellido;
          document.getElementById("direccion").value = empleado.Direccion;
          document.getElementById("estado").value = empleado.Estado || "Activo";
          document.getElementById("telefono").value = empleado.Telefono || "";
          document.getElementById("compania_telefonica").value = empleado.Compania || "";
          document.getElementById("cedula").value = empleado.Cedula || "";
        } else {
          Swal.fire("Error", "Empleado no encontrado.", "error");
        }
      } else {
        Swal.fire("Error", "No se pudieron cargar los datos.", "error");
      }
    } catch (error) {
      console.error("Error al obtener datos del empleado:", error);
      Swal.fire("Error", "Hubo un problema al obtener los datos.", "error");
    }
  });

// Función para formatear fechas (consistente con el backend)
function formatDate(dateString) {
  if (!dateString) return 'No definida';
  
  // Si ya viene formateada del backend (dd/mm/yyyy)
  if (typeof dateString === 'string' && dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
    return dateString;
  }
  
  // Si es un string ISO (YYYY-MM-DD)
  if (typeof dateString === 'string' && dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
    const [year, month, day] = dateString.split('-');
    return `${day}/${month}/${year}`;
  }
  
  return 'No definida';
}

// Función para cargar empleados en la tabla (actualizada)
async function cargarEmpleadosEnTabla() {
  try {
    const response = await fetch("/empleados/api/empleados");
    const data = await response.json();

    if (data.success && Array.isArray(data.data)) {
      const tablaBody = document.getElementById("empleados-table-body");
      tablaBody.innerHTML = "";

      data.data.forEach(empleado => {
        const row = document.createElement("tr");
        const estadoClass = empleado.Estado === 'Activo' ? 'text-success' : 'text-danger';

        row.innerHTML = `
          <td>${empleado.Cod_Empleado}</td>
          <td>${empleado.Nombre}</td>
          <td>${empleado.Apellido}</td>
          <td>${empleado.Cedula || 'No definida'}</td>
          <td>${empleado.Direccion}</td>
          <td class="${estadoClass} fw-bold">${empleado.Estado || "No definido"}</td>
          <td>${empleado.FechaIngresoFormateada || formatDate(empleado.FechaIngreso)}</td>
          <td>${empleado.Telefono || "No disponible"}</td>
          <td>${empleado.Compania || "No disponible"}</td>
        `;
        tablaBody.appendChild(row);
      });
    }
  } catch (error) {
    console.error("Error al obtener empleados:", error);
    Swal.fire("Error", "Hubo un problema al obtener la lista de empleados.", "error");
  }
}


  // Llamar la función cuando la página cargue
  document.addEventListener("DOMContentLoaded", function () {
    cargarEmpleadosEnSelect();
    cargarEmpleadosEnTabla();
  });


  // Función para modificar empleado (mejorada)
  async function modificarEmpleado() {
    const codigoEmpleado = document.getElementById("codigo_empleado").value;
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();
    const direccion = document.getElementById("direccion").value.trim();
    const estado = document.getElementById("estado").value;
    const telefono = document.getElementById("telefono").value.trim();
    const compania = document.getElementById("compania_telefonica").value;
    const cedula = document.getElementById("cedula").value.trim();

    // Validación de campos
    if (!codigoEmpleado || !nombre || !apellido || !direccion || !estado || !telefono || !compania || !cedula) {
      await Swal.fire({
        title: "Campos incompletos",
        text: "Todos los campos son obligatorios para modificar un empleado",
        icon: "warning",
        confirmButtonColor: "#3085d6"
      });
      return;
    }

    // Validación específica de cédula
    if (!/^[0-9]{13}[A-Z]$/i.test(cedula)) {
      await Swal.fire({
        title: "Cédula inválida",
        text: "La cédula debe tener 13 dígitos seguidos de 1 letra",
        icon: "error"
      });
      return;
    }

    try {
      const confirmacion = await Swal.fire({
        title: `¿Actualizar empleado ${codigoEmpleado}?`,
        html: `<b>${nombre} ${apellido}</b><br>¿Confirmas la modificación?`,
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#28a745",
        cancelButtonColor: "#dc3545",
        confirmButtonText: 'Confirmar',
        cancelButtonText: 'Cancelar'
      });

      if (!confirmacion.isConfirmed) return;

      const response = await fetch(`/empleados/api/empleados/${codigoEmpleado}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          nombre,
          apellido,
          direccion,
          estado,
          telefono,
          compania,
          cedula: cedula.toUpperCase()
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Error en la respuesta del servidor");
      }

      if (data.success) {
        await Swal.fire({
          title: "¡Actualizado!",
          text: `Empleado ${nombre} ${apellido} modificado correctamente`,
          icon: "success",
          timer: 2000,
          timerProgressBar: true,
          showConfirmButton: false
        });

        // Actualizar la UI
        await Promise.all([
          cargarEmpleadosEnSelect(),
          cargarEmpleadosEnTabla()
        ]);

        // Limpiar formulario
        limpiarCampos();
        document.getElementById("codigo_empleado").selectedIndex = 0;
      } else {
        throw new Error(data.message || "La modificación no tuvo éxito");
      }
    } catch (error) {
      console.error("Error en modificarEmpleado:", error);
      await Swal.fire({
        title: "Error",
        html: `<b>No se pudo modificar el empleado</b><br><small>${error.message}</small>`,
        icon: "error"
      });
    }
  }

  // Función para ingresar empleado (actualizada)
async function ingresarEmpleado() {
  const nombre = document.getElementById("nombre").value.trim();
  const apellido = document.getElementById("apellido").value.trim();
  const direccion = document.getElementById("direccion").value.trim();
  const estado = document.getElementById("estado").value;
  const telefono = document.getElementById("telefono").value.trim();
  const compania = document.getElementById("compania_telefonica").value;
  const cedula = document.getElementById("cedula").value.trim();

  // Validación (igual que en el backend)
  if (!nombre || !apellido || !direccion || !telefono || !compania || !cedula) {
    Swal.fire("Advertencia", "Todos los campos son obligatorios.", "warning");
    return;
  }

  if (!/^[0-9]{13}[A-Za-z]{1}$/.test(cedula)) {
    Swal.fire("Error", "La cédula debe tener 13 dígitos seguidos de 1 letra", "error");
    return;
  }

  const confirmacion = await Swal.fire({
    title: "¿Confirmar ingreso?",
    text: `¿Está seguro que desea ingresar a ${nombre} ${apellido}?`,
    icon: "question",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Sí, ingresar",
    cancelButtonText: "Cancelar"
  });

  if (!confirmacion.isConfirmed) return;

  try {
    const response = await fetch("/empleados/api/empleados", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        nombre,
        apellido,
        direccion,
        estado,
        telefono,
        compania,
        cedula
      })
    });

    const data = await response.json();

    if (data.success) {
      await Swal.fire({
        title: "¡Éxito!",
        html: `Empleado ingresado correctamente<br>Fecha de ingreso: <b>${formatDate(data.fechaIngreso)}</b>`,
        icon: "success",
        timer: 2000,
        showConfirmButton: false
      });

      cargarEmpleadosEnTabla();
      cargarEmpleadosEnSelect();
      limpiarCampos();
    } else {
      Swal.fire("Error", data.message || "No se pudo ingresar el empleado", "error");
    }
  } catch (error) {
    console.error("Error al ingresar empleado:", error);
    Swal.fire("Error", "Hubo un problema al ingresar el empleado", "error");
  }
}

  // Función para limpiar campos
  function limpiarCampos() {
    const campos = ["nombre", "apellido", "direccion", "telefono", "cedula"];
    campos.forEach(id => document.getElementById(id).value = "");

    document.getElementById("estado").value = "Activo";
    document.getElementById("compania_telefonica").value = "Tigo";
    document.getElementById("codigo_empleado").value = "";
  }
</script>