<title>Registro de Empleado</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/styles/empleados.css">
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="card p-4">
        <div class="card-body">
          <h3 class="text-center mb-4">Registro de Empleados</h3>
          <form action="api/empleados" method="post" id="empleadoForm">
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" id="nombre" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="apellido" class="form-label">Apellido</label>
                <input type="text" id="apellido" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="direccion" class="form-label">Dirección</label>
                <input type="text" id="direccion" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="cedula" class="form-label">Cédula (13 dígitos + 1 letra)</label>
                <input type="text" id="cedula" class="form-control" pattern="[0-9]{13}[A-Za-z]{1}"
                  title="13 dígitos seguidos de 1 letra" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="estado" class="form-label">Estado</label>
                <select id="estado" class="form-select" required>
                  <option value="Activo">Activo</option>
                  <option value="Inactivo">Inactivo</option>
                </select>
              </div>
              <div class="col-md-6 mb-3">
                <label for="telefono" class="form-label">Teléfono</label>
                <input type="tel" id="telefono" class="form-control" required>
              </div>
              <div class="col-md-6 mb-3">
                <label for="compania_telefonica" class="form-label">Compañía Telefónica</label>
                <select id="compania_telefonica" class="form-select" required>
                  <option value="Tigo">Tigo</option>
                  <option value="Claro">Claro</option>
                </select>
              </div>
              <div class="col-md-6 mb-3 d-flex align-items-center">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="contrasena_temporal">
                  <label class="form-check-label" for="contrasena_temporal">
                    Contraseña temporal
                  </label>
                </div>
              </div>
              <div class="d-flex justify-content-between">
                <button class="btn btn-primary" type="button" id="ingresarButton"
                  onclick="ingresarEmpleado()">Ingresar</button>
                <button class="btn btn-danger" type="button" onclick="limpiarCampos()">Limpiar</button>
              </div>

              <div class="mt-4">
                <h5 class="text-center mb-3">Modificar Empleados</h5>
                <select name="codigo_empleado" class="form-select" id="codigo_empleado" required
                  onchange="habilitarDeshabilitarBotones()">
                  <option value="" disabled selected>Seleccione un empleado</option>
                </select>
                <button class="btn btn-success mt-2 w-100" type="button" id="modificarButton"
                  onclick="modificarEmpleado()" disabled>Modificar</button>
              </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="row mt-4">
  <div class="col-12">
    <div class="card" style="border: 1px solid #ddd;">
      <div class="card-body text-center">
        <h3 class="mb-0" style="font-weight: bold; color: #333;">Lista de Empleados</h3>
        <div class="card p-4 table-responsive">
          <table class="table align-middle mb-0 bg-white" id="empleadosTable">
            <thead class="bg-light">
              <tr>
                <th>Código</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Cédula</th>
                <th>Dirección</th>
                <th>Estado</th>
                <th>F. Ingreso</th>
                <th>Teléfono</th>
                <th>Compañía</th>
              </tr>
            </thead>
            <tbody id="empleados-table-body"></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

  // Función para habilitar/deshabilitar botones según la selección
  function habilitarDeshabilitarBotones() {
    const selectEmpleado = document.getElementById('codigo_empleado');
    const ingresarButton = document.getElementById('ingresarButton');
    const modificarButton = document.getElementById('modificarButton');

    if (selectEmpleado.value && selectEmpleado.value !== "") {
      ingresarButton.disabled = true;
      modificarButton.disabled = false;
    } else {
      ingresarButton.disabled = false;
      modificarButton.disabled = true;
    }
  }


  // Llamar a la función cuando la página cargue para establecer el estado inicial
  window.onload = function () {
    habilitarDeshabilitarBotones();
  };

  async function cargarEmpleadosEnSelect() {
    const select = document.getElementById("codigo_empleado");

    try {
      // Mostrar estado de carga
      select.disabled = true;
      select.innerHTML = '<option value="">Cargando empleados...</option>';

      const response = await fetch('/empleados/api/empleados');

      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();

      // Verificar estructura de respuesta
      if (!result.success || !Array.isArray(result.data)) {
        throw new Error('Formato de respuesta inválido');
      }

      const empleados = result.data;

      // Limpiar y preparar el select
      select.innerHTML = '<option value="" disabled selected>Seleccione un empleado</option>';

      if (empleados.length === 0) {
        select.innerHTML = '<option value="" disabled>No hay empleados activos</option>';
        return;
      }

      // Ordenar empleados por nombre
      empleados.sort((a, b) => {
        const nombreA = a.Nombre?.toUpperCase() || '';
        const nombreB = b.Nombre?.toUpperCase() || '';
        return nombreA.localeCompare(nombreB);
      });

      // Llenar el select
      empleados.forEach(empleado => {
        const option = document.createElement("option");
        option.value = empleado.Cod_Empleado;
        option.textContent = `${empleado.Cod_Empleado} - ${empleado.Nombre} ${empleado.Apellido || ''}`;

        // Mapear campos según la estructura de tu API
        option.dataset.nombre = empleado.Nombre || '';
        option.dataset.apellido = empleado.Apellido || '';
        option.dataset.direccion = empleado.Direccion || '';
        option.dataset.estado = empleado.Estado || 'Activo';
        option.dataset.cedula = empleado.Cedula || '';
        option.dataset.telefono = empleado.Telefono || '';
        option.dataset.compania = empleado.Compania || 'Tigo';
        option.dataset.fechaIngreso = empleado.FechaIngresoFormateada || formatDate(empleado.FechaIngreso) || 'No definida';

        select.appendChild(option);
      });

      select.disabled = false;
      habilitarDeshabilitarBotones();

    } catch (error) {
      console.error('Error al cargar empleados:', error);
      select.innerHTML = '<option value="" disabled>Error al cargar empleados</option>';

      Swal.fire({
        title: 'Error',
        html: `<p>No se pudieron cargar los empleados.</p>
            <small>${error.message || 'Error desconocido'}</small>`,
        icon: 'error',
        confirmButtonText: 'Reintentar',
        showDenyButton: true,
        denyButtonText: 'Cerrar'
      }).then((result) => {
        if (result.isConfirmed) {
          cargarEmpleadosEnSelect();
        }
      });
    }
  }

  // Función auxiliar para formatear fechas
  function formatDate(dateString) {
    if (!dateString) return '';

    try {
      // Si es un string ISO (YYYY-MM-DD)
      if (dateString.match(/^\d{4}-\d{2}-\d{2}/)) {
        const [year, month, day] = dateString.split('T')[0].split('-');
        return `${day.padStart(2, '0')}/${month.padStart(2, '0')}/${year}`;
      }

      // Si ya está formateada (dd/mm/yyyy)
      if (dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
        return dateString;
      }

      return '';
    } catch (e) {
      console.error('Error formateando fecha:', e);
      return '';
    }
  }


  // Función para cargar empleados en la tabla (actualizada)
  async function cargarEmpleadosEnTabla() {
    try {
      const response = await fetch("/empleados/api/empleados");
      const data = await response.json();

      if (data.success && Array.isArray(data.data)) {
        const tablaBody = document.getElementById("empleados-table-body");
        tablaBody.innerHTML = "";

        data.data.forEach(empleado => {
          const row = document.createElement("tr");
          const estadoClass = empleado.Estado === 'Activo' ? 'text-success' : 'text-danger';

          // Determinar la clase para la compañía (color + negrita)
          let companiaClass = 'fw-bold'; // Siempre aplicamos negrita
          if (empleado.Compania === 'Tigo') {
            companiaClass += ' text-primary'; // Azul
          } else if (empleado.Compania === 'Claro') {
            companiaClass += ' text-danger'; // Rojo
          }

          row.innerHTML = `
          <td>${empleado.Cod_Empleado}</td>
          <td>${empleado.Nombre}</td>
          <td>${empleado.Apellido}</td>
          <td>${empleado.Cedula || 'No definida'}</td>
          <td>${empleado.Direccion}</td>
          <td class="${estadoClass} fw-bold">${empleado.Estado || "No definido"}</td>
          <td>${empleado.FechaIngresoFormateada || formatDate(empleado.FechaIngreso)}</td>
          <td>${empleado.Telefono || "No disponible"}</td>
          <td class="${companiaClass}">${empleado.Compania || "No disponible"}</td>
        `;
          tablaBody.appendChild(row);
        });
      }
    } catch (error) {
      console.error("Error al obtener empleados:", error);
      Swal.fire("Error", "Hubo un problema al obtener la lista de empleados.", "error");
    }
  }


  // Llamar la función cuando la página cargue
  document.addEventListener("DOMContentLoaded", function () {
    cargarEmpleadosEnSelect();
    cargarEmpleadosEnTabla();
  });


  // Función para modificar empleado (mejorada)
  async function modificarEmpleado() {
    const codigoEmpleado = document.getElementById("codigo_empleado").value;
    const resetPassword = document.getElementById("contrasena_temporal").checked;

    // Obtener valores de los campos
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();
    const direccion = document.getElementById("direccion").value.trim();
    const estado = document.getElementById("estado").value;
    const telefono = document.getElementById("telefono").value.trim();
    const compania = document.getElementById("compania_telefonica").value;
    const cedula = document.getElementById("cedula").value.trim();

    // Validación mínima
    if (!codigoEmpleado) {
      await Swal.fire({
        title: "Error",
        text: "Debe seleccionar un empleado",
        icon: "error"
      });
      return;
    }

    try {
      const confirmacion = await Swal.fire({
        title: `¿Actualizar empleado ${codigoEmpleado}?`,
        html: `<b>${nombre} ${apellido}</b><br>
          ${resetPassword ? '<b>Se reseteará la contraseña a "1234"</b><br>' : ''}
          ¿Confirmas la modificación?`,
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#28a745",
        cancelButtonColor: "#dc3545",
        confirmButtonText: 'Confirmar',
        cancelButtonText: 'Cancelar'
      });

      if (!confirmacion.isConfirmed) return;

      const response = await fetch(`/empleados/api/empleados/${codigoEmpleado}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          nombre,
          apellido,
          direccion,
          estado,
          telefono,
          compania,
          cedula: cedula.toUpperCase(),
          resetPassword // Enviamos el estado del checkbox
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Error en la respuesta del servidor");
      }

      if (data.success) {
        let message = `Empleado ${nombre} ${apellido} modificado correctamente`;
        if (data.passwordReset) {
          message += '<br><b>Contraseña reseteada a "1234"</b>';
        }

        await Swal.fire({
          title: "¡Actualizado!",
          html: message,
          icon: "success",
          timer: 2000,
          timerProgressBar: true,
          showConfirmButton: false
        });

        // Actualizar la UI
        await cargarEmpleadosEnSelect();
        cargarEmpleadosEnTabla();
        document.getElementById("contrasena_temporal").checked = false;

        // Si el estado cambió a Inactivo, limpiar el formulario
        if (estado === 'Inactivo') {
          limpiarCampos();
          document.getElementById("codigo_empleado").selectedIndex = 0;
        }
      }
    } catch (error) {
      console.error("Error en modificarEmpleado:", error);
      await Swal.fire({
        title: "Error",
        html: `<b>No se pudo modificar el empleado</b><br><small>${error.message}</small>`,
        icon: "error"
      });
    }
  }

  // Función para ingresar empleado (actualizada)
  async function ingresarEmpleado() {
    const nombre = document.getElementById("nombre").value.trim();
    const apellido = document.getElementById("apellido").value.trim();
    const direccion = document.getElementById("direccion").value.trim();
    const estado = document.getElementById("estado").value;
    const telefono = document.getElementById("telefono").value.trim();
    const compania = document.getElementById("compania_telefonica").value;
    const cedula = document.getElementById("cedula").value.trim();

    // Validación (igual que en el backend)
    if (!nombre || !apellido || !direccion || !telefono || !compania || !cedula) {
      Swal.fire("Advertencia", "Todos los campos son obligatorios.", "warning");
      return;
    }

    if (!/^[0-9]{13}[A-Za-z]{1}$/.test(cedula)) {
      Swal.fire("Error", "La cédula debe tener 13 dígitos seguidos de 1 letra", "error");
      return;
    }

    const confirmacion = await Swal.fire({
      title: "¿Confirmar ingreso?",
      text: `¿Está seguro que desea ingresar a ${nombre} ${apellido}?`,
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Sí, ingresar",
      cancelButtonText: "Cancelar"
    });

    if (!confirmacion.isConfirmed) return;

    try {
      const response = await fetch("/empleados/api/empleados", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          nombre,
          apellido,
          direccion,
          estado,
          telefono,
          compania,
          cedula
        })
      });

      const data = await response.json();

      if (data.success) {
        await Swal.fire({
          title: "¡Éxito!",
          html: `Empleado ingresado correctamente<br>Fecha de ingreso: <b>${formatDate(data.fechaIngreso)}</b>`,
          icon: "success",
          timer: 2000,
          showConfirmButton: false
        });

        cargarEmpleadosEnTabla();
        cargarEmpleadosEnSelect();
        limpiarCampos();
      } else {
        Swal.fire("Error", data.message || "No se pudo ingresar el empleado", "error");
      }
    } catch (error) {
      console.error("Error al ingresar empleado:", error);
      Swal.fire("Error", "Hubo un problema al ingresar el empleado", "error");
    }
  }

  function limpiarCampos() {
    // Limpiar campos de texto
    const campos = ["nombre", "apellido", "direccion", "telefono", "cedula"];
    campos.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.value = "";
        element.defaultValue = ""; // Asegurar reset de valores por defecto
      }
    });

    // Resetear selects
    document.getElementById("estado").value = "Activo";
    document.getElementById("compania_telefonica").value = "Tigo";

    // Resetear select de empleados y checkbox
    const selectEmpleado = document.getElementById("codigo_empleado");
    selectEmpleado.value = "";
    selectEmpleado.selectedIndex = 0;

    document.getElementById("contrasena_temporal").checked = false;

    // Manejar estados de botones
    document.getElementById("ingresarButton").disabled = false;
    document.getElementById("modificarButton").disabled = true;

    // Resetear formulario completamente
    document.getElementById("empleadoForm").reset();
  }


  // Evento change mejorado con manejo de errores
  document.getElementById("codigo_empleado").addEventListener("change", async function () {
    try {
      const selectedOption = this.options[this.selectedIndex];

      if (!selectedOption?.value) {
        limpiarCampos();
        document.getElementById("modificarButton").disabled = true;
        return;
      }

      // Verificar datos del empleado seleccionado
      if (!selectedOption.dataset.nombre) {
        throw new Error('Datos del empleado no cargados correctamente');
      }

      // Llenar campos del formulario
      const fieldsToUpdate = [
        { id: 'nombre', dataset: 'nombre', required: true },
        { id: 'apellido', dataset: 'apellido' },
        { id: 'direccion', dataset: 'direccion' },
        { id: 'cedula', dataset: 'cedula' },
        { id: 'telefono', dataset: 'telefono' },
        { id: 'estado', dataset: 'estado', type: 'select' },
        { id: 'compania_telefonica', dataset: 'compania', type: 'select' }
      ];

      fieldsToUpdate.forEach(field => {
        const element = document.getElementById(field.id);
        if (!element) {
          console.error(`Elemento no encontrado: ${field.id}`);
          return;
        }

        const value = selectedOption.dataset[field.dataset] || '';

        if (field.type === 'select') {
          // Para select, verificar que el valor existe en las opciones
          const optionExists = [...element.options].some(opt => opt.value === value);
          element.value = optionExists ? value : element.options[0]?.value || '';
        } else {
          element.value = value;
        }

        // Guardar valor original para detectar cambios
        element.defaultValue = element.value;
      });

      document.getElementById("modificarButton").disabled = false;
      document.getElementById("contrasena_temporal").checked = false;

    } catch (error) {
      console.error('Error al cargar datos del empleado:', error);
      Swal.fire({
        title: 'Error',
        text: 'No se pudieron cargar los datos del empleado seleccionado',
        icon: 'error'
      });
    }
  });
</script>