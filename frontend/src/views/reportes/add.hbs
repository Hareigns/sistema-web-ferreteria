<link rel="stylesheet" href="/styles/reportes.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-lg p-4">
                <div class="card-body">
                    <!-- Formulario para generar reportes -->
                    <div class="card-header bg-info text-white">
                        <h2 class="h5 mb-0">Generar Reportes</h2>
                    </div>
                </div>

                <!-- Sección de Reportes -->
                <div class="row g-4">
                    <!-- Columna izquierda -->
                    <div class="col-md-6 d-flex flex-column">
                        <!-- Reporte de Ventas -->
                        <div class="card flex-grow-1 mb-4">
                            <div class="card-header bg-primary text-white">
                                <h2 class="h5 mb-0">Reporte de Ventas</h2>
                            </div>
                            <div class="card-body pb-2">
                                <div class="list-group list-group-flush">
                                    <div class="list-group-item">
                                        <div class="form-check me-3">
                                            <input class="form-check-input" type="radio" name="filtroVentas" id="diario"
                                                checked>
                                            <label class="form-check-label" for="diario">Diario</label>
                                        </div>
                                        <div class="mt-2" id="fechaDiario">
                                            <label for="fechaDiarioInput" class="form-label small">Seleccione el
                                                día:</label>
                                            <input type="date" class="form-control form-control-sm"
                                                id="fechaDiarioInput">
                                        </div>
                                    </div>
                                    <div class="list-group-item">
                                        <div class="form-check me-3">
                                            <input class="form-check-input" type="radio" name="filtroVentas"
                                                id="semanal">
                                            <label class="form-check-label" for="semanal">Semanal</label>
                                        </div>
                                        <div class="mt-2 d-none" id="fechaSemanal">
                                            <label for="fechaSemanalInput" class="form-label small">Seleccione la
                                                semana:</label>
                                            <input type="week" class="form-control form-control-sm"
                                                id="fechaSemanalInput">
                                        </div>
                                    </div>
                                    <div class="list-group-item">
                                        <div class="form-check me-3">
                                            <input class="form-check-input" type="radio" name="filtroVentas"
                                                id="mensual">
                                            <label class="form-check-label" for="mensual">Mensual</label>
                                        </div>
                                        <div class="mt-2 d-none" id="fechaMensual">
                                            <label for="fechaMensualInput" class="form-label small">Seleccione el
                                                mes:</label>
                                            <input type="month" class="form-control form-control-sm"
                                                id="fechaMensualInput">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent py-2">
                                <button id="exportarVentas" class="btn btn-sm btn-outline-primary w-100">
                                    <i class="fas fa-download me-1"></i>Exportar selección
                                </button>
                            </div>
                        </div>

                        <!-- Reporte de Ganancias -->
                        <div class="card flex-grow-1">
                            <div class="card-header bg-warning text-white">
                                <h2 class="h5 mb-0">Reporte de Ganancias</h2>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h5 class="text-center mb-3">Análisis de Rentabilidad</h5>
                                    <p class="card-text text-center small mb-3">Detalle de márgenes de utilidad por
                                        producto vendido</p>
                                </div>
                                <div class="text-center">
                                    <button id="exportarGanancias" class="btn btn-sm btn-outline-warning">
                                        <i class="fas fa-chart-line me-1"></i> Exportar Reporte
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Columna derecha -->
                    <div class="col-md-6 d-flex flex-column">
                        <!-- Reporte de Productos Vendidos -->
                        <div class="card flex-grow-1 mb-4">
                            <div class="card-header bg-success text-white">
                                <h2 class="h5 mb-0">Reporte de Productos Vendidos</h2>
                            </div>
                            <div class="card-body">
                                <div class="list-group list-group-flush mb-3">
                                    <div class="list-group-item d-flex align-items-center">
                                        <span class="badge bg-success me-3">+</span>
                                        <span>Producto + vendido</span>
                                        <span class="badge bg-primary ms-auto">Top 5</span>
                                    </div>
                                    <div class="list-group-item d-flex align-items-center">
                                        <span class="badge bg-danger me-3">-</span>
                                        <span>Producto - vendido</span>
                                        <span class="badge bg-primary ms-auto">Últimos 5</span>
                                    </div>
                                    <div class="list-group-item d-flex align-items-center">
                                        <span class="badge bg-warning me-3">○</span>
                                        <span>Producto no vendido</span>
                                        <span class="badge bg-primary ms-auto">Sin ventas</span>
                                    </div>
                                </div>
                                <div class="text-center">
                                    <button id="exportarProductos" class="btn btn-sm btn-outline-success">
                                        <i class="bi bi-file-earmark-excel me-1"></i> Exportar Vendidos
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Reporte de Productos Adquiridos -->
                        <div class="card flex-grow-1">
                            <div class="card-header bg-secondary text-white">
                                <h2 class="h5 mb-0">Reporte de Productos Adquiridos</h2>
                            </div>
                            <div class="card-body">
                                <p class="card-text text-center small mb-3">Listado completo de productos con
                                    proveedores y fechas</p>
                                <div class="text-center mt-auto"> <!-- Añadido mt-auto -->
                                    <button id="exportarProductosDetallado" class="btn btn-sm btn-outline-secondary">
                                        <i class="fas fa-file-export me-1"></i> Exportar Adquiridos
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Contenedor para los dos reportes en paralelo -->
                    <div class="row mt-4">
                        <!-- Reporte de Ventas por Empleado - Ahora ocupa la mitad (6 columnas) -->
                        <div class="col-md-6">
                            <div class="card shadow-lg h-100"> <!-- h-100 para igualar altura -->
                                <div class="card-header bg-purple text-white">
                                    <h2 class="h5 mb-0">Reporte de Ventas por Empleado</h2>
                                </div>
                                <div class="card-body">
                                    <div class="row justify-content-center">
                                        <div class="col-md-10"> <!-- Ajustado el ancho interno -->
                                            <div class="mb-3">
                                                <label for="selectEmpleado" class="form-label">Seleccionar
                                                    Empleado:</label>
                                                <select class="form-select" id="selectEmpleado">
                                                    <option value="" selected disabled>-- Seleccione un empleado --
                                                    </option>
                                                    <!-- Las opciones se llenarán dinámicamente -->
                                                </select>
                                            </div>
                                            <div class="text-center">
                                                <button id="exportarVentasEmpleado"
                                                    class="btn btn-outline-purple w-100">
                                                    <i class="fas fa-user-tie me-2"></i>Exportar Ventas del Empleado
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Reporte de Bajas de Productos - Ahora ocupa la otra mitad (6 columnas) -->
                        <div class="col-md-6">
                            <div class="card shadow-lg h-100"> <!-- h-100 para igualar altura -->
                                <div class="card-header bg-danger text-white">
                                    <h2 class="h5 mb-0">Reporte de Bajas de Productos</h2>
                                </div>
                                <div class="card-body">
                                    <div class="row justify-content-center">
                                        <div class="col-md-10"> <!-- Ajustado el ancho interno -->
                                            <div class="mb-3">
                                                <label for="filtroBajas" class="form-label">Filtrar por:</label>
                                                <select class="form-select" id="filtroBajas">
                                                    <option value="todos" selected>Todos los registros</option>
                                                    <option value="mes">Por mes</option>
                                                    <option value="anio">Por año</option>
                                                </select>
                                            </div>
                                            <div class="mb-3 d-none" id="fechaBajasMes">
                                                <label for="fechaBajasMesInput" class="form-label">Seleccione el
                                                    mes:</label>
                                                <input type="month" class="form-control" id="fechaBajasMesInput">
                                            </div>
                                            <div class="mb-3 d-none" id="fechaBajasAnio">
                                                <label for="fechaBajasAnioInput" class="form-label">Seleccione el
                                                    año:</label>
                                                <input type="number" class="form-control" id="fechaBajasAnioInput"
                                                    min="2000" max="2100" step="1" value="2023">
                                            </div>
                                            <div class="text-center">
                                                <button id="exportarBajas" class="btn btn-outline-danger w-100">
                                                    <i class="fas fa-file-export me-2"></i>Exportar Reporte de Bajas
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Configuración centralizada
    const reportConfig = {
        ventas: {
            endpoint: '/reportes/ventas',
            filters: ['diario', 'semanal', 'mensual']
        },
        productos: {
            endpoint: '/reportes/productos'
        },
        ganancias: {
            endpoint: '/reportes/ganancias'
        },
        empleados: {
            endpoint: '/reportes/empleados',
            endpointVentas: '/reportes/ventas-empleado'
        },
        bajas: {
            endpoint: '/reportes/bajas'
        }
    };

    // Utilidades comunes
    const reportUtils = {
        showAlert: async (icon, title, text, confirmText = 'Aceptar') => {
            return Swal.fire({ icon, title, text, confirmButtonText: confirmText });
        },

        handleError: async (error, context = '') => {
            console.error(`Error en ${context}:`, error);
            await reportUtils.showAlert(
                'error',
                'Error',
                error.message || 'Ocurrió un error inesperado',
                'Cerrar'
            );
        },

        fetchData: async (url, method = 'GET', body = null) => {
            const options = { method, headers: { 'Content-Type': 'application/json' } };
            if (body) options.body = JSON.stringify(body);

            const res = await fetch(url, options);
            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Error en la solicitud');
            }
            return res.json();
        }
    };

    // Funcionalidad de reportes
    const reportHandlers = {
        ventas: {
            getSelectedFilter: () => {
                const selectedRadio = document.querySelector('input[name="filtroVentas"]:checked');
                if (!selectedRadio) return null;

                let fechaValue = '';

                if (selectedRadio.id === 'diario') {
                    fechaValue = document.getElementById('fechaDiarioInput').value;
                } else if (selectedRadio.id === 'semanal') {
                    const weekInput = document.getElementById('fechaSemanalInput').value;
                    if (weekInput) {
                        // Extraer solo el número de la semana (sin el "W")
                        const [year, week] = weekInput.split('-W');
                        fechaValue = `${year}-${week}`; // Formato: "2023-19" (no "2023-W19")

                        console.log('Semana formateada para servidor:', fechaValue);
                    }
                } else if (selectedRadio.id === 'mensual') {
                    fechaValue = document.getElementById('fechaMensualInput').value;
                }

                return {
                    tipo: selectedRadio.id,
                    fecha: fechaValue
                };
            },

            exportToExcel: async (data, filter) => {
                try {
                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Reporte Ventas');

                    // Función segura para formatear la fecha
                    const safeFormatDate = (dateString) => {
                        try {
                            if (!dateString) return 'N/A';

                            // Si ya está en formato dd/mm/yyyy, devolverlo tal cual
                            if (typeof dateString === 'string' && dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
                                return dateString;
                            }

                            // Si es una fecha ISO o similar
                            const date = new Date(dateString);
                            if (isNaN(date.getTime())) {
                                // Si es un número, podría ser un timestamp
                                if (!isNaN(dateString)) {
                                    const timestampDate = new Date(parseInt(dateString));
                                    if (!isNaN(timestampDate.getTime())) {
                                        const day = timestampDate.getDate().toString().padStart(2, '0');
                                        const month = (timestampDate.getMonth() + 1).toString().padStart(2, '0');
                                        const year = timestampDate.getFullYear();
                                        return `${day}/${month}/${year}`;
                                    }
                                }
                                return 'N/A';
                            }

                            const day = date.getDate().toString().padStart(2, '0');
                            const month = (date.getMonth() + 1).toString().padStart(2, '0');
                            const year = date.getFullYear();

                            return `${day}/${month}/${year}`;
                        } catch (error) {
                            console.warn('Error formateando fecha en Excel:', dateString, error);
                            return 'N/A';
                        }
                    };

                    // Preparar datos con el formato de fecha seguro
                    const processedData = data.map(item => {
                        // Convertir cantidad_venta a número entero
                        const cantidad = parseInt(item.cantidad_venta || item.Cantidad_Venta || 0);

                        return {
                            cod_venta: item.cod_venta || item.Cod_Venta || 'N/A',
                            cod_producto: item.cod_producto || item.Cod_Producto || 'N/A',
                            nombre_producto: item.nombre_producto || item.Nombre_Producto || 'N/A',
                            cantidad_venta: cantidad,
                            monto_total: Number(parseFloat(item.monto_total || item.Monto_Total || 0).toFixed(2)),
                            fecha_venta: safeFormatDate(item.fecha_venta || item.Fecha_Venta)
                        };
                    });

                    // Configurar columnas
                    worksheet.columns = [
                        { header: 'Código Venta', key: 'cod_venta', width: 15 },
                        { header: 'Código Producto', key: 'cod_producto', width: 15 },
                        { header: 'Nombre Producto', key: 'nombre_producto', width: 30 },
                        { header: 'Cantidad Vendida', key: 'cantidad_venta', width: 18 },
                        {
                            header: 'Monto Total',
                            key: 'monto_total',
                            width: 15,
                            style: { numFmt: '#,##0.00' }
                        },
                        { header: 'Fecha Venta', key: 'fecha_venta', width: 15 }
                    ];

                    // Aplicar estilo a los encabezados
                    const headerRow = worksheet.getRow(1);
                    headerRow.eachCell(cell => {
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FF4F81BD' }
                        };
                        cell.font = {
                            bold: true,
                            color: { argb: 'FFFFFFFF' },
                            size: 12
                        };
                        cell.border = {
                            top: { style: 'thin' },
                            left: { style: 'thin' },
                            bottom: { style: 'thin' },
                            right: { style: 'thin' }
                        };
                        cell.alignment = { vertical: 'middle', horizontal: 'center' };
                    });

                    // Agregar datos
                    processedData.forEach(item => {
                        const row = worksheet.addRow(item);

                        // Formatear celda de monto total
                        const montoCell = row.getCell('monto_total');
                        montoCell.numFmt = '#,##0.00';

                        row.eachCell(cell => {
                            cell.border = {
                                top: { style: 'thin' },
                                left: { style: 'thin' },
                                bottom: { style: 'thin' },
                                right: { style: 'thin' }
                            };
                        });
                    });

                    // Calcular totales
                    const totalVentas = processedData.reduce((sum, item) => sum + item.monto_total, 0);
                    const totalCantidad = processedData.reduce((sum, item) => sum + item.cantidad_venta, 0);

                    const totalRow = worksheet.addRow({
                        cod_venta: 'TOTALES',
                        cod_producto: '',
                        nombre_producto: '',
                        cantidad_venta: totalCantidad,
                        monto_total: totalVentas,
                        fecha_venta: ''
                    });

                    // Formatear celdas de totales
                    totalRow.eachCell((cell, colNumber) => {
                        cell.font = { bold: true };
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FF4F81BD' }
                        };
                        cell.border = {
                            top: { style: 'thin' },
                            left: { style: 'thin' },
                            bottom: { style: 'thin' },
                            right: { style: 'thin' }
                        };

                        if (colNumber === 4) { // Columna de cantidad (entero)
                            cell.numFmt = '0';
                        } else if (colNumber === 5) { // Columna de monto total (decimal)
                            cell.numFmt = '#,##0.00';
                        }
                    });

                    // Autoajustar columnas
                    worksheet.eachRow((row, rowNumber) => {
                        if (rowNumber > 1) { // Saltar la fila de encabezados
                            const cantidadCell = row.getCell(4); // Columna 4 es cantidad_venta
                            cantidadCell.numFmt = '0'; // Formato entero sin decimales

                            const montoCell = row.getCell(5); // Columna 5 es monto_total
                            montoCell.numFmt = '#,##0.00'; // Formato decimal con 2 decimales
                        }
                    });

                    // Descargar archivo
                    const buffer = await workbook.xlsx.writeBuffer();
                    const blob = new Blob([buffer], {
                        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                    });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `reporte_ventas_${filter}.xlsx`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                } catch (error) {
                    console.error('Error detallado al exportar:', error);
                    throw new Error(`Error al exportar Excel: ${error.message}`);
                }
            },

            generateReport: async () => {
                try {
                    const filterInfo = reportHandlers.ventas.getSelectedFilter();

                    if (!filterInfo || !filterInfo.fecha) {
                        await reportUtils.showAlert('warning', 'Datos requeridos', 'Por favor selecciona un filtro y una fecha');
                        return;
                    }

                    const response = await reportUtils.fetchData(
                        reportConfig.ventas.endpoint,
                        'POST',
                        {
                            filtro: filterInfo.tipo,
                            fecha: filterInfo.fecha
                        }
                    );

                    // Verificar la estructura de la respuesta
                    console.log('Respuesta completa:', response);

                    let data = [];
                    if (Array.isArray(response)) {
                        data = response;
                    } else if (response && Array.isArray(response.data)) {
                        data = response.data;
                    } else if (response && Array.isArray(response.rows)) {
                        data = response.rows;
                    } else if (response && response.success && Array.isArray(response.data)) {
                        data = response.data;
                    }

                    if (data.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', 'No hay ventas registradas para el período seleccionado.');
                        return;
                    }

                    // Debug: ver la estructura de los datos
                    console.log('Datos procesados:', data);
                    if (data.length > 0) {
                        console.log('Primer elemento:', data[0]);
                        console.log('Keys del primer elemento:', Object.keys(data[0]));
                    }

                    await reportHandlers.ventas.exportToExcel(data, filterInfo.tipo);
                    await reportUtils.showAlert('success', '¡Reporte exportado!', 'El archivo Excel ha sido descargado exitosamente.');

                } catch (error) {
                    await reportUtils.handleError(error, 'generación de reporte de ventas');
                }
            }
        },

        productos: {
            exportToExcel: async (data) => {
                try {
                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Productos');

                    const processedData = [
                        ...data.topProducts,
                        ...data.worstProducts,
                        ...data.notSoldProducts
                    ];

                    worksheet.columns = [
                        { header: 'Código', key: 'producto_codigo', width: 15 },
                        { header: 'Nombre', key: 'producto_nombre', width: 30 },
                        { header: 'Cantidad Vendida', key: 'cantidad_vendida', width: 20 },
                        { header: 'Tipo', key: 'producto_tipo', width: 20 }
                    ];

                    worksheet.getRow(1).eachCell(cell => {
                        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4F81BD' } };
                        cell.font = { bold: true, color: { argb: 'FFFFFFFF' } };
                        cell.alignment = { vertical: 'middle', horizontal: 'center' };
                    });

                    processedData.forEach(item => {
                        worksheet.addRow({
                            producto_codigo: item.producto_codigo || 'N/A',
                            producto_nombre: item.producto_nombre || 'N/A',
                            cantidad_vendida: item.cantidad_vendida || 0,
                            producto_tipo: item.producto_tipo || 'N/A'
                        });
                    });

                    worksheet.eachRow(row => {
                        row.eachCell(cell => {
                            cell.border = {
                                top: { style: 'thin' },
                                left: { style: 'thin' },
                                bottom: { style: 'thin' },
                                right: { style: 'thin' }
                            };
                        });
                    });

                    const buffer = await workbook.xlsx.writeBuffer();
                    const now = new Date();
                    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `reporte_productos_${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.xlsx`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                } catch (error) {
                    throw new Error(`Error al exportar Excel: ${error.message}`);
                }
            },

            generateReport: async () => {
                try {
                    const response = await reportUtils.fetchData(reportConfig.productos.endpoint);

                    if (!response.success || !response.data) {
                        throw new Error('Respuesta del servidor inválida');
                    }

                    if (response.data.topProducts.length === 0 &&
                        response.data.worstProducts.length === 0 &&
                        response.data.notSoldProducts.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', 'No hay productos en el reporte.');
                        return;
                    }

                    await reportHandlers.productos.exportToExcel(response.data);
                    await reportUtils.showAlert('success', '¡Reporte exportado!', 'El archivo Excel ha sido descargado exitosamente.');

                } catch (error) {
                    await reportUtils.handleError(error, 'generación de reporte de productos');
                }
            }
        },

        productosDetallado: {
            exportToExcel: async (data) => {
                try {
                    // Ordenar los datos por fecha de entrada (más reciente primero)
                    const datosOrdenados = [...data].sort((a, b) => {
                        const fechaA = new Date(a.Fecha_Entrada);
                        const fechaB = new Date(b.Fecha_Entrada);
                        return fechaB - fechaA; // Orden descendente
                    });

                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Productos Detallados');

                    // Configurar columnas (se mantiene igual)
                    worksheet.columns = [
                        { header: 'Código Producto', key: 'Cod_Producto', width: 15 },
                        { header: 'Nombre', key: 'Nombre', width: 25 },
                        { header: 'Marca', key: 'Marca', width: 20 },
                        { header: 'Proveedor', key: 'NombreProveedor', width: 25 },
                        { header: 'Sector', key: 'Sector', width: 20 },
                        { header: 'Fecha Entrada', key: 'Fecha_Entrada', width: 15 },
                        { header: 'Cantidad', key: 'Cantidad', width: 12 },
                        { header: 'Precio', key: 'Precio', width: 15, style: { numFmt: '#,##0.00' } },
                        { header: 'Fecha Vencimiento', key: 'FechaVencimiento', width: 18 }
                    ];

                    // Estilo para encabezados
                    const headerRow = worksheet.getRow(1);
                    headerRow.eachCell(cell => {
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FF4F81BD' }
                        };
                        cell.font = {
                            bold: true,
                            color: { argb: 'FFFFFFFF' },
                            size: 12
                        };
                        cell.border = {
                            top: { style: 'thin' },
                            left: { style: 'thin' },
                            bottom: { style: 'thin' },
                            right: { style: 'thin' }
                        };
                        cell.alignment = { vertical: 'middle', horizontal: 'center' };
                    });

                    // Función para formatear fechas
                    const formatDate = (dateString) => {
                        if (!dateString) return 'N/A';

                        const date = new Date(dateString);
                        if (isNaN(date.getTime())) return 'N/A';

                        const day = date.getDate().toString().padStart(2, '0');
                        const month = (date.getMonth() + 1).toString().padStart(2, '0');
                        const year = date.getFullYear();

                        return `${day}/${month}/${year}`;
                    };

                    // Agregar datos
                    datosOrdenados.forEach(item => {
                        const rowData = {
                            Cod_Producto: item.Cod_Producto,
                            Nombre: item.Nombre,
                            Marca: item.Marca,
                            NombreProveedor: item.NombreProveedor,
                            Sector: item.Sector,
                            Fecha_Entrada: formatDate(item.Fecha_Entrada),
                            Cantidad: item.Cantidad,
                            Precio: item.Precio,
                            FechaVencimiento: formatDate(item.FechaVencimiento)
                        };

                        const row = worksheet.addRow(rowData);

                        // Formatear celda de precio
                        const precioCell = row.getCell('Precio');
                        precioCell.numFmt = '#,##0.00';

                        // Bordes para todas las celdas
                        row.eachCell(cell => {
                            cell.border = {
                                top: { style: 'thin' },
                                left: { style: 'thin' },
                                bottom: { style: 'thin' },
                                right: { style: 'thin' }
                            };
                        });
                    });

                    // Autoajustar columnas
                    worksheet.columns.forEach(column => {
                        let maxLength = 0;
                        column.eachCell({ includeEmpty: true }, cell => {
                            let columnLength = cell.value ? cell.value.toString().length : 0;
                            if (columnLength > maxLength) {
                                maxLength = columnLength;
                            }
                        });
                        column.width = Math.min(Math.max(maxLength + 2, column.width), 30);
                    });

                    // Generar buffer y descargar
                    const buffer = await workbook.xlsx.writeBuffer();
                    const blob = new Blob([buffer], {
                        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                    });
                    const url = URL.createObjectURL(blob);

                    // Crear enlace y simular click
                    const a = document.createElement('a');
                    const now = new Date();
                    a.href = url;
                    a.download = `reporte_productos_detallados_${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.xlsx`;
                    document.body.appendChild(a);
                    a.click();

                    // Limpiar
                    setTimeout(() => {
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                    }, 100);

                } catch (error) {
                    console.error('Error detallado al exportar:', error);
                    throw new Error(`Error al exportar Excel: ${error.message}`);
                }
            },

            generateReport: async () => {
                try {
                    const response = await reportUtils.fetchData('/reportes/productos-detallado');

                    if (!response.success || !response.data) {
                        throw new Error('Respuesta del servidor inválida');
                    }

                    if (response.data.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', 'No hay productos en el reporte.');
                        return;
                    }

                    await reportHandlers.productosDetallado.exportToExcel(response.data);
                    await reportUtils.showAlert('success', '¡Reporte exportado!', 'El archivo Excel ha sido descargado exitosamente.');

                } catch (error) {
                    await reportUtils.handleError(error, 'generación de reporte de productos detallado');
                }
            }
        },

        ganancias: {
            exportToExcel: async (data) => {
                try {
                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Reporte Ganancias');

                    // Configurar columnas
                    worksheet.columns = [
                        { header: 'Código Venta', key: 'Cod_Venta', width: 15 },
                        { header: 'Código Producto', key: 'Cod_Producto', width: 15 },
                        { header: 'Nombre Producto', key: 'Nombre_Producto', width: 30 },
                        { header: 'Cantidad Vendida', key: 'Cantidad_Venta', width: 15 },
                        { header: 'Costo Unitario', key: 'Costo_Unitario', width: 15, style: { numFmt: 'C$#,##0.00' } },
                        { header: 'Precio Venta Unitario', key: 'Precio_Venta_Unitario', width: 20, style: { numFmt: 'C$#,##0.00' } },
                        { header: 'Margen Unitario', key: 'Margen_Unitario', width: 15, style: { numFmt: 'C$#,##0.00' } },
                        { header: 'Margen Total', key: 'Margen_Total', width: 15, style: { numFmt: 'C$#,##0.00' } },
                        { header: '% Utilidad', key: 'Porcentaje_Utilidad', width: 15, style: { numFmt: '0.00%' } },
                        { header: 'Fecha Compra', key: 'Fecha_Compra', width: 15, style: { numFmt: 'dd/mm/yyyy' } },
                        { header: 'Fecha Venta', key: 'Fecha_Venta', width: 15, style: { numFmt: 'dd/mm/yyyy' } }
                    ];

                    // Estilo para encabezados
                    const headerRow = worksheet.getRow(1);
                    headerRow.eachCell(cell => {
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FFD28E1D' } // Naranja similar al header
                        };
                        cell.font = {
                            bold: true,
                            color: { argb: 'FFFFFFFF' },
                            size: 12
                        };
                        cell.border = {
                            top: { style: 'thin' },
                            left: { style: 'thin' },
                            bottom: { style: 'thin' },
                            right: { style: 'thin' }
                        };
                        cell.alignment = { vertical: 'middle', horizontal: 'center' };
                    });

                    // Agregar datos
                    data.forEach(item => {
                        // Asegurar que los valores numéricos sean correctos
                        const costoUnitario = parseFloat(item.Costo_Unitario) || 0;
                        const precioVenta = parseFloat(item.Precio_Venta_Unitario) || 0;
                        const margenUnitario = precioVenta - costoUnitario;
                        const margenTotal = margenUnitario * (parseFloat(item.Cantidad_Venta) || 0);
                        const porcentajeUtilidad = costoUnitario !== 0 ? (margenUnitario / costoUnitario) : 0;

                        const row = worksheet.addRow({
                            Cod_Venta: item.Cod_Venta,
                            Cod_Producto: item.Cod_Producto,
                            Nombre_Producto: item.Nombre_Producto,
                            Cantidad_Venta: parseFloat(item.Cantidad_Venta) || 0,
                            Costo_Unitario: costoUnitario,
                            Precio_Venta_Unitario: precioVenta,
                            Margen_Unitario: margenUnitario,
                            Margen_Total: margenTotal,
                            Porcentaje_Utilidad: porcentajeUtilidad,
                            Fecha_Compra: item.Fecha_Compra,
                            Fecha_Venta: item.Fecha_Venta
                        });

                        // Formatear celdas numéricas
                        ['Costo_Unitario', 'Precio_Venta_Unitario', 'Margen_Unitario', 'Margen_Total'].forEach(key => {
                            const cell = row.getCell(key);
                            cell.numFmt = 'C$#,##0.00';
                        });

                        // Formatear porcentaje
                        row.getCell('Porcentaje_Utilidad').numFmt = '0.00%';

                        // Formatear fechas
                        ['Fecha_Compra', 'Fecha_Venta'].forEach(key => {
                            const cell = row.getCell(key);
                            if (cell.value) {
                                cell.numFmt = 'dd/mm/yyyy';
                            }
                        });

                        // Bordes para todas las celdas
                        row.eachCell(cell => {
                            cell.border = {
                                top: { style: 'thin' },
                                left: { style: 'thin' },
                                bottom: { style: 'thin' },
                                right: { style: 'thin' }
                            };
                        });
                    });

                    // Calcular totales CORREGIDO:
                    const totalVentas = data.reduce((sum, item) => sum + (parseFloat(item.Precio_Venta_Unitario || 0) * (parseFloat(item.Cantidad_Venta) || 0)), 0);
                    const totalCostos = data.reduce((sum, item) => sum + (parseFloat(item.Costo_Unitario || 0) * (parseFloat(item.Cantidad_Venta) || 0)), 0);
                    const totalMargen = totalVentas - totalCostos;
                    const porcentajeTotal = totalCostos !== 0 ? (totalMargen / totalCostos) : 0;

                    const totalRow = worksheet.addRow({
                        Cod_Venta: 'TOTALES',
                        Cod_Producto: '',
                        Nombre_Producto: '',
                        Cantidad_Venta: data.reduce((sum, item) => sum + (parseFloat(item.Cantidad_Venta) || 0), 0),
                        Costo_Unitario: totalCostos,
                        Precio_Venta_Unitario: totalVentas,
                        Margen_Unitario: '',
                        Margen_Total: totalMargen,
                        Porcentaje_Utilidad: porcentajeTotal,
                        Fecha_Compra: '',
                        Fecha_Venta: ''
                    });

                    // Estilo para fila de totales
                    totalRow.eachCell((cell, colNumber) => {
                        cell.font = { bold: true };
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FFF8E1A1' } // Fondo amarillo claro
                        };
                        if (colNumber >= 5 && colNumber <= 9) { // Columnas numéricas
                            cell.numFmt = colNumber === 9 ? '0.00%' : 'C$#,##0.00';
                        }
                    });

                    // Autoajustar columnas
                    worksheet.columns.forEach(column => {
                        let maxLength = 0;
                        column.eachCell({ includeEmpty: true }, cell => {
                            let columnLength = cell.value ? cell.value.toString().length : 0;
                            if (columnLength > maxLength) {
                                maxLength = columnLength;
                            }
                        });
                        column.width = Math.min(Math.max(maxLength + 2, column.width), 30);
                    });

                    // Descargar archivo
                    const buffer = await workbook.xlsx.writeBuffer();
                    const now = new Date();
                    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `reporte_ganancias_${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.xlsx`;
                    a.click();
                    URL.revokeObjectURL(url);

                } catch (error) {
                    console.error('Error al exportar reporte de ganancias:', error);
                    throw new Error(`Error al exportar Excel: ${error.message}`);
                }
            },

            generateReport: async () => {
                try {
                    const response = await reportUtils.fetchData(reportConfig.ganancias.endpoint);

                    if (!response.success || !response.data) {
                        throw new Error('Respuesta del servidor inválida');
                    }

                    if (response.data.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', 'No hay datos de ganancias para mostrar.');
                        return;
                    }

                    await reportHandlers.ganancias.exportToExcel(response.data);
                    await reportUtils.showAlert('success', '¡Reporte exportado!', 'El reporte de ganancias ha sido descargado exitosamente.');

                } catch (error) {
                    await reportUtils.handleError(error, 'generación de reporte de ganancias');
                }
            }
        },

        empleados: {
            loadEmpleados: async () => {
                try {
                    const response = await reportUtils.fetchData(reportConfig.empleados.endpoint);

                    if (!response.success || !Array.isArray(response.data)) {
                        throw new Error('Formato de respuesta inválido para empleados');
                    }

                    const select = document.getElementById('selectEmpleado');
                    select.innerHTML = '<option value="" selected disabled>-- Seleccione un empleado --</option>';

                    response.data.forEach(empleado => {
                        const option = document.createElement('option');
                        option.value = empleado.Cod_Empleado;
                        option.textContent = `${empleado.Nombre} ${empleado.Apellido}`;
                        select.appendChild(option);
                    });

                } catch (error) {
                    await reportUtils.handleError(error, 'carga de empleados');
                }
            },

            exportVentasEmpleado: async () => {
                try {
                    const select = document.getElementById('selectEmpleado');
                    const empleadoId = select.value;
                    const empleadoNombre = select.options[select.selectedIndex].text;

                    if (!empleadoId) {
                        await reportUtils.showAlert('warning', 'Selección requerida', 'Por favor seleccione un empleado');
                        return;
                    }

                    // Usamos filtro 'mensual' y fecha actual por defecto
                    const fechaActual = new Date().toISOString().split('T')[0];

                    const data = await reportUtils.fetchData(
                        reportConfig.empleados.endpointVentas,
                        'POST',
                        {
                            filtro: 'mensual',
                            fecha: fechaActual,
                            empleado_id: empleadoId
                        }
                    );

                    if (!Array.isArray(data)) {
                        throw new Error('Formato de respuesta inválido');
                    }

                    if (data.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', `No hay ventas registradas para el empleado ${empleadoNombre}`);
                        return;
                    }

                    // Función para formatear fecha a dd/mm/yyyy
                    const formatDate = (dateString) => {
                        if (!dateString) return '';
                        const date = new Date(dateString);
                        if (isNaN(date.getTime())) return dateString;

                        const day = date.getDate().toString().padStart(2, '0');
                        const month = (date.getMonth() + 1).toString().padStart(2, '0');
                        const year = date.getFullYear();

                        return `${day}/${month}/${year}`;
                    };

                    // Exportar a Excel
                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet(`Ventas ${empleadoNombre}`);

                    // Configurar columnas (usando minúsculas para las keys)
                    worksheet.columns = [
                        { header: 'Código Venta', key: 'cod_venta', width: 15 },
                        { header: 'Código Producto', key: 'cod_producto', width: 15 },
                        { header: 'Producto', key: 'nombre_producto', width: 30 },
                        { header: 'Cantidad', key: 'cantidad_venta', width: 15 },
                        { header: 'Monto Total', key: 'monto_total', width: 15, style: { numFmt: 'C$#,##0.00' } },
                        { header: 'Fecha Venta', key: 'fecha_venta_formateada', width: 15 }
                    ];

                    // Estilo encabezados
                    worksheet.getRow(1).eachCell(cell => {
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FF6F42C1' } // Morado
                        };
                        cell.font = { bold: true, color: { argb: 'FFFFFFFF' } };
                    });

                    // Procesar datos y formatear fechas (usando minúsculas)
                    const processedData = data.map(item => ({
                        cod_venta: item.cod_venta || item.Cod_Venta,
                        cod_producto: item.cod_producto || item.Cod_Producto,
                        nombre_producto: item.nombre_producto || item.Nombre_Producto,
                        cantidad_venta: item.cantidad_venta || item.Cantidad_Venta,
                        monto_total: Number(parseFloat(item.monto_total || item.Monto_Total || 0).toFixed(2)),
                        fecha_venta_formateada: formatDate(item.fecha_venta || item.Fecha_Venta)
                    }));

                    // Agregar datos (usando minúsculas)
                    processedData.forEach(item => {
                        worksheet.addRow({
                            cod_venta: item.cod_venta,
                            cod_producto: item.cod_producto,
                            nombre_producto: item.nombre_producto,
                            cantidad_venta: item.cantidad_venta,
                            monto_total: item.monto_total,
                            fecha_venta_formateada: item.fecha_venta_formateada
                        });
                    });

                    // Agregar totales (usando minúsculas)
                    const totalVentas = processedData.reduce((sum, item) => sum + item.monto_total, 0);
                    const totalCantidad = processedData.reduce((sum, item) => sum + parseInt(item.cantidad_venta), 0);

                    const totalRow = worksheet.addRow({
                        cod_venta: 'TOTAL',
                        cod_producto: '',
                        nombre_producto: '',
                        cantidad_venta: totalCantidad,
                        monto_total: totalVentas,
                        fecha_venta_formateada: ''
                    });

                    // Estilo fila total
                    totalRow.eachCell(cell => {
                        cell.font = { bold: true };
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FFE2D4F8' } // Morado claro
                        };
                    });

                    // Formatear celdas numéricas en la fila total
                    totalRow.getCell('monto_total').numFmt = 'C$#,##0.00';

                    // Generar y descargar archivo
                    const buffer = await workbook.xlsx.writeBuffer();
                    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `ventas_empleado_${empleadoNombre.replace(/\s+/g, '_')}.xlsx`;
                    a.click();
                    URL.revokeObjectURL(url);

                    await reportUtils.showAlert('success', 'Exportación exitosa', `Reporte de ventas para ${empleadoNombre} generado correctamente`);

                } catch (error) {
                    await reportUtils.handleError(error, 'exportación de ventas por empleado');
                }
            }
        },

        bajas: {
            getFilterParams: () => {
                const filtro = document.getElementById('filtroBajas').value;
                let params = { filtro };

                if (filtro === 'mes') {
                    params.fecha = document.getElementById('fechaBajasMesInput').value;
                } else if (filtro === 'anio') {
                    params.fecha = document.getElementById('fechaBajasAnioInput').value;
                }

                return params;
            },

            exportToExcel: async (data) => {
                try {
                    const ExcelJS = window.ExcelJS;
                    const workbook = new ExcelJS.Workbook();
                    const worksheet = workbook.addWorksheet('Bajas de Productos');

                    // Configurar columnas
                    worksheet.columns = [
                        { header: 'ID Baja', key: 'Id_Baja', width: 10 },
                        { header: 'Código Producto', key: 'Cod_Producto', width: 15 },
                        { header: 'Nombre Producto', key: 'Nombre_Producto', width: 30 },
                        { header: 'Proveedor', key: 'Nombre_Proveedor', width: 25 },
                        { header: 'Hora Baja', key: 'Hora_Baja', width: 15 },
                        { header: 'Fecha Salida', key: 'Fecha_Salida_Baja', width: 15 },
                        { header: 'Cantidad', key: 'Cantidad', width: 10 },
                        { header: 'Precio Compra', key: 'Precio_Compra', width: 15, style: { numFmt: 'C$#,##0.00' } },
                        { header: 'Subtotal', key: 'Subtotal', width: 15, style: { numFmt: 'C$#,##0.00' } },
                        { header: 'Motivo', key: 'Motivo', width: 40 }
                    ];

                    // Estilo para encabezados
                    const headerRow = worksheet.getRow(1);
                    headerRow.eachCell(cell => {
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FFFF0000' } // Rojo
                        };
                        cell.font = {
                            bold: true,
                            color: { argb: 'FFFFFFFF' },
                            size: 12
                        };
                        cell.border = {
                            top: { style: 'thin' },
                            left: { style: 'thin' },
                            bottom: { style: 'thin' },
                            right: { style: 'thin' }
                        };
                        cell.alignment = { vertical: 'middle', horizontal: 'center' };
                    });

                    // Función para formatear fechas
                    const formatDateTime = (dateString) => {
                        if (!dateString) return 'N/A';
                        const date = new Date(dateString);
                        if (isNaN(date.getTime())) return 'N/A';

                        // Para fecha (dd/mm/yyyy)
                        const day = date.getDate().toString().padStart(2, '0');
                        const month = (date.getMonth() + 1).toString().padStart(2, '0');
                        const year = date.getFullYear();

                        // Para hora (hh:mm)
                        const hours = date.getHours().toString().padStart(2, '0');
                        const minutes = date.getMinutes().toString().padStart(2, '0');

                        return {
                            fecha: `${day}/${month}/${year}`,
                            hora: `${hours}:${minutes}`
                        };
                    };
                    // Agregar datos
                    data.forEach(item => {
                        const fechaBaja = formatDateTime(item.Fecha_Baja);
                        const fechaSalida = formatDateTime(item.Fecha_Salida_Baja);

                        const row = worksheet.addRow({
                            Id_Baja: item.Id_Baja,
                            Cod_Producto: item.Cod_Producto,
                            Nombre_Producto: item.Nombre_Producto || 'N/A',
                            Nombre_Proveedor: item.Nombre_Proveedor || 'N/A',
                            Hora_Baja: fechaBaja.hora,
                            Fecha_Salida_Baja: fechaSalida.fecha,
                            Cantidad: item.Cantidad,
                            Precio_Compra: parseFloat(item.Precio_Compra) || 0,
                            Subtotal: parseFloat(item.Subtotal) || 0,
                            Motivo: item.Motivo
                        });

                        // Formatear celdas numéricas
                        ['Precio_Compra', 'Subtotal'].forEach(key => {
                            const cell = row.getCell(key);
                            cell.numFmt = 'C$#,##0.00';
                        });

                        // Bordes para todas las celdas
                        row.eachCell(cell => {
                            cell.border = {
                                top: { style: 'thin' },
                                left: { style: 'thin' },
                                bottom: { style: 'thin' },
                                right: { style: 'thin' }
                            };
                        });
                    });

                    // Calcular total de pérdidas
                    const totalPerdidas = data.reduce((sum, item) => sum + (parseFloat(item.Subtotal) || 0), 0);
                    const totalRow = worksheet.addRow({
                        Id_Baja: 'TOTAL PERDIDAS',
                        Cod_Producto: '',
                        Nombre_Producto: '',
                        Nombre_Proveedor: '',
                        Hora_Baja: '',
                        Fecha_Salida_Baja: '',
                        Cantidad: data.reduce((sum, item) => sum + (parseInt(item.Cantidad) || 0), 0),
                        Precio_Compra: '',
                        Subtotal: totalPerdidas,
                        Motivo: ''
                    });

                    // Estilo para fila de totales
                    totalRow.eachCell((cell, colNumber) => {
                        cell.font = { bold: true };
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'FFFFC0CB' } // Rosa claro
                        };

                        // Formatear celda de subtotal
                        if (colNumber === 9) {
                            cell.numFmt = 'C$#,##0.00';
                        }
                    });

                    // Autoajustar columnas
                    worksheet.columns.forEach(column => {
                        let maxLength = 0;
                        column.eachCell({ includeEmpty: true }, cell => {
                            let columnLength = cell.value ? cell.value.toString().length : 0;
                            if (columnLength > maxLength) {
                                maxLength = columnLength;
                            }
                        });
                        column.width = Math.min(Math.max(maxLength + 2, column.width), 50);
                    });

                    // Descargar archivo
                    const buffer = await workbook.xlsx.writeBuffer();
                    const now = new Date();
                    const blob = new Blob([buffer], {
                        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                    });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `reporte_bajas_${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.xlsx`;
                    a.click();
                    URL.revokeObjectURL(url);

                } catch (error) {
                    console.error('Error al exportar reporte de bajas:', error);
                    throw new Error(`Error al exportar Excel: ${error.message}`);
                }
            },

            generateReport: async () => {
                try {
                    const params = reportHandlers.bajas.getFilterParams();
                    const response = await reportUtils.fetchData(
                        reportConfig.bajas.endpoint,
                        'POST',
                        params
                    );

                    if (!response.success || !Array.isArray(response.data)) {
                        throw new Error('Respuesta del servidor inválida');
                    }

                    if (response.data.length === 0) {
                        await reportUtils.showAlert('info', 'Sin datos', 'No hay registros de bajas para los filtros seleccionados.');
                        return;
                    }

                    await reportHandlers.bajas.exportToExcel(response.data);
                    await reportUtils.showAlert('success', '¡Reporte exportado!', 'El reporte de bajas ha sido descargado exitosamente.');

                } catch (error) {
                    await reportUtils.handleError(error, 'generación de reporte de bajas');
                }
            }
        }
    };

    // Inicialización
    document.addEventListener('DOMContentLoaded', () => {
        // Asignar eventos
        document.getElementById('exportarVentas').addEventListener('click', reportHandlers.ventas.generateReport);
        document.getElementById('exportarProductos').addEventListener('click', reportHandlers.productos.generateReport);
        document.getElementById('exportarProductosDetallado').addEventListener('click', reportHandlers.productosDetallado.generateReport);
        document.getElementById('exportarGanancias').addEventListener('click', reportHandlers.ganancias.generateReport);
        document.getElementById('exportarVentasEmpleado').addEventListener('click', reportHandlers.empleados.exportVentasEmpleado);
        document.getElementById('exportarBajas').addEventListener('click', reportHandlers.bajas.generateReport);

        // Evento para el filtro de bajas
        document.getElementById('filtroBajas').addEventListener('change', function () {
            document.getElementById('fechaBajasMes').classList.add('d-none');
            document.getElementById('fechaBajasAnio').classList.add('d-none');

            if (this.value === 'mes') {
                document.getElementById('fechaBajasMes').classList.remove('d-none');
            } else if (this.value === 'anio') {
                document.getElementById('fechaBajasAnio').classList.remove('d-none');
            }
        });

        // Mostrar/ocultar campos de fecha según el filtro seleccionado
        document.querySelectorAll('input[name="filtroVentas"]').forEach(radio => {
            radio.addEventListener('change', function () {
                document.getElementById('fechaDiario').classList.add('d-none');
                document.getElementById('fechaSemanal').classList.add('d-none');
                document.getElementById('fechaMensual').classList.add('d-none');

                if (this.id === 'diario') {
                    document.getElementById('fechaDiario').classList.remove('d-none');
                } else if (this.id === 'semanal') {
                    document.getElementById('fechaSemanal').classList.remove('d-none');
                } else if (this.id === 'mensual') {
                    document.getElementById('fechaMensual').classList.remove('d-none');
                }
            });
        });

        // Inicializar con el filtro diario visible
        document.getElementById('fechaDiario').classList.remove('d-none');

        // Cargar lista de empleados
        reportHandlers.empleados.loadEmpleados();
    });
</script>

<script>
    // Solución definitiva para el dropdown del navbar
    document.addEventListener('DOMContentLoaded', function () {
        // Manejar clicks en el dropdown manualmente
        document.querySelectorAll('.dropdown-toggle').forEach(function (toggle) {
            toggle.addEventListener('click', function (e) {
                e.preventDefault();
                var menu = this.nextElementSibling;
                menu.classList.toggle('show');
            });
        });

        // Cerrar dropdown al hacer click fuera
        document.addEventListener('click', function (e) {
            if (!e.target.closest('.dropdown')) {
                document.querySelectorAll('.dropdown-menu.show').forEach(function (menu) {
                    menu.classList.remove('show');
                });
            }
        });

        // Reinicializar dropdowns después de DataTables
        if ($.fn.DataTable.isDataTable('#empleadosTable')) {
            $('#empleadosTable').on('init.dt', function () {
                new bootstrap.Dropdown(document.querySelector('.dropdown-toggle'));
            });
        }
    });
</script>