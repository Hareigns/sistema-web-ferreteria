<link rel="stylesheet" href="/styles/dashboardemple.css">
<title>Mis Ventas - Ferretería</title>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">

            <!-- Gráfico de Ventas Mensuales -->
            <div class="card shadow mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Mis Ventas (Últimos 15 días)</h3>
                </div>
                <div class="card-body d-flex align-items-center justify-content-center" style="height: 350px;">
                    <canvas id="ventasChart"></canvas>
                </div>
            </div>

            <!-- Tabla de Ventas Recientes -->
            <div class="card shadow mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Mis Ventas Recientes</h3>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Fecha</th>
                                    <th>Total</th>
                                    <th>Cantidad de Ventas</th>
                                </tr>
                            </thead>
                            <tbody id="tabla-ventas">
                                <!-- Datos se insertarán aquí con JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Scripts para gráficos con Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', async function () {
        try {
            // Obtener información del empleado logueado
            const empleadoInfo = await obtenerEmpleadoInfo();

            if (!empleadoInfo.id) {
                throw new Error('No se pudo obtener el ID del empleado');
            }

            const apiUrl = `http://localhost:4000/dashboardemple/${empleadoInfo.id}`;
            console.log('Consultando API en:', apiUrl);

            // 1. Obtener datos del backend
            const response = await fetch(apiUrl, {
                credentials: 'include',
                headers: {
                    'Accept': 'application/json'
                }
            });

            console.log('Respuesta del servidor:', {
                status: response.status,
                ok: response.ok,
                url: response.url
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(errorData?.message || `Error HTTP! estado: ${response.status}`);
            }

            const data = await response.json();
            console.log('Datos recibidos:', data);

            if (!data.success) throw new Error(data.message || 'Respuesta no exitosa del servidor');

            // 2. Mostrar datos en gráficos y tablas
            renderCharts(data);
            renderTables(data);

        } catch (error) {
            console.error('Error en dashboard:', error);
            document.getElementById('tabla-ventas').innerHTML = `
      <tr><td colspan="3" class="text-danger">Error al cargar datos: ${error.message}</td></tr>
    `;

            const chartContainer = document.getElementById('ventasChart');
            if (chartContainer) {
                chartContainer.parentElement.innerHTML = `
        <div class="alert alert-danger">
          <strong>Error:</strong> ${error.message}
          <p>Por favor recarga la página o contacta al administrador.</p>
        </div>
      `;
            }
        }
    });

    function renderCharts(data) {
        // Gráfico de ventas diarias del empleado
        if (data.ventasDiarias && data.ventasDiarias.length > 0) {
            const ventasCtx = document.getElementById('ventasChart').getContext('2d');
            new Chart(ventasCtx, {
                type: 'bar',
                data: {
                    labels: data.ventasDiarias.map(v => formatDate(v.fecha)),
                    datasets: [{
                        label: 'Mis Ventas Diarias (C$)',
                        data: data.ventasDiarias.map(v => v.total),
                        backgroundColor: 'rgba(41, 128, 185, 0.9)',
                        borderColor: 'rgba(41, 128, 185, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return 'C$' + value.toLocaleString();
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return 'C$' + context.raw.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        } else {
            // Mostrar mensaje si no hay datos
            document.getElementById('ventasChart').parentElement.innerHTML =
                '<p class="text-muted">No hay datos de ventas en los últimos 15 días</p>';
        }
    }

    function renderTables(data) {
        // Tabla de ventas diarias del empleado
        const ventasTable = document.getElementById('tabla-ventas');
        if (data.ventasDiarias && data.ventasDiarias.length > 0) {
            ventasTable.innerHTML = data.ventasDiarias.map(v => `
        <tr>
          <td>${formatDate(v.fecha)}</td>
          <td>C$${v.total?.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") || '0.00'}</td>
          <td>${v.cantidad_ventas || 0}</td>
        </tr>
      `).join('');
        } else {
            ventasTable.innerHTML = '<tr><td colspan="3">No hay registros de ventas en los últimos 15 días</td></tr>';
        }
    }

    function formatDate(dateString) {
        if (!dateString) return 'N/A';

        try {
            const fecha = new Date(dateString);
            const options = {
                timeZone: 'America/Managua',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            };

            return fecha.toLocaleDateString('es-NI', options);
        } catch (e) {
            console.error('Error formateando fecha:', dateString, e);
            return dateString.split('T')[0].split('-').reverse().join('/');
        }
    }

    // Función existente para obtener información del empleado
    async function obtenerEmpleadoInfo() {
        try {
            const response = await fetch('/api/usuario/actual', {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Accept': 'application/json'
                }
            });

            const data = await response.json();
            console.log("Datos recibidos del empleado:", data);

            if (!response.ok) {
                throw new Error(data.message || 'Error al obtener datos del empleado');
            }

            // Versión más flexible para manejar diferentes estructuras de respuesta
            const nombre = data.Nombre || data.nombre || data.Nombre_Empleado || data.nombre_empleado || 'Nombre';
            const apellido = data.Apellido || data.apellido || data.Apellido_Empleado || data.apellido_empleado || 'Apellido';

            return {
                id: data.Cod_Empleado || data.id || data.empleadoId || null,
                nombre: nombre.split(' ')[0], // Tomar solo el primer nombre
                apellido: apellido.split(' ')[0] // Tomar solo el primer apellido
            };

        } catch (error) {
            console.error('Error al obtener información del empleado:', error);
            return {
                id: null,
                nombre: 'Nombre',
                apellido: 'Apellido'
            };
        }
    }
</script>