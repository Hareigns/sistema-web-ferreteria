<link rel="stylesheet" href="/styles/dashboard.css">
<title>Estad칤sticas - Ferreter칤a</title>

<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-8">

      <!-- Gr치ficos: Ventas Mensuales y por Empleado -->
      <div class="row">
        <!-- Gr치fico de Ventas Mensuales -->
        <div class="col-md-6 mb-4">
          <div class="card shadow h-100">
            <div class="card-header bg-primary text-white">
              <h3 class="mb-0">Ventas Mensuales</h3>
            </div>
            <div class="card-body d-flex align-items-center justify-content-center" style="height: 350px;">
              <canvas id="ventasChart"></canvas>
            </div>
          </div>
        </div>
        <!-- Gr치fico de Ventas por Empleado -->
        <div class="col-md-6 mb-4">
          <div class="card shadow h-100">
            <div class="card-header bg-primary text-white">
              <h3 class="mb-0">Ventas por Empleado</h3>
            </div>
            <div class="card-body">
              <canvas id="empleadosChart" style="height: 300px;"></canvas>
            </div>
          </div>
        </div>
      </div>


      <!-- Tabla de Ventas Recientes -->
      <div class="card shadow mb-4">
        <div class="card-header bg-primary text-white">
          <h3 class="mb-0">Ventas Recientes</h3>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped">
              <thead>
                <tr>
                  <th>Fecha</th>
                  <th>Total</th>
                  <th>Cantidad</th>
                </tr>
              </thead>
              <tbody id="tabla-ventas">
                <!-- Datos se insertar치n aqu칤 con JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Tabla de Ventas por Empleado -->
      <div class="card shadow mb-4">
        <div class="card-header bg-primary text-white">
          <h3 class="mb-0">Ventas por Empleado</h3>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped">
              <thead>
                <tr>
                  <th>Empleado</th>
                  <th>Total Vendido</th>
                  <th>Total de Ventas</th>
                </tr>
              </thead>
              <tbody id="tabla-empleados">
                <!-- Datos se insertar치n aqu칤 con JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>


<!-- Scripts para gr치ficos con Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', async function () {
    try {
      // 1. Obtener datos del backend
      const response = await fetch('/dashboard/estadisticas');
      if (!response.ok) {
        throw new Error(`Error HTTP! estado: ${response.status}`);
      }
      const data = await response.json();

      if (!data.success) throw new Error(data.message);

      // 2. Mostrar datos en gr치ficos
      renderCharts(data);
      renderTables(data);

    } catch (error) {
      console.error('Error:', error);
      document.getElementById('tabla-ventas').innerHTML = `
      <tr><td colspan="3">Error al cargar datos: ${error.message}</td></tr>
    `;
    }
  });

  function renderCharts(data) {
    // Gr치fico de ventas diarias
    if (data.ventasDiarias && data.ventasDiarias.length > 0) {
      new Chart(document.getElementById('ventasChart').getContext('2d'), {
        type: 'bar',
        data: {
          labels: data.ventasDiarias.map(v => v.fecha),
          datasets: [{
            label: 'Ventas Diarias (C$)',
            data: data.ventasDiarias.map(v => v.total),
            backgroundColor: 'rgba(54, 162, 235, 0.7)'
          }]
        }
      });
    }

    // Gr치fico de ventas por empleado
    if (data.ventasEmpleados && data.ventasEmpleados.length > 0) {
      new Chart(document.getElementById('empleadosChart').getContext('2d'), {
        type: 'doughnut',
        data: {
          labels: data.ventasEmpleados.map(e => e.nombre),
          datasets: [{
            label: 'Ventas por Empleado (C$)',
            data: data.ventasEmpleados.map(e => e.total),
            backgroundColor: [
              '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'
            ]
          }]
        }
      });
    }
  }

  function renderTables(data) {
    // Tabla de ventas diarias
    const ventasTable = document.getElementById('tabla-ventas');
    if (data.ventasDiarias && data.ventasDiarias.length > 0) {
      ventasTable.innerHTML = data.ventasDiarias.map(v => {
        const fecha = new Date(v.fecha);
        const dia = String(fecha.getDate()).padStart(2, '0');
        const mes = String(fecha.getMonth() + 1).padStart(2, '0');
        const anio = String(fecha.getFullYear()).slice(-2);
        const fechaFormateada = `${dia}-${mes}-${anio}`;

        return `
        <tr>
          <td>${fechaFormateada}</td>
          <td>C$${v.total?.toFixed(2) || '0.00'}</td>
          <td>${v.cantidad_ventas || 0}</td>
        </tr>
      `;
      }).join('');
    } else {
      ventasTable.innerHTML = '<tr><td colspan="3">No hay registros de ventas</td></tr>';
    }

    // Tabla de ventas por empleado
    const empleadosTable = document.getElementById('tabla-empleados');
    if (data.ventasEmpleados && data.ventasEmpleados.length > 0) {
      empleadosTable.innerHTML = data.ventasEmpleados.map(e => `
      <tr>
        <td>${e.nombre || 'N/A'}</td>
        <td>C$${e.total?.toFixed(2) || '0.00'}</td>
        <td>${e.cantidad_ventas || 0}</td>
      </tr>
    `).join('');
    } else {
      empleadosTable.innerHTML = '<tr><td colspan="3">No hay datos de empleados</td></tr>';
    }

    // Mostrar resumen
    if (data.resumen) {
      const resumenElements = {
        'ventas-totales': `C$${data.resumen.ventas_totales?.toFixed(2) || '0.00'}`,
        'total-ventas': data.resumen.total_ventas || 0,
        'empleados-activos': data.resumen.empleados_activos || 0,
        'empleado-destacado': data.resumen.empleado_destacado || 'N/A'
      };

      for (const [id, value] of Object.entries(resumenElements)) {
        const element = document.getElementById(id);
        if (element) element.textContent = value;
      }
    }
  }

</script>


<!-- Bot칩n Manual de Usuario -->
<a href="#" id="manualUsuarioBtn" class="manual-btn">
  游닀 Manual de Usuario
</a>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    configurarManualUsuario();
  });

  async function configurarManualUsuario() {
    const manualBtn = document.getElementById('manualUsuarioBtn');
    
    // Configura el bot칩n
    manualBtn.textContent = "游닀 Descargar Manual";
    manualBtn.onclick = async function(e) {
      e.preventDefault();
      
      try {
        // Obtener el manual desde el backend
        const response = await fetch('/obtener-manual', {
          credentials: 'include' // Incluye cookies para autenticaci칩n
        });
        
        if (!response.ok) throw new Error('Error al descargar');
        
        // Crear objeto Blob y descargar
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        
        // Obtener el nombre del archivo del header Content-Disposition
        const contentDisposition = response.headers.get('Content-Disposition');
        let filename = 'manual.pdf';
        if (contentDisposition) {
          const filenameMatch = contentDisposition.match(/filename="(.+)"/);
          if (filenameMatch) filename = filenameMatch[1];
        }
        
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      } catch (error) {
        console.error('Error:', error);
        alert('Error al descargar el manual');
      }
    };
  }
</script>